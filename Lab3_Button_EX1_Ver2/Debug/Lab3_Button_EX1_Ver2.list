
Lab3_Button_EX1_Ver2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002b28  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000020  08002c34  08002c34  00012c34  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002c54  08002c54  0002005c  2**0
                  CONTENTS
  4 .ARM          00000000  08002c54  08002c54  0002005c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002c54  08002c54  0002005c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002c54  08002c54  00012c54  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002c58  08002c58  00012c58  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000005c  20000000  08002c5c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000010c  2000005c  08002cb8  0002005c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000168  08002cb8  00020168  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002005c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00009113  00000000  00000000  00020085  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001e60  00000000  00000000  00029198  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000b48  00000000  00000000  0002aff8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000a18  00000000  00000000  0002bb40  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017245  00000000  00000000  0002c558  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000ce11  00000000  00000000  0004379d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008238b  00000000  00000000  000505ae  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000d2939  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002b74  00000000  00000000  000d298c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000005c 	.word	0x2000005c
 8000128:	00000000 	.word	0x00000000
 800012c:	08002c1c 	.word	0x08002c1c

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000060 	.word	0x20000060
 8000148:	08002c1c 	.word	0x08002c1c

0800014c <is_SELECT_PRESSED>:

int Timer_for_key_Press1 = 200 ;				//set Timer for nhaans def



int is_SELECT_PRESSED(){
 800014c:	b480      	push	{r7}
 800014e:	af00      	add	r7, sp, #0
	if(SELECT_FLAG == 1){
 8000150:	4b06      	ldr	r3, [pc, #24]	; (800016c <is_SELECT_PRESSED+0x20>)
 8000152:	681b      	ldr	r3, [r3, #0]
 8000154:	2b01      	cmp	r3, #1
 8000156:	d104      	bne.n	8000162 <is_SELECT_PRESSED+0x16>
		SELECT_FLAG = 0;
 8000158:	4b04      	ldr	r3, [pc, #16]	; (800016c <is_SELECT_PRESSED+0x20>)
 800015a:	2200      	movs	r2, #0
 800015c:	601a      	str	r2, [r3, #0]
		return 1;
 800015e:	2301      	movs	r3, #1
 8000160:	e000      	b.n	8000164 <is_SELECT_PRESSED+0x18>
	}
	return 0;
 8000162:	2300      	movs	r3, #0
}
 8000164:	4618      	mov	r0, r3
 8000166:	46bd      	mov	sp, r7
 8000168:	bc80      	pop	{r7}
 800016a:	4770      	bx	lr
 800016c:	20000078 	.word	0x20000078

08000170 <sub_for_Process>:


void sub_for_Process(){
 8000170:	b480      	push	{r7}
 8000172:	af00      	add	r7, sp, #0
	SELECT_FLAG = 1;
 8000174:	4b03      	ldr	r3, [pc, #12]	; (8000184 <sub_for_Process+0x14>)
 8000176:	2201      	movs	r2, #1
 8000178:	601a      	str	r2, [r3, #0]
//	HAL_GPIO_WritePin(RED1_GPIO_Port, RED1_Pin, 1);
}
 800017a:	bf00      	nop
 800017c:	46bd      	mov	sp, r7
 800017e:	bc80      	pop	{r7}
 8000180:	4770      	bx	lr
 8000182:	bf00      	nop
 8000184:	20000078 	.word	0x20000078

08000188 <get_key_Input>:

void get_key_Input(){
 8000188:	b580      	push	{r7, lr}
 800018a:	af00      	add	r7, sp, #0
	keyReg0_SELECT = keyReg1_SELECT;
 800018c:	4b22      	ldr	r3, [pc, #136]	; (8000218 <get_key_Input+0x90>)
 800018e:	681b      	ldr	r3, [r3, #0]
 8000190:	4a22      	ldr	r2, [pc, #136]	; (800021c <get_key_Input+0x94>)
 8000192:	6013      	str	r3, [r2, #0]
	keyReg1_SELECT = keyReg2_SELECT;
 8000194:	4b22      	ldr	r3, [pc, #136]	; (8000220 <get_key_Input+0x98>)
 8000196:	681b      	ldr	r3, [r3, #0]
 8000198:	4a1f      	ldr	r2, [pc, #124]	; (8000218 <get_key_Input+0x90>)
 800019a:	6013      	str	r3, [r2, #0]
	keyReg2_SELECT = HAL_GPIO_ReadPin(SELECT_GPIO_Port, SELECT_Pin);
 800019c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80001a0:	4820      	ldr	r0, [pc, #128]	; (8000224 <get_key_Input+0x9c>)
 80001a2:	f001 fcfb 	bl	8001b9c <HAL_GPIO_ReadPin>
 80001a6:	4603      	mov	r3, r0
 80001a8:	461a      	mov	r2, r3
 80001aa:	4b1d      	ldr	r3, [pc, #116]	; (8000220 <get_key_Input+0x98>)
 80001ac:	601a      	str	r2, [r3, #0]
	if(keyReg0_SELECT == keyReg1_SELECT && keyReg1_SELECT == keyReg2_SELECT){
 80001ae:	4b1b      	ldr	r3, [pc, #108]	; (800021c <get_key_Input+0x94>)
 80001b0:	681a      	ldr	r2, [r3, #0]
 80001b2:	4b19      	ldr	r3, [pc, #100]	; (8000218 <get_key_Input+0x90>)
 80001b4:	681b      	ldr	r3, [r3, #0]
 80001b6:	429a      	cmp	r2, r3
 80001b8:	d12b      	bne.n	8000212 <get_key_Input+0x8a>
 80001ba:	4b17      	ldr	r3, [pc, #92]	; (8000218 <get_key_Input+0x90>)
 80001bc:	681a      	ldr	r2, [r3, #0]
 80001be:	4b18      	ldr	r3, [pc, #96]	; (8000220 <get_key_Input+0x98>)
 80001c0:	681b      	ldr	r3, [r3, #0]
 80001c2:	429a      	cmp	r2, r3
 80001c4:	d125      	bne.n	8000212 <get_key_Input+0x8a>
		if(keyReg3_SELECT != keyReg2_SELECT){
 80001c6:	4b18      	ldr	r3, [pc, #96]	; (8000228 <get_key_Input+0xa0>)
 80001c8:	681a      	ldr	r2, [r3, #0]
 80001ca:	4b15      	ldr	r3, [pc, #84]	; (8000220 <get_key_Input+0x98>)
 80001cc:	681b      	ldr	r3, [r3, #0]
 80001ce:	429a      	cmp	r2, r3
 80001d0:	d00d      	beq.n	80001ee <get_key_Input+0x66>
			keyReg3_SELECT = keyReg2_SELECT;
 80001d2:	4b13      	ldr	r3, [pc, #76]	; (8000220 <get_key_Input+0x98>)
 80001d4:	681b      	ldr	r3, [r3, #0]
 80001d6:	4a14      	ldr	r2, [pc, #80]	; (8000228 <get_key_Input+0xa0>)
 80001d8:	6013      	str	r3, [r2, #0]
			if(keyReg2_SELECT == PRESSED_STATE){					//Nhaans tha?
 80001da:	4b11      	ldr	r3, [pc, #68]	; (8000220 <get_key_Input+0x98>)
 80001dc:	681b      	ldr	r3, [r3, #0]
 80001de:	2b00      	cmp	r3, #0
 80001e0:	d117      	bne.n	8000212 <get_key_Input+0x8a>
				//TOdo for press 1 time
				sub_for_Process();
 80001e2:	f7ff ffc5 	bl	8000170 <sub_for_Process>
				Timer_for_key_Press1 = 200;
 80001e6:	4b11      	ldr	r3, [pc, #68]	; (800022c <get_key_Input+0xa4>)
 80001e8:	22c8      	movs	r2, #200	; 0xc8
 80001ea:	601a      	str	r2, [r3, #0]
				}
				Timer_for_key_Press1 = 200;
			}
			}
		}
	}
 80001ec:	e011      	b.n	8000212 <get_key_Input+0x8a>
			Timer_for_key_Press1--;
 80001ee:	4b0f      	ldr	r3, [pc, #60]	; (800022c <get_key_Input+0xa4>)
 80001f0:	681b      	ldr	r3, [r3, #0]
 80001f2:	3b01      	subs	r3, #1
 80001f4:	4a0d      	ldr	r2, [pc, #52]	; (800022c <get_key_Input+0xa4>)
 80001f6:	6013      	str	r3, [r2, #0]
			if(Timer_for_key_Press1 == 0){
 80001f8:	4b0c      	ldr	r3, [pc, #48]	; (800022c <get_key_Input+0xa4>)
 80001fa:	681b      	ldr	r3, [r3, #0]
 80001fc:	2b00      	cmp	r3, #0
 80001fe:	d108      	bne.n	8000212 <get_key_Input+0x8a>
				if(keyReg2_SELECT == PRESSED_STATE){
 8000200:	4b07      	ldr	r3, [pc, #28]	; (8000220 <get_key_Input+0x98>)
 8000202:	681b      	ldr	r3, [r3, #0]
 8000204:	2b00      	cmp	r3, #0
 8000206:	d101      	bne.n	800020c <get_key_Input+0x84>
					sub_for_Process();
 8000208:	f7ff ffb2 	bl	8000170 <sub_for_Process>
				Timer_for_key_Press1 = 200;
 800020c:	4b07      	ldr	r3, [pc, #28]	; (800022c <get_key_Input+0xa4>)
 800020e:	22c8      	movs	r2, #200	; 0xc8
 8000210:	601a      	str	r2, [r3, #0]
	}
 8000212:	bf00      	nop
 8000214:	bd80      	pop	{r7, pc}
 8000216:	bf00      	nop
 8000218:	20000004 	.word	0x20000004
 800021c:	20000000 	.word	0x20000000
 8000220:	20000008 	.word	0x20000008
 8000224:	40010c00 	.word	0x40010c00
 8000228:	2000000c 	.word	0x2000000c
 800022c:	20000010 	.word	0x20000010

08000230 <sub_for_Process2>:


int Timer_for_key_Press2 = 200 ;				//set Timer for nhaans def


void sub_for_Process2(){
 8000230:	b480      	push	{r7}
 8000232:	af00      	add	r7, sp, #0
	MODIFY_FLAG = 1;
 8000234:	4b03      	ldr	r3, [pc, #12]	; (8000244 <sub_for_Process2+0x14>)
 8000236:	2201      	movs	r2, #1
 8000238:	601a      	str	r2, [r3, #0]
}
 800023a:	bf00      	nop
 800023c:	46bd      	mov	sp, r7
 800023e:	bc80      	pop	{r7}
 8000240:	4770      	bx	lr
 8000242:	bf00      	nop
 8000244:	2000007c 	.word	0x2000007c

08000248 <is_MODIFY_PRESSED>:

int is_MODIFY_PRESSED(){
 8000248:	b480      	push	{r7}
 800024a:	af00      	add	r7, sp, #0
	if(MODIFY_FLAG == 1){
 800024c:	4b06      	ldr	r3, [pc, #24]	; (8000268 <is_MODIFY_PRESSED+0x20>)
 800024e:	681b      	ldr	r3, [r3, #0]
 8000250:	2b01      	cmp	r3, #1
 8000252:	d104      	bne.n	800025e <is_MODIFY_PRESSED+0x16>
		MODIFY_FLAG = 0;
 8000254:	4b04      	ldr	r3, [pc, #16]	; (8000268 <is_MODIFY_PRESSED+0x20>)
 8000256:	2200      	movs	r2, #0
 8000258:	601a      	str	r2, [r3, #0]
		return 1;
 800025a:	2301      	movs	r3, #1
 800025c:	e000      	b.n	8000260 <is_MODIFY_PRESSED+0x18>
	}
	return 0;
 800025e:	2300      	movs	r3, #0
}
 8000260:	4618      	mov	r0, r3
 8000262:	46bd      	mov	sp, r7
 8000264:	bc80      	pop	{r7}
 8000266:	4770      	bx	lr
 8000268:	2000007c 	.word	0x2000007c

0800026c <get_key_Input2>:


void get_key_Input2(){
 800026c:	b580      	push	{r7, lr}
 800026e:	af00      	add	r7, sp, #0
	keyReg0_MODIFY = keyReg1_MODIFY;
 8000270:	4b22      	ldr	r3, [pc, #136]	; (80002fc <get_key_Input2+0x90>)
 8000272:	681b      	ldr	r3, [r3, #0]
 8000274:	4a22      	ldr	r2, [pc, #136]	; (8000300 <get_key_Input2+0x94>)
 8000276:	6013      	str	r3, [r2, #0]
	keyReg1_MODIFY = keyReg2_MODIFY;
 8000278:	4b22      	ldr	r3, [pc, #136]	; (8000304 <get_key_Input2+0x98>)
 800027a:	681b      	ldr	r3, [r3, #0]
 800027c:	4a1f      	ldr	r2, [pc, #124]	; (80002fc <get_key_Input2+0x90>)
 800027e:	6013      	str	r3, [r2, #0]
	keyReg2_MODIFY = HAL_GPIO_ReadPin(MODIFY_GPIO_Port, MODIFY_Pin);
 8000280:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000284:	4820      	ldr	r0, [pc, #128]	; (8000308 <get_key_Input2+0x9c>)
 8000286:	f001 fc89 	bl	8001b9c <HAL_GPIO_ReadPin>
 800028a:	4603      	mov	r3, r0
 800028c:	461a      	mov	r2, r3
 800028e:	4b1d      	ldr	r3, [pc, #116]	; (8000304 <get_key_Input2+0x98>)
 8000290:	601a      	str	r2, [r3, #0]
	if(keyReg0_MODIFY == keyReg1_MODIFY && keyReg1_MODIFY == keyReg2_MODIFY){
 8000292:	4b1b      	ldr	r3, [pc, #108]	; (8000300 <get_key_Input2+0x94>)
 8000294:	681a      	ldr	r2, [r3, #0]
 8000296:	4b19      	ldr	r3, [pc, #100]	; (80002fc <get_key_Input2+0x90>)
 8000298:	681b      	ldr	r3, [r3, #0]
 800029a:	429a      	cmp	r2, r3
 800029c:	d12b      	bne.n	80002f6 <get_key_Input2+0x8a>
 800029e:	4b17      	ldr	r3, [pc, #92]	; (80002fc <get_key_Input2+0x90>)
 80002a0:	681a      	ldr	r2, [r3, #0]
 80002a2:	4b18      	ldr	r3, [pc, #96]	; (8000304 <get_key_Input2+0x98>)
 80002a4:	681b      	ldr	r3, [r3, #0]
 80002a6:	429a      	cmp	r2, r3
 80002a8:	d125      	bne.n	80002f6 <get_key_Input2+0x8a>
		if(keyReg3_MODIFY != keyReg2_MODIFY){
 80002aa:	4b18      	ldr	r3, [pc, #96]	; (800030c <get_key_Input2+0xa0>)
 80002ac:	681a      	ldr	r2, [r3, #0]
 80002ae:	4b15      	ldr	r3, [pc, #84]	; (8000304 <get_key_Input2+0x98>)
 80002b0:	681b      	ldr	r3, [r3, #0]
 80002b2:	429a      	cmp	r2, r3
 80002b4:	d00d      	beq.n	80002d2 <get_key_Input2+0x66>
			keyReg3_MODIFY = keyReg2_MODIFY;
 80002b6:	4b13      	ldr	r3, [pc, #76]	; (8000304 <get_key_Input2+0x98>)
 80002b8:	681b      	ldr	r3, [r3, #0]
 80002ba:	4a14      	ldr	r2, [pc, #80]	; (800030c <get_key_Input2+0xa0>)
 80002bc:	6013      	str	r3, [r2, #0]
			if(keyReg2_MODIFY == PRESSED_STATE){					//Nhaans tha?
 80002be:	4b11      	ldr	r3, [pc, #68]	; (8000304 <get_key_Input2+0x98>)
 80002c0:	681b      	ldr	r3, [r3, #0]
 80002c2:	2b00      	cmp	r3, #0
 80002c4:	d117      	bne.n	80002f6 <get_key_Input2+0x8a>
				//TOdo for press 1 time
				sub_for_Process2();
 80002c6:	f7ff ffb3 	bl	8000230 <sub_for_Process2>
				Timer_for_key_Press2 = 200;
 80002ca:	4b11      	ldr	r3, [pc, #68]	; (8000310 <get_key_Input2+0xa4>)
 80002cc:	22c8      	movs	r2, #200	; 0xc8
 80002ce:	601a      	str	r2, [r3, #0]
				}
				Timer_for_key_Press2 = 200;
			}
			}
		}
	}
 80002d0:	e011      	b.n	80002f6 <get_key_Input2+0x8a>
			Timer_for_key_Press2--;
 80002d2:	4b0f      	ldr	r3, [pc, #60]	; (8000310 <get_key_Input2+0xa4>)
 80002d4:	681b      	ldr	r3, [r3, #0]
 80002d6:	3b01      	subs	r3, #1
 80002d8:	4a0d      	ldr	r2, [pc, #52]	; (8000310 <get_key_Input2+0xa4>)
 80002da:	6013      	str	r3, [r2, #0]
			if(Timer_for_key_Press2 == 0){
 80002dc:	4b0c      	ldr	r3, [pc, #48]	; (8000310 <get_key_Input2+0xa4>)
 80002de:	681b      	ldr	r3, [r3, #0]
 80002e0:	2b00      	cmp	r3, #0
 80002e2:	d108      	bne.n	80002f6 <get_key_Input2+0x8a>
				if(keyReg2_MODIFY == PRESSED_STATE){
 80002e4:	4b07      	ldr	r3, [pc, #28]	; (8000304 <get_key_Input2+0x98>)
 80002e6:	681b      	ldr	r3, [r3, #0]
 80002e8:	2b00      	cmp	r3, #0
 80002ea:	d101      	bne.n	80002f0 <get_key_Input2+0x84>
					sub_for_Process2();
 80002ec:	f7ff ffa0 	bl	8000230 <sub_for_Process2>
				Timer_for_key_Press2 = 200;
 80002f0:	4b07      	ldr	r3, [pc, #28]	; (8000310 <get_key_Input2+0xa4>)
 80002f2:	22c8      	movs	r2, #200	; 0xc8
 80002f4:	601a      	str	r2, [r3, #0]
	}
 80002f6:	bf00      	nop
 80002f8:	bd80      	pop	{r7, pc}
 80002fa:	bf00      	nop
 80002fc:	20000018 	.word	0x20000018
 8000300:	20000014 	.word	0x20000014
 8000304:	2000001c 	.word	0x2000001c
 8000308:	40010c00 	.word	0x40010c00
 800030c:	20000020 	.word	0x20000020
 8000310:	20000024 	.word	0x20000024

08000314 <sub_for_Process3>:


int Timer_for_key_Press3 = 200 ;				//set Timer for nhaans def


void sub_for_Process3(){
 8000314:	b480      	push	{r7}
 8000316:	af00      	add	r7, sp, #0
	SET_FLAG = 1;
 8000318:	4b03      	ldr	r3, [pc, #12]	; (8000328 <sub_for_Process3+0x14>)
 800031a:	2201      	movs	r2, #1
 800031c:	601a      	str	r2, [r3, #0]
}
 800031e:	bf00      	nop
 8000320:	46bd      	mov	sp, r7
 8000322:	bc80      	pop	{r7}
 8000324:	4770      	bx	lr
 8000326:	bf00      	nop
 8000328:	20000080 	.word	0x20000080

0800032c <is_SET_PRESSED>:
int is_SET_PRESSED(){
 800032c:	b480      	push	{r7}
 800032e:	af00      	add	r7, sp, #0
	if(SET_FLAG == 1){
 8000330:	4b06      	ldr	r3, [pc, #24]	; (800034c <is_SET_PRESSED+0x20>)
 8000332:	681b      	ldr	r3, [r3, #0]
 8000334:	2b01      	cmp	r3, #1
 8000336:	d104      	bne.n	8000342 <is_SET_PRESSED+0x16>
		SET_FLAG = 0;
 8000338:	4b04      	ldr	r3, [pc, #16]	; (800034c <is_SET_PRESSED+0x20>)
 800033a:	2200      	movs	r2, #0
 800033c:	601a      	str	r2, [r3, #0]
		return 1;
 800033e:	2301      	movs	r3, #1
 8000340:	e000      	b.n	8000344 <is_SET_PRESSED+0x18>
	}
	return 0;
 8000342:	2300      	movs	r3, #0
}
 8000344:	4618      	mov	r0, r3
 8000346:	46bd      	mov	sp, r7
 8000348:	bc80      	pop	{r7}
 800034a:	4770      	bx	lr
 800034c:	20000080 	.word	0x20000080

08000350 <get_key_Input3>:

void get_key_Input3(){
 8000350:	b580      	push	{r7, lr}
 8000352:	af00      	add	r7, sp, #0
	keyReg0_SET = keyReg1_SET;
 8000354:	4b22      	ldr	r3, [pc, #136]	; (80003e0 <get_key_Input3+0x90>)
 8000356:	681b      	ldr	r3, [r3, #0]
 8000358:	4a22      	ldr	r2, [pc, #136]	; (80003e4 <get_key_Input3+0x94>)
 800035a:	6013      	str	r3, [r2, #0]
	keyReg1_SET = keyReg2_SET;
 800035c:	4b22      	ldr	r3, [pc, #136]	; (80003e8 <get_key_Input3+0x98>)
 800035e:	681b      	ldr	r3, [r3, #0]
 8000360:	4a1f      	ldr	r2, [pc, #124]	; (80003e0 <get_key_Input3+0x90>)
 8000362:	6013      	str	r3, [r2, #0]
	keyReg2_SET = HAL_GPIO_ReadPin(SET_GPIO_Port, SET_Pin);
 8000364:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000368:	4820      	ldr	r0, [pc, #128]	; (80003ec <get_key_Input3+0x9c>)
 800036a:	f001 fc17 	bl	8001b9c <HAL_GPIO_ReadPin>
 800036e:	4603      	mov	r3, r0
 8000370:	461a      	mov	r2, r3
 8000372:	4b1d      	ldr	r3, [pc, #116]	; (80003e8 <get_key_Input3+0x98>)
 8000374:	601a      	str	r2, [r3, #0]
	if(keyReg0_SET == keyReg1_SET && keyReg1_SET == keyReg2_SET){
 8000376:	4b1b      	ldr	r3, [pc, #108]	; (80003e4 <get_key_Input3+0x94>)
 8000378:	681a      	ldr	r2, [r3, #0]
 800037a:	4b19      	ldr	r3, [pc, #100]	; (80003e0 <get_key_Input3+0x90>)
 800037c:	681b      	ldr	r3, [r3, #0]
 800037e:	429a      	cmp	r2, r3
 8000380:	d12b      	bne.n	80003da <get_key_Input3+0x8a>
 8000382:	4b17      	ldr	r3, [pc, #92]	; (80003e0 <get_key_Input3+0x90>)
 8000384:	681a      	ldr	r2, [r3, #0]
 8000386:	4b18      	ldr	r3, [pc, #96]	; (80003e8 <get_key_Input3+0x98>)
 8000388:	681b      	ldr	r3, [r3, #0]
 800038a:	429a      	cmp	r2, r3
 800038c:	d125      	bne.n	80003da <get_key_Input3+0x8a>
		if(keyReg3_SET != keyReg2_SET){
 800038e:	4b18      	ldr	r3, [pc, #96]	; (80003f0 <get_key_Input3+0xa0>)
 8000390:	681a      	ldr	r2, [r3, #0]
 8000392:	4b15      	ldr	r3, [pc, #84]	; (80003e8 <get_key_Input3+0x98>)
 8000394:	681b      	ldr	r3, [r3, #0]
 8000396:	429a      	cmp	r2, r3
 8000398:	d00d      	beq.n	80003b6 <get_key_Input3+0x66>
			keyReg3_SET = keyReg2_SET;
 800039a:	4b13      	ldr	r3, [pc, #76]	; (80003e8 <get_key_Input3+0x98>)
 800039c:	681b      	ldr	r3, [r3, #0]
 800039e:	4a14      	ldr	r2, [pc, #80]	; (80003f0 <get_key_Input3+0xa0>)
 80003a0:	6013      	str	r3, [r2, #0]
			if(keyReg2_SET == PRESSED_STATE){					//Nhaans tha?
 80003a2:	4b11      	ldr	r3, [pc, #68]	; (80003e8 <get_key_Input3+0x98>)
 80003a4:	681b      	ldr	r3, [r3, #0]
 80003a6:	2b00      	cmp	r3, #0
 80003a8:	d117      	bne.n	80003da <get_key_Input3+0x8a>
				//TOdo for press 1 time
				sub_for_Process3();
 80003aa:	f7ff ffb3 	bl	8000314 <sub_for_Process3>
				Timer_for_key_Press3 = 200;
 80003ae:	4b11      	ldr	r3, [pc, #68]	; (80003f4 <get_key_Input3+0xa4>)
 80003b0:	22c8      	movs	r2, #200	; 0xc8
 80003b2:	601a      	str	r2, [r3, #0]
				}
				Timer_for_key_Press3 = 200;
			}
			}
		}
	}
 80003b4:	e011      	b.n	80003da <get_key_Input3+0x8a>
			Timer_for_key_Press3--;
 80003b6:	4b0f      	ldr	r3, [pc, #60]	; (80003f4 <get_key_Input3+0xa4>)
 80003b8:	681b      	ldr	r3, [r3, #0]
 80003ba:	3b01      	subs	r3, #1
 80003bc:	4a0d      	ldr	r2, [pc, #52]	; (80003f4 <get_key_Input3+0xa4>)
 80003be:	6013      	str	r3, [r2, #0]
			if(Timer_for_key_Press3 == 0){
 80003c0:	4b0c      	ldr	r3, [pc, #48]	; (80003f4 <get_key_Input3+0xa4>)
 80003c2:	681b      	ldr	r3, [r3, #0]
 80003c4:	2b00      	cmp	r3, #0
 80003c6:	d108      	bne.n	80003da <get_key_Input3+0x8a>
				if(keyReg2_SET == PRESSED_STATE){
 80003c8:	4b07      	ldr	r3, [pc, #28]	; (80003e8 <get_key_Input3+0x98>)
 80003ca:	681b      	ldr	r3, [r3, #0]
 80003cc:	2b00      	cmp	r3, #0
 80003ce:	d101      	bne.n	80003d4 <get_key_Input3+0x84>
					sub_for_Process3();
 80003d0:	f7ff ffa0 	bl	8000314 <sub_for_Process3>
				Timer_for_key_Press3 = 200;
 80003d4:	4b07      	ldr	r3, [pc, #28]	; (80003f4 <get_key_Input3+0xa4>)
 80003d6:	22c8      	movs	r2, #200	; 0xc8
 80003d8:	601a      	str	r2, [r3, #0]
	}
 80003da:	bf00      	nop
 80003dc:	bd80      	pop	{r7, pc}
 80003de:	bf00      	nop
 80003e0:	2000002c 	.word	0x2000002c
 80003e4:	20000028 	.word	0x20000028
 80003e8:	20000030 	.word	0x20000030
 80003ec:	40010c00 	.word	0x40010c00
 80003f0:	20000034 	.word	0x20000034
 80003f4:	20000038 	.word	0x20000038

080003f8 <blink_RED>:
#include "software_timer.h"
#include "seg7_display.h"
#include "fsm_machine.h"


void blink_RED(){
 80003f8:	b580      	push	{r7, lr}
 80003fa:	af00      	add	r7, sp, #0
	if(RED_BLINK_flag == 1){
 80003fc:	4b08      	ldr	r3, [pc, #32]	; (8000420 <blink_RED+0x28>)
 80003fe:	681b      	ldr	r3, [r3, #0]
 8000400:	2b01      	cmp	r3, #1
 8000402:	d10b      	bne.n	800041c <blink_RED+0x24>
		setTimer_for_RED_blink(25);
 8000404:	2019      	movs	r0, #25
 8000406:	f000 ff6b 	bl	80012e0 <setTimer_for_RED_blink>
		HAL_GPIO_TogglePin(RED1_GPIO_Port, RED1_Pin);
 800040a:	2102      	movs	r1, #2
 800040c:	4805      	ldr	r0, [pc, #20]	; (8000424 <blink_RED+0x2c>)
 800040e:	f001 fbf4 	bl	8001bfa <HAL_GPIO_TogglePin>
		HAL_GPIO_TogglePin(RED2_GPIO_Port, RED2_Pin);
 8000412:	2104      	movs	r1, #4
 8000414:	4803      	ldr	r0, [pc, #12]	; (8000424 <blink_RED+0x2c>)
 8000416:	f001 fbf0 	bl	8001bfa <HAL_GPIO_TogglePin>
	}
	return;
 800041a:	bf00      	nop
 800041c:	bf00      	nop
}
 800041e:	bd80      	pop	{r7, pc}
 8000420:	20000150 	.word	0x20000150
 8000424:	40010800 	.word	0x40010800

08000428 <blink_YELLOW>:
void blink_YELLOW(){
 8000428:	b580      	push	{r7, lr}
 800042a:	af00      	add	r7, sp, #0
	if(YELLOW_BLINK_flag == 1){
 800042c:	4b08      	ldr	r3, [pc, #32]	; (8000450 <blink_YELLOW+0x28>)
 800042e:	681b      	ldr	r3, [r3, #0]
 8000430:	2b01      	cmp	r3, #1
 8000432:	d10b      	bne.n	800044c <blink_YELLOW+0x24>
		setTimer_for_YELLOW_blink(25);
 8000434:	2019      	movs	r0, #25
 8000436:	f000 ff7b 	bl	8001330 <setTimer_for_YELLOW_blink>
		HAL_GPIO_TogglePin(PURPLE1_GPIO_Port, PURPLE1_Pin);
 800043a:	2120      	movs	r1, #32
 800043c:	4805      	ldr	r0, [pc, #20]	; (8000454 <blink_YELLOW+0x2c>)
 800043e:	f001 fbdc 	bl	8001bfa <HAL_GPIO_TogglePin>
		HAL_GPIO_TogglePin(PURPLE2_GPIO_Port, PURPLE2_Pin);
 8000442:	2140      	movs	r1, #64	; 0x40
 8000444:	4803      	ldr	r0, [pc, #12]	; (8000454 <blink_YELLOW+0x2c>)
 8000446:	f001 fbd8 	bl	8001bfa <HAL_GPIO_TogglePin>
	}
	return;
 800044a:	bf00      	nop
 800044c:	bf00      	nop
}
 800044e:	bd80      	pop	{r7, pc}
 8000450:	20000160 	.word	0x20000160
 8000454:	40010800 	.word	0x40010800

08000458 <blink_GREEN>:
void blink_GREEN(){
 8000458:	b580      	push	{r7, lr}
 800045a:	af00      	add	r7, sp, #0
	if(GREEN_BLINK_flag == 1){
 800045c:	4b09      	ldr	r3, [pc, #36]	; (8000484 <blink_GREEN+0x2c>)
 800045e:	681b      	ldr	r3, [r3, #0]
 8000460:	2b01      	cmp	r3, #1
 8000462:	d10d      	bne.n	8000480 <blink_GREEN+0x28>
		setTimer_for_GREEN_blink(25);
 8000464:	2019      	movs	r0, #25
 8000466:	f000 ff4f 	bl	8001308 <setTimer_for_GREEN_blink>
		HAL_GPIO_TogglePin(GREEN1_GPIO_Port, GREEN1_Pin);
 800046a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800046e:	4806      	ldr	r0, [pc, #24]	; (8000488 <blink_GREEN+0x30>)
 8000470:	f001 fbc3 	bl	8001bfa <HAL_GPIO_TogglePin>
		HAL_GPIO_TogglePin(GREEN2_GPIO_Port, GREEN2_Pin);
 8000474:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000478:	4803      	ldr	r0, [pc, #12]	; (8000488 <blink_GREEN+0x30>)
 800047a:	f001 fbbe 	bl	8001bfa <HAL_GPIO_TogglePin>
	}
	return;
 800047e:	bf00      	nop
 8000480:	bf00      	nop
}
 8000482:	bd80      	pop	{r7, pc}
 8000484:	20000158 	.word	0x20000158
 8000488:	40010800 	.word	0x40010800

0800048c <updateClockBuffer>:


void updateClockBuffer(void){
 800048c:	b480      	push	{r7}
 800048e:	af00      	add	r7, sp, #0
	seg_index1 = time_for_Traffic1/10;
 8000490:	4b1a      	ldr	r3, [pc, #104]	; (80004fc <updateClockBuffer+0x70>)
 8000492:	681b      	ldr	r3, [r3, #0]
 8000494:	4a1a      	ldr	r2, [pc, #104]	; (8000500 <updateClockBuffer+0x74>)
 8000496:	fb82 1203 	smull	r1, r2, r2, r3
 800049a:	1092      	asrs	r2, r2, #2
 800049c:	17db      	asrs	r3, r3, #31
 800049e:	1ad3      	subs	r3, r2, r3
 80004a0:	4a18      	ldr	r2, [pc, #96]	; (8000504 <updateClockBuffer+0x78>)
 80004a2:	6013      	str	r3, [r2, #0]
	seg_index3 = time_for_Traffic2/10;
 80004a4:	4b18      	ldr	r3, [pc, #96]	; (8000508 <updateClockBuffer+0x7c>)
 80004a6:	681b      	ldr	r3, [r3, #0]
 80004a8:	4a15      	ldr	r2, [pc, #84]	; (8000500 <updateClockBuffer+0x74>)
 80004aa:	fb82 1203 	smull	r1, r2, r2, r3
 80004ae:	1092      	asrs	r2, r2, #2
 80004b0:	17db      	asrs	r3, r3, #31
 80004b2:	1ad3      	subs	r3, r2, r3
 80004b4:	4a15      	ldr	r2, [pc, #84]	; (800050c <updateClockBuffer+0x80>)
 80004b6:	6013      	str	r3, [r2, #0]
	seg_index2 = time_for_Traffic1%10;
 80004b8:	4b10      	ldr	r3, [pc, #64]	; (80004fc <updateClockBuffer+0x70>)
 80004ba:	6819      	ldr	r1, [r3, #0]
 80004bc:	4b10      	ldr	r3, [pc, #64]	; (8000500 <updateClockBuffer+0x74>)
 80004be:	fb83 2301 	smull	r2, r3, r3, r1
 80004c2:	109a      	asrs	r2, r3, #2
 80004c4:	17cb      	asrs	r3, r1, #31
 80004c6:	1ad2      	subs	r2, r2, r3
 80004c8:	4613      	mov	r3, r2
 80004ca:	009b      	lsls	r3, r3, #2
 80004cc:	4413      	add	r3, r2
 80004ce:	005b      	lsls	r3, r3, #1
 80004d0:	1aca      	subs	r2, r1, r3
 80004d2:	4b0f      	ldr	r3, [pc, #60]	; (8000510 <updateClockBuffer+0x84>)
 80004d4:	601a      	str	r2, [r3, #0]
	seg_index4 = time_for_Traffic2%10;
 80004d6:	4b0c      	ldr	r3, [pc, #48]	; (8000508 <updateClockBuffer+0x7c>)
 80004d8:	6819      	ldr	r1, [r3, #0]
 80004da:	4b09      	ldr	r3, [pc, #36]	; (8000500 <updateClockBuffer+0x74>)
 80004dc:	fb83 2301 	smull	r2, r3, r3, r1
 80004e0:	109a      	asrs	r2, r3, #2
 80004e2:	17cb      	asrs	r3, r1, #31
 80004e4:	1ad2      	subs	r2, r2, r3
 80004e6:	4613      	mov	r3, r2
 80004e8:	009b      	lsls	r3, r3, #2
 80004ea:	4413      	add	r3, r2
 80004ec:	005b      	lsls	r3, r3, #1
 80004ee:	1aca      	subs	r2, r1, r3
 80004f0:	4b08      	ldr	r3, [pc, #32]	; (8000514 <updateClockBuffer+0x88>)
 80004f2:	601a      	str	r2, [r3, #0]
	return;
 80004f4:	bf00      	nop
}
 80004f6:	46bd      	mov	sp, r7
 80004f8:	bc80      	pop	{r7}
 80004fa:	4770      	bx	lr
 80004fc:	20000084 	.word	0x20000084
 8000500:	66666667 	.word	0x66666667
 8000504:	20000120 	.word	0x20000120
 8000508:	20000088 	.word	0x20000088
 800050c:	20000128 	.word	0x20000128
 8000510:	20000124 	.word	0x20000124
 8000514:	2000012c 	.word	0x2000012c

08000518 <TRAFFIC_NORMAL1>:
//int seg_index1 = 5;
//int seg_index2 = 3;
//int seg = 0;


void TRAFFIC_NORMAL1(){
 8000518:	b580      	push	{r7, lr}
 800051a:	af00      	add	r7, sp, #0
	switch(status_traffic1){
 800051c:	4b49      	ldr	r3, [pc, #292]	; (8000644 <TRAFFIC_NORMAL1+0x12c>)
 800051e:	681b      	ldr	r3, [r3, #0]
 8000520:	2b03      	cmp	r3, #3
 8000522:	d05b      	beq.n	80005dc <TRAFFIC_NORMAL1+0xc4>
 8000524:	2b03      	cmp	r3, #3
 8000526:	f300 8083 	bgt.w	8000630 <TRAFFIC_NORMAL1+0x118>
 800052a:	2b01      	cmp	r3, #1
 800052c:	d002      	beq.n	8000534 <TRAFFIC_NORMAL1+0x1c>
 800052e:	2b02      	cmp	r3, #2
 8000530:	d02a      	beq.n	8000588 <TRAFFIC_NORMAL1+0x70>
					time_for_Traffic1 = seg_buffer1[0];
				}
		}
		break;
	default:
		break;
 8000532:	e07d      	b.n	8000630 <TRAFFIC_NORMAL1+0x118>
		updateClockBuffer();
 8000534:	f7ff ffaa 	bl	800048c <updateClockBuffer>
		HAL_GPIO_WritePin(RED1_GPIO_Port, RED1_Pin, RESET);
 8000538:	2200      	movs	r2, #0
 800053a:	2102      	movs	r1, #2
 800053c:	4842      	ldr	r0, [pc, #264]	; (8000648 <TRAFFIC_NORMAL1+0x130>)
 800053e:	f001 fb44 	bl	8001bca <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GREEN1_GPIO_Port, GREEN1_Pin, SET);
 8000542:	2201      	movs	r2, #1
 8000544:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000548:	483f      	ldr	r0, [pc, #252]	; (8000648 <TRAFFIC_NORMAL1+0x130>)
 800054a:	f001 fb3e 	bl	8001bca <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(PURPLE1_GPIO_Port, PURPLE1_Pin, SET);
 800054e:	2201      	movs	r2, #1
 8000550:	2120      	movs	r1, #32
 8000552:	483d      	ldr	r0, [pc, #244]	; (8000648 <TRAFFIC_NORMAL1+0x130>)
 8000554:	f001 fb39 	bl	8001bca <HAL_GPIO_WritePin>
		if(timer_flag1 == 1){
 8000558:	4b3c      	ldr	r3, [pc, #240]	; (800064c <TRAFFIC_NORMAL1+0x134>)
 800055a:	681b      	ldr	r3, [r3, #0]
 800055c:	2b01      	cmp	r3, #1
 800055e:	d169      	bne.n	8000634 <TRAFFIC_NORMAL1+0x11c>
			setTimer1(100);      //red
 8000560:	2064      	movs	r0, #100	; 0x64
 8000562:	f000 fe81 	bl	8001268 <setTimer1>
			time_for_Traffic1--;
 8000566:	4b3a      	ldr	r3, [pc, #232]	; (8000650 <TRAFFIC_NORMAL1+0x138>)
 8000568:	681b      	ldr	r3, [r3, #0]
 800056a:	3b01      	subs	r3, #1
 800056c:	4a38      	ldr	r2, [pc, #224]	; (8000650 <TRAFFIC_NORMAL1+0x138>)
 800056e:	6013      	str	r3, [r2, #0]
			if(time_for_Traffic1 == 0){
 8000570:	4b37      	ldr	r3, [pc, #220]	; (8000650 <TRAFFIC_NORMAL1+0x138>)
 8000572:	681b      	ldr	r3, [r3, #0]
 8000574:	2b00      	cmp	r3, #0
 8000576:	d15d      	bne.n	8000634 <TRAFFIC_NORMAL1+0x11c>
				status_traffic1 = 2;
 8000578:	4b32      	ldr	r3, [pc, #200]	; (8000644 <TRAFFIC_NORMAL1+0x12c>)
 800057a:	2202      	movs	r2, #2
 800057c:	601a      	str	r2, [r3, #0]
				time_for_Traffic1 = seg_buffer1[1];
 800057e:	4b35      	ldr	r3, [pc, #212]	; (8000654 <TRAFFIC_NORMAL1+0x13c>)
 8000580:	685b      	ldr	r3, [r3, #4]
 8000582:	4a33      	ldr	r2, [pc, #204]	; (8000650 <TRAFFIC_NORMAL1+0x138>)
 8000584:	6013      	str	r3, [r2, #0]
		break;
 8000586:	e055      	b.n	8000634 <TRAFFIC_NORMAL1+0x11c>
		updateClockBuffer();
 8000588:	f7ff ff80 	bl	800048c <updateClockBuffer>
		HAL_GPIO_WritePin(RED1_GPIO_Port, RED1_Pin, SET);
 800058c:	2201      	movs	r2, #1
 800058e:	2102      	movs	r1, #2
 8000590:	482d      	ldr	r0, [pc, #180]	; (8000648 <TRAFFIC_NORMAL1+0x130>)
 8000592:	f001 fb1a 	bl	8001bca <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GREEN1_GPIO_Port, GREEN1_Pin, RESET);
 8000596:	2200      	movs	r2, #0
 8000598:	f44f 7100 	mov.w	r1, #512	; 0x200
 800059c:	482a      	ldr	r0, [pc, #168]	; (8000648 <TRAFFIC_NORMAL1+0x130>)
 800059e:	f001 fb14 	bl	8001bca <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(PURPLE1_GPIO_Port, PURPLE1_Pin, SET);
 80005a2:	2201      	movs	r2, #1
 80005a4:	2120      	movs	r1, #32
 80005a6:	4828      	ldr	r0, [pc, #160]	; (8000648 <TRAFFIC_NORMAL1+0x130>)
 80005a8:	f001 fb0f 	bl	8001bca <HAL_GPIO_WritePin>
		if(timer_flag1 == 1){
 80005ac:	4b27      	ldr	r3, [pc, #156]	; (800064c <TRAFFIC_NORMAL1+0x134>)
 80005ae:	681b      	ldr	r3, [r3, #0]
 80005b0:	2b01      	cmp	r3, #1
 80005b2:	d141      	bne.n	8000638 <TRAFFIC_NORMAL1+0x120>
			setTimer1(100);      //green
 80005b4:	2064      	movs	r0, #100	; 0x64
 80005b6:	f000 fe57 	bl	8001268 <setTimer1>
			time_for_Traffic1--;
 80005ba:	4b25      	ldr	r3, [pc, #148]	; (8000650 <TRAFFIC_NORMAL1+0x138>)
 80005bc:	681b      	ldr	r3, [r3, #0]
 80005be:	3b01      	subs	r3, #1
 80005c0:	4a23      	ldr	r2, [pc, #140]	; (8000650 <TRAFFIC_NORMAL1+0x138>)
 80005c2:	6013      	str	r3, [r2, #0]
			if(time_for_Traffic1 == 0){
 80005c4:	4b22      	ldr	r3, [pc, #136]	; (8000650 <TRAFFIC_NORMAL1+0x138>)
 80005c6:	681b      	ldr	r3, [r3, #0]
 80005c8:	2b00      	cmp	r3, #0
 80005ca:	d135      	bne.n	8000638 <TRAFFIC_NORMAL1+0x120>
				status_traffic1 = 3;
 80005cc:	4b1d      	ldr	r3, [pc, #116]	; (8000644 <TRAFFIC_NORMAL1+0x12c>)
 80005ce:	2203      	movs	r2, #3
 80005d0:	601a      	str	r2, [r3, #0]
				time_for_Traffic1 = seg_buffer1[2];
 80005d2:	4b20      	ldr	r3, [pc, #128]	; (8000654 <TRAFFIC_NORMAL1+0x13c>)
 80005d4:	689b      	ldr	r3, [r3, #8]
 80005d6:	4a1e      	ldr	r2, [pc, #120]	; (8000650 <TRAFFIC_NORMAL1+0x138>)
 80005d8:	6013      	str	r3, [r2, #0]
		break;
 80005da:	e02d      	b.n	8000638 <TRAFFIC_NORMAL1+0x120>
		updateClockBuffer();
 80005dc:	f7ff ff56 	bl	800048c <updateClockBuffer>
		HAL_GPIO_WritePin(RED1_GPIO_Port, RED1_Pin, SET);
 80005e0:	2201      	movs	r2, #1
 80005e2:	2102      	movs	r1, #2
 80005e4:	4818      	ldr	r0, [pc, #96]	; (8000648 <TRAFFIC_NORMAL1+0x130>)
 80005e6:	f001 faf0 	bl	8001bca <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GREEN1_GPIO_Port, GREEN1_Pin, SET);
 80005ea:	2201      	movs	r2, #1
 80005ec:	f44f 7100 	mov.w	r1, #512	; 0x200
 80005f0:	4815      	ldr	r0, [pc, #84]	; (8000648 <TRAFFIC_NORMAL1+0x130>)
 80005f2:	f001 faea 	bl	8001bca <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(PURPLE1_GPIO_Port, PURPLE1_Pin, RESET);
 80005f6:	2200      	movs	r2, #0
 80005f8:	2120      	movs	r1, #32
 80005fa:	4813      	ldr	r0, [pc, #76]	; (8000648 <TRAFFIC_NORMAL1+0x130>)
 80005fc:	f001 fae5 	bl	8001bca <HAL_GPIO_WritePin>
		if(timer_flag1 == 1){
 8000600:	4b12      	ldr	r3, [pc, #72]	; (800064c <TRAFFIC_NORMAL1+0x134>)
 8000602:	681b      	ldr	r3, [r3, #0]
 8000604:	2b01      	cmp	r3, #1
 8000606:	d119      	bne.n	800063c <TRAFFIC_NORMAL1+0x124>
			setTimer1(100);      //YELLOW
 8000608:	2064      	movs	r0, #100	; 0x64
 800060a:	f000 fe2d 	bl	8001268 <setTimer1>
				time_for_Traffic1--;
 800060e:	4b10      	ldr	r3, [pc, #64]	; (8000650 <TRAFFIC_NORMAL1+0x138>)
 8000610:	681b      	ldr	r3, [r3, #0]
 8000612:	3b01      	subs	r3, #1
 8000614:	4a0e      	ldr	r2, [pc, #56]	; (8000650 <TRAFFIC_NORMAL1+0x138>)
 8000616:	6013      	str	r3, [r2, #0]
				if(time_for_Traffic1 == 0){
 8000618:	4b0d      	ldr	r3, [pc, #52]	; (8000650 <TRAFFIC_NORMAL1+0x138>)
 800061a:	681b      	ldr	r3, [r3, #0]
 800061c:	2b00      	cmp	r3, #0
 800061e:	d10d      	bne.n	800063c <TRAFFIC_NORMAL1+0x124>
					status_traffic1 = 1;
 8000620:	4b08      	ldr	r3, [pc, #32]	; (8000644 <TRAFFIC_NORMAL1+0x12c>)
 8000622:	2201      	movs	r2, #1
 8000624:	601a      	str	r2, [r3, #0]
					time_for_Traffic1 = seg_buffer1[0];
 8000626:	4b0b      	ldr	r3, [pc, #44]	; (8000654 <TRAFFIC_NORMAL1+0x13c>)
 8000628:	681b      	ldr	r3, [r3, #0]
 800062a:	4a09      	ldr	r2, [pc, #36]	; (8000650 <TRAFFIC_NORMAL1+0x138>)
 800062c:	6013      	str	r3, [r2, #0]
		break;
 800062e:	e005      	b.n	800063c <TRAFFIC_NORMAL1+0x124>
		break;
 8000630:	bf00      	nop
 8000632:	e004      	b.n	800063e <TRAFFIC_NORMAL1+0x126>
		break;
 8000634:	bf00      	nop
 8000636:	e002      	b.n	800063e <TRAFFIC_NORMAL1+0x126>
		break;
 8000638:	bf00      	nop
 800063a:	e000      	b.n	800063e <TRAFFIC_NORMAL1+0x126>
		break;
 800063c:	bf00      	nop
	}
}
 800063e:	bf00      	nop
 8000640:	bd80      	pop	{r7, pc}
 8000642:	bf00      	nop
 8000644:	2000003c 	.word	0x2000003c
 8000648:	40010800 	.word	0x40010800
 800064c:	20000140 	.word	0x20000140
 8000650:	20000084 	.word	0x20000084
 8000654:	20000044 	.word	0x20000044

08000658 <TRAFFIC_NORMAL2>:



void TRAFFIC_NORMAL2(){
 8000658:	b580      	push	{r7, lr}
 800065a:	af00      	add	r7, sp, #0
	switch(status_traffic2){
 800065c:	4b49      	ldr	r3, [pc, #292]	; (8000784 <TRAFFIC_NORMAL2+0x12c>)
 800065e:	681b      	ldr	r3, [r3, #0]
 8000660:	2b03      	cmp	r3, #3
 8000662:	d05b      	beq.n	800071c <TRAFFIC_NORMAL2+0xc4>
 8000664:	2b03      	cmp	r3, #3
 8000666:	f300 8083 	bgt.w	8000770 <TRAFFIC_NORMAL2+0x118>
 800066a:	2b01      	cmp	r3, #1
 800066c:	d002      	beq.n	8000674 <TRAFFIC_NORMAL2+0x1c>
 800066e:	2b02      	cmp	r3, #2
 8000670:	d02a      	beq.n	80006c8 <TRAFFIC_NORMAL2+0x70>
				status_traffic2 = 1;
			}
		}
		break;
	default:
		break;
 8000672:	e07d      	b.n	8000770 <TRAFFIC_NORMAL2+0x118>
		updateClockBuffer();
 8000674:	f7ff ff0a 	bl	800048c <updateClockBuffer>
		HAL_GPIO_WritePin(RED2_GPIO_Port, RED2_Pin, SET);
 8000678:	2201      	movs	r2, #1
 800067a:	2104      	movs	r1, #4
 800067c:	4842      	ldr	r0, [pc, #264]	; (8000788 <TRAFFIC_NORMAL2+0x130>)
 800067e:	f001 faa4 	bl	8001bca <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GREEN2_GPIO_Port, GREEN2_Pin, RESET);
 8000682:	2200      	movs	r2, #0
 8000684:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000688:	483f      	ldr	r0, [pc, #252]	; (8000788 <TRAFFIC_NORMAL2+0x130>)
 800068a:	f001 fa9e 	bl	8001bca <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(PURPLE2_GPIO_Port, PURPLE2_Pin, SET);
 800068e:	2201      	movs	r2, #1
 8000690:	2140      	movs	r1, #64	; 0x40
 8000692:	483d      	ldr	r0, [pc, #244]	; (8000788 <TRAFFIC_NORMAL2+0x130>)
 8000694:	f001 fa99 	bl	8001bca <HAL_GPIO_WritePin>
		if(timer_flag2 == 1){
 8000698:	4b3c      	ldr	r3, [pc, #240]	; (800078c <TRAFFIC_NORMAL2+0x134>)
 800069a:	681b      	ldr	r3, [r3, #0]
 800069c:	2b01      	cmp	r3, #1
 800069e:	d169      	bne.n	8000774 <TRAFFIC_NORMAL2+0x11c>
			setTimer2(100);      //green
 80006a0:	2064      	movs	r0, #100	; 0x64
 80006a2:	f000 fdf5 	bl	8001290 <setTimer2>
			time_for_Traffic2--;
 80006a6:	4b3a      	ldr	r3, [pc, #232]	; (8000790 <TRAFFIC_NORMAL2+0x138>)
 80006a8:	681b      	ldr	r3, [r3, #0]
 80006aa:	3b01      	subs	r3, #1
 80006ac:	4a38      	ldr	r2, [pc, #224]	; (8000790 <TRAFFIC_NORMAL2+0x138>)
 80006ae:	6013      	str	r3, [r2, #0]
			if(time_for_Traffic2 == 0){
 80006b0:	4b37      	ldr	r3, [pc, #220]	; (8000790 <TRAFFIC_NORMAL2+0x138>)
 80006b2:	681b      	ldr	r3, [r3, #0]
 80006b4:	2b00      	cmp	r3, #0
 80006b6:	d15d      	bne.n	8000774 <TRAFFIC_NORMAL2+0x11c>
					status_traffic2 = 2;
 80006b8:	4b32      	ldr	r3, [pc, #200]	; (8000784 <TRAFFIC_NORMAL2+0x12c>)
 80006ba:	2202      	movs	r2, #2
 80006bc:	601a      	str	r2, [r3, #0]
					time_for_Traffic2 = seg_buffer1[2];
 80006be:	4b35      	ldr	r3, [pc, #212]	; (8000794 <TRAFFIC_NORMAL2+0x13c>)
 80006c0:	689b      	ldr	r3, [r3, #8]
 80006c2:	4a33      	ldr	r2, [pc, #204]	; (8000790 <TRAFFIC_NORMAL2+0x138>)
 80006c4:	6013      	str	r3, [r2, #0]
		break;
 80006c6:	e055      	b.n	8000774 <TRAFFIC_NORMAL2+0x11c>
		updateClockBuffer();
 80006c8:	f7ff fee0 	bl	800048c <updateClockBuffer>
		HAL_GPIO_WritePin(RED2_GPIO_Port, RED2_Pin, SET);
 80006cc:	2201      	movs	r2, #1
 80006ce:	2104      	movs	r1, #4
 80006d0:	482d      	ldr	r0, [pc, #180]	; (8000788 <TRAFFIC_NORMAL2+0x130>)
 80006d2:	f001 fa7a 	bl	8001bca <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GREEN2_GPIO_Port, GREEN2_Pin, SET);
 80006d6:	2201      	movs	r2, #1
 80006d8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80006dc:	482a      	ldr	r0, [pc, #168]	; (8000788 <TRAFFIC_NORMAL2+0x130>)
 80006de:	f001 fa74 	bl	8001bca <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(PURPLE2_GPIO_Port, PURPLE2_Pin, RESET);
 80006e2:	2200      	movs	r2, #0
 80006e4:	2140      	movs	r1, #64	; 0x40
 80006e6:	4828      	ldr	r0, [pc, #160]	; (8000788 <TRAFFIC_NORMAL2+0x130>)
 80006e8:	f001 fa6f 	bl	8001bca <HAL_GPIO_WritePin>
		if(timer_flag2 == 1){
 80006ec:	4b27      	ldr	r3, [pc, #156]	; (800078c <TRAFFIC_NORMAL2+0x134>)
 80006ee:	681b      	ldr	r3, [r3, #0]
 80006f0:	2b01      	cmp	r3, #1
 80006f2:	d141      	bne.n	8000778 <TRAFFIC_NORMAL2+0x120>
			setTimer2(100);
 80006f4:	2064      	movs	r0, #100	; 0x64
 80006f6:	f000 fdcb 	bl	8001290 <setTimer2>
			time_for_Traffic2--;
 80006fa:	4b25      	ldr	r3, [pc, #148]	; (8000790 <TRAFFIC_NORMAL2+0x138>)
 80006fc:	681b      	ldr	r3, [r3, #0]
 80006fe:	3b01      	subs	r3, #1
 8000700:	4a23      	ldr	r2, [pc, #140]	; (8000790 <TRAFFIC_NORMAL2+0x138>)
 8000702:	6013      	str	r3, [r2, #0]
			if(time_for_Traffic2 == 0){
 8000704:	4b22      	ldr	r3, [pc, #136]	; (8000790 <TRAFFIC_NORMAL2+0x138>)
 8000706:	681b      	ldr	r3, [r3, #0]
 8000708:	2b00      	cmp	r3, #0
 800070a:	d135      	bne.n	8000778 <TRAFFIC_NORMAL2+0x120>
				time_for_Traffic2 = seg_buffer1[0];
 800070c:	4b21      	ldr	r3, [pc, #132]	; (8000794 <TRAFFIC_NORMAL2+0x13c>)
 800070e:	681b      	ldr	r3, [r3, #0]
 8000710:	4a1f      	ldr	r2, [pc, #124]	; (8000790 <TRAFFIC_NORMAL2+0x138>)
 8000712:	6013      	str	r3, [r2, #0]
				status_traffic2 = 3;
 8000714:	4b1b      	ldr	r3, [pc, #108]	; (8000784 <TRAFFIC_NORMAL2+0x12c>)
 8000716:	2203      	movs	r2, #3
 8000718:	601a      	str	r2, [r3, #0]
		break;
 800071a:	e02d      	b.n	8000778 <TRAFFIC_NORMAL2+0x120>
		updateClockBuffer();
 800071c:	f7ff feb6 	bl	800048c <updateClockBuffer>
		HAL_GPIO_WritePin(RED2_GPIO_Port, RED2_Pin, RESET);
 8000720:	2200      	movs	r2, #0
 8000722:	2104      	movs	r1, #4
 8000724:	4818      	ldr	r0, [pc, #96]	; (8000788 <TRAFFIC_NORMAL2+0x130>)
 8000726:	f001 fa50 	bl	8001bca <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GREEN2_GPIO_Port, GREEN2_Pin, SET);
 800072a:	2201      	movs	r2, #1
 800072c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000730:	4815      	ldr	r0, [pc, #84]	; (8000788 <TRAFFIC_NORMAL2+0x130>)
 8000732:	f001 fa4a 	bl	8001bca <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(PURPLE2_GPIO_Port, PURPLE2_Pin, SET);
 8000736:	2201      	movs	r2, #1
 8000738:	2140      	movs	r1, #64	; 0x40
 800073a:	4813      	ldr	r0, [pc, #76]	; (8000788 <TRAFFIC_NORMAL2+0x130>)
 800073c:	f001 fa45 	bl	8001bca <HAL_GPIO_WritePin>
		if(timer_flag2 == 1){
 8000740:	4b12      	ldr	r3, [pc, #72]	; (800078c <TRAFFIC_NORMAL2+0x134>)
 8000742:	681b      	ldr	r3, [r3, #0]
 8000744:	2b01      	cmp	r3, #1
 8000746:	d119      	bne.n	800077c <TRAFFIC_NORMAL2+0x124>
			setTimer2(100);
 8000748:	2064      	movs	r0, #100	; 0x64
 800074a:	f000 fda1 	bl	8001290 <setTimer2>
			time_for_Traffic2--;
 800074e:	4b10      	ldr	r3, [pc, #64]	; (8000790 <TRAFFIC_NORMAL2+0x138>)
 8000750:	681b      	ldr	r3, [r3, #0]
 8000752:	3b01      	subs	r3, #1
 8000754:	4a0e      	ldr	r2, [pc, #56]	; (8000790 <TRAFFIC_NORMAL2+0x138>)
 8000756:	6013      	str	r3, [r2, #0]
			if(time_for_Traffic2 == 0){
 8000758:	4b0d      	ldr	r3, [pc, #52]	; (8000790 <TRAFFIC_NORMAL2+0x138>)
 800075a:	681b      	ldr	r3, [r3, #0]
 800075c:	2b00      	cmp	r3, #0
 800075e:	d10d      	bne.n	800077c <TRAFFIC_NORMAL2+0x124>
				time_for_Traffic2 = seg_buffer1[1];
 8000760:	4b0c      	ldr	r3, [pc, #48]	; (8000794 <TRAFFIC_NORMAL2+0x13c>)
 8000762:	685b      	ldr	r3, [r3, #4]
 8000764:	4a0a      	ldr	r2, [pc, #40]	; (8000790 <TRAFFIC_NORMAL2+0x138>)
 8000766:	6013      	str	r3, [r2, #0]
				status_traffic2 = 1;
 8000768:	4b06      	ldr	r3, [pc, #24]	; (8000784 <TRAFFIC_NORMAL2+0x12c>)
 800076a:	2201      	movs	r2, #1
 800076c:	601a      	str	r2, [r3, #0]
		break;
 800076e:	e005      	b.n	800077c <TRAFFIC_NORMAL2+0x124>
		break;
 8000770:	bf00      	nop
 8000772:	e004      	b.n	800077e <TRAFFIC_NORMAL2+0x126>
		break;
 8000774:	bf00      	nop
 8000776:	e002      	b.n	800077e <TRAFFIC_NORMAL2+0x126>
		break;
 8000778:	bf00      	nop
 800077a:	e000      	b.n	800077e <TRAFFIC_NORMAL2+0x126>
		break;
 800077c:	bf00      	nop
	}
	return;
 800077e:	bf00      	nop
}
 8000780:	bd80      	pop	{r7, pc}
 8000782:	bf00      	nop
 8000784:	20000040 	.word	0x20000040
 8000788:	40010800 	.word	0x40010800
 800078c:	20000144 	.word	0x20000144
 8000790:	20000088 	.word	0x20000088
 8000794:	20000044 	.word	0x20000044

08000798 <OFF_ALL_LED2>:

void OFF_ALL_LED2(){
 8000798:	b580      	push	{r7, lr}
 800079a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(RED2_GPIO_Port, RED2_Pin, 1);
 800079c:	2201      	movs	r2, #1
 800079e:	2104      	movs	r1, #4
 80007a0:	4807      	ldr	r0, [pc, #28]	; (80007c0 <OFF_ALL_LED2+0x28>)
 80007a2:	f001 fa12 	bl	8001bca <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GREEN2_GPIO_Port, GREEN2_Pin, 1);
 80007a6:	2201      	movs	r2, #1
 80007a8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80007ac:	4804      	ldr	r0, [pc, #16]	; (80007c0 <OFF_ALL_LED2+0x28>)
 80007ae:	f001 fa0c 	bl	8001bca <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(PURPLE2_GPIO_Port, PURPLE2_Pin, 1);
 80007b2:	2201      	movs	r2, #1
 80007b4:	2140      	movs	r1, #64	; 0x40
 80007b6:	4802      	ldr	r0, [pc, #8]	; (80007c0 <OFF_ALL_LED2+0x28>)
 80007b8:	f001 fa07 	bl	8001bca <HAL_GPIO_WritePin>
}
 80007bc:	bf00      	nop
 80007be:	bd80      	pop	{r7, pc}
 80007c0:	40010800 	.word	0x40010800

080007c4 <OFF_ALL_LED1>:

void OFF_ALL_LED1(){
 80007c4:	b580      	push	{r7, lr}
 80007c6:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(RED1_GPIO_Port, RED1_Pin, 1);
 80007c8:	2201      	movs	r2, #1
 80007ca:	2102      	movs	r1, #2
 80007cc:	4807      	ldr	r0, [pc, #28]	; (80007ec <OFF_ALL_LED1+0x28>)
 80007ce:	f001 f9fc 	bl	8001bca <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GREEN1_GPIO_Port, GREEN1_Pin, 1);
 80007d2:	2201      	movs	r2, #1
 80007d4:	f44f 7100 	mov.w	r1, #512	; 0x200
 80007d8:	4804      	ldr	r0, [pc, #16]	; (80007ec <OFF_ALL_LED1+0x28>)
 80007da:	f001 f9f6 	bl	8001bca <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(PURPLE1_GPIO_Port, PURPLE1_Pin, 1);
 80007de:	2201      	movs	r2, #1
 80007e0:	2120      	movs	r1, #32
 80007e2:	4802      	ldr	r0, [pc, #8]	; (80007ec <OFF_ALL_LED1+0x28>)
 80007e4:	f001 f9f1 	bl	8001bca <HAL_GPIO_WritePin>
}
 80007e8:	bf00      	nop
 80007ea:	bd80      	pop	{r7, pc}
 80007ec:	40010800 	.word	0x40010800

080007f0 <start_SEG7>:
	HAL_GPIO_WritePin(PURPLE1_GPIO_Port, PURPLE1_Pin, 0);
}



void start_SEG7(){
 80007f0:	b480      	push	{r7}
 80007f2:	af00      	add	r7, sp, #0
	 time_for_Traffic1 = seg_buffer1[0];
 80007f4:	4b05      	ldr	r3, [pc, #20]	; (800080c <start_SEG7+0x1c>)
 80007f6:	681b      	ldr	r3, [r3, #0]
 80007f8:	4a05      	ldr	r2, [pc, #20]	; (8000810 <start_SEG7+0x20>)
 80007fa:	6013      	str	r3, [r2, #0]
	 time_for_Traffic2 = seg_buffer1[1];
 80007fc:	4b03      	ldr	r3, [pc, #12]	; (800080c <start_SEG7+0x1c>)
 80007fe:	685b      	ldr	r3, [r3, #4]
 8000800:	4a04      	ldr	r2, [pc, #16]	; (8000814 <start_SEG7+0x24>)
 8000802:	6013      	str	r3, [r2, #0]
}
 8000804:	bf00      	nop
 8000806:	46bd      	mov	sp, r7
 8000808:	bc80      	pop	{r7}
 800080a:	4770      	bx	lr
 800080c:	20000044 	.word	0x20000044
 8000810:	20000084 	.word	0x20000084
 8000814:	20000088 	.word	0x20000088

08000818 <fsm_Suy_Exercise>:


//FSM_MACHINE_SYSTEM

void fsm_Suy_Exercise(){
 8000818:	b580      	push	{r7, lr}
 800081a:	af00      	add	r7, sp, #0
	switch(status_BUTTONS){
 800081c:	4b7f      	ldr	r3, [pc, #508]	; (8000a1c <fsm_Suy_Exercise+0x204>)
 800081e:	681b      	ldr	r3, [r3, #0]
 8000820:	2b03      	cmp	r3, #3
 8000822:	f200 80f0 	bhi.w	8000a06 <fsm_Suy_Exercise+0x1ee>
 8000826:	a201      	add	r2, pc, #4	; (adr r2, 800082c <fsm_Suy_Exercise+0x14>)
 8000828:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800082c:	0800083d 	.word	0x0800083d
 8000830:	0800086d 	.word	0x0800086d
 8000834:	080008fd 	.word	0x080008fd
 8000838:	0800098b 	.word	0x0800098b
	case 0:

		TRAFFIC_NORMAL1();
 800083c:	f7ff fe6c 	bl	8000518 <TRAFFIC_NORMAL1>
		TRAFFIC_NORMAL2();
 8000840:	f7ff ff0a 	bl	8000658 <TRAFFIC_NORMAL2>
		if(is_SELECT_PRESSED() == 1){
 8000844:	f7ff fc82 	bl	800014c <is_SELECT_PRESSED>
 8000848:	4603      	mov	r3, r0
 800084a:	2b01      	cmp	r3, #1
 800084c:	f040 80dd 	bne.w	8000a0a <fsm_Suy_Exercise+0x1f2>
			status_BUTTONS = 1;
 8000850:	4b72      	ldr	r3, [pc, #456]	; (8000a1c <fsm_Suy_Exercise+0x204>)
 8000852:	2201      	movs	r2, #1
 8000854:	601a      	str	r2, [r3, #0]
			seg_index4 = 2;
 8000856:	4b72      	ldr	r3, [pc, #456]	; (8000a20 <fsm_Suy_Exercise+0x208>)
 8000858:	2202      	movs	r2, #2
 800085a:	601a      	str	r2, [r3, #0]
			seg_index3 = 0;
 800085c:	4b71      	ldr	r3, [pc, #452]	; (8000a24 <fsm_Suy_Exercise+0x20c>)
 800085e:	2200      	movs	r2, #0
 8000860:	601a      	str	r2, [r3, #0]
			OFF_ALL_LED1();
 8000862:	f7ff ffaf 	bl	80007c4 <OFF_ALL_LED1>
			OFF_ALL_LED2();
 8000866:	f7ff ff97 	bl	8000798 <OFF_ALL_LED2>
		}
		break;
 800086a:	e0ce      	b.n	8000a0a <fsm_Suy_Exercise+0x1f2>
	case 1:
		blink_RED();
 800086c:	f7ff fdc4 	bl	80003f8 <blink_RED>
		seg_index1 = seg_buffer1[0]/10;
 8000870:	4b6d      	ldr	r3, [pc, #436]	; (8000a28 <fsm_Suy_Exercise+0x210>)
 8000872:	681b      	ldr	r3, [r3, #0]
 8000874:	4a6d      	ldr	r2, [pc, #436]	; (8000a2c <fsm_Suy_Exercise+0x214>)
 8000876:	fb82 1203 	smull	r1, r2, r2, r3
 800087a:	1092      	asrs	r2, r2, #2
 800087c:	17db      	asrs	r3, r3, #31
 800087e:	1ad3      	subs	r3, r2, r3
 8000880:	4a6b      	ldr	r2, [pc, #428]	; (8000a30 <fsm_Suy_Exercise+0x218>)
 8000882:	6013      	str	r3, [r2, #0]
		seg_index2 = seg_buffer1[0]%10;
 8000884:	4b68      	ldr	r3, [pc, #416]	; (8000a28 <fsm_Suy_Exercise+0x210>)
 8000886:	6819      	ldr	r1, [r3, #0]
 8000888:	4b68      	ldr	r3, [pc, #416]	; (8000a2c <fsm_Suy_Exercise+0x214>)
 800088a:	fb83 2301 	smull	r2, r3, r3, r1
 800088e:	109a      	asrs	r2, r3, #2
 8000890:	17cb      	asrs	r3, r1, #31
 8000892:	1ad2      	subs	r2, r2, r3
 8000894:	4613      	mov	r3, r2
 8000896:	009b      	lsls	r3, r3, #2
 8000898:	4413      	add	r3, r2
 800089a:	005b      	lsls	r3, r3, #1
 800089c:	1aca      	subs	r2, r1, r3
 800089e:	4b65      	ldr	r3, [pc, #404]	; (8000a34 <fsm_Suy_Exercise+0x21c>)
 80008a0:	601a      	str	r2, [r3, #0]
		if(is_SELECT_PRESSED() == 1){
 80008a2:	f7ff fc53 	bl	800014c <is_SELECT_PRESSED>
 80008a6:	4603      	mov	r3, r0
 80008a8:	2b01      	cmp	r3, #1
 80008aa:	d10b      	bne.n	80008c4 <fsm_Suy_Exercise+0xac>
			status_BUTTONS = 2;
 80008ac:	4b5b      	ldr	r3, [pc, #364]	; (8000a1c <fsm_Suy_Exercise+0x204>)
 80008ae:	2202      	movs	r2, #2
 80008b0:	601a      	str	r2, [r3, #0]
			seg_index4 ++;
 80008b2:	4b5b      	ldr	r3, [pc, #364]	; (8000a20 <fsm_Suy_Exercise+0x208>)
 80008b4:	681b      	ldr	r3, [r3, #0]
 80008b6:	3301      	adds	r3, #1
 80008b8:	4a59      	ldr	r2, [pc, #356]	; (8000a20 <fsm_Suy_Exercise+0x208>)
 80008ba:	6013      	str	r3, [r2, #0]
			OFF_ALL_LED1();
 80008bc:	f7ff ff82 	bl	80007c4 <OFF_ALL_LED1>
			OFF_ALL_LED2();
 80008c0:	f7ff ff6a 	bl	8000798 <OFF_ALL_LED2>
		}
		if(is_SET_PRESSED() == 1){
 80008c4:	f7ff fd32 	bl	800032c <is_SET_PRESSED>
 80008c8:	4603      	mov	r3, r0
 80008ca:	2b01      	cmp	r3, #1
 80008cc:	d102      	bne.n	80008d4 <fsm_Suy_Exercise+0xbc>
			status_BUTTONS = 0;
 80008ce:	4b53      	ldr	r3, [pc, #332]	; (8000a1c <fsm_Suy_Exercise+0x204>)
 80008d0:	2200      	movs	r2, #0
 80008d2:	601a      	str	r2, [r3, #0]
		}
		if(is_MODIFY_PRESSED() == 1){
 80008d4:	f7ff fcb8 	bl	8000248 <is_MODIFY_PRESSED>
 80008d8:	4603      	mov	r3, r0
 80008da:	2b01      	cmp	r3, #1
 80008dc:	f040 8097 	bne.w	8000a0e <fsm_Suy_Exercise+0x1f6>
			if(seg_buffer1[0]<99){
 80008e0:	4b51      	ldr	r3, [pc, #324]	; (8000a28 <fsm_Suy_Exercise+0x210>)
 80008e2:	681b      	ldr	r3, [r3, #0]
 80008e4:	2b62      	cmp	r3, #98	; 0x62
 80008e6:	dc05      	bgt.n	80008f4 <fsm_Suy_Exercise+0xdc>
				seg_buffer1[0]=seg_buffer1[0]+1;//1-99
 80008e8:	4b4f      	ldr	r3, [pc, #316]	; (8000a28 <fsm_Suy_Exercise+0x210>)
 80008ea:	681b      	ldr	r3, [r3, #0]
 80008ec:	3301      	adds	r3, #1
 80008ee:	4a4e      	ldr	r2, [pc, #312]	; (8000a28 <fsm_Suy_Exercise+0x210>)
 80008f0:	6013      	str	r3, [r2, #0]
			}
		}
//		if(is_MODIFY_PRESSED() == 1){
//
//			}
		break;
 80008f2:	e08c      	b.n	8000a0e <fsm_Suy_Exercise+0x1f6>
					seg_buffer1[0]=1;
 80008f4:	4b4c      	ldr	r3, [pc, #304]	; (8000a28 <fsm_Suy_Exercise+0x210>)
 80008f6:	2201      	movs	r2, #1
 80008f8:	601a      	str	r2, [r3, #0]
		break;
 80008fa:	e088      	b.n	8000a0e <fsm_Suy_Exercise+0x1f6>
	case 2:
		seg_index1 = seg_buffer1[2]/10;
 80008fc:	4b4a      	ldr	r3, [pc, #296]	; (8000a28 <fsm_Suy_Exercise+0x210>)
 80008fe:	689b      	ldr	r3, [r3, #8]
 8000900:	4a4a      	ldr	r2, [pc, #296]	; (8000a2c <fsm_Suy_Exercise+0x214>)
 8000902:	fb82 1203 	smull	r1, r2, r2, r3
 8000906:	1092      	asrs	r2, r2, #2
 8000908:	17db      	asrs	r3, r3, #31
 800090a:	1ad3      	subs	r3, r2, r3
 800090c:	4a48      	ldr	r2, [pc, #288]	; (8000a30 <fsm_Suy_Exercise+0x218>)
 800090e:	6013      	str	r3, [r2, #0]
		seg_index2 = seg_buffer1[2]%10;
 8000910:	4b45      	ldr	r3, [pc, #276]	; (8000a28 <fsm_Suy_Exercise+0x210>)
 8000912:	6899      	ldr	r1, [r3, #8]
 8000914:	4b45      	ldr	r3, [pc, #276]	; (8000a2c <fsm_Suy_Exercise+0x214>)
 8000916:	fb83 2301 	smull	r2, r3, r3, r1
 800091a:	109a      	asrs	r2, r3, #2
 800091c:	17cb      	asrs	r3, r1, #31
 800091e:	1ad2      	subs	r2, r2, r3
 8000920:	4613      	mov	r3, r2
 8000922:	009b      	lsls	r3, r3, #2
 8000924:	4413      	add	r3, r2
 8000926:	005b      	lsls	r3, r3, #1
 8000928:	1aca      	subs	r2, r1, r3
 800092a:	4b42      	ldr	r3, [pc, #264]	; (8000a34 <fsm_Suy_Exercise+0x21c>)
 800092c:	601a      	str	r2, [r3, #0]
		blink_YELLOW();
 800092e:	f7ff fd7b 	bl	8000428 <blink_YELLOW>
		if((is_SELECT_PRESSED() == 1)){
 8000932:	f7ff fc0b 	bl	800014c <is_SELECT_PRESSED>
 8000936:	4603      	mov	r3, r0
 8000938:	2b01      	cmp	r3, #1
 800093a:	d10b      	bne.n	8000954 <fsm_Suy_Exercise+0x13c>
			status_BUTTONS = 3;
 800093c:	4b37      	ldr	r3, [pc, #220]	; (8000a1c <fsm_Suy_Exercise+0x204>)
 800093e:	2203      	movs	r2, #3
 8000940:	601a      	str	r2, [r3, #0]
			seg_index4++;
 8000942:	4b37      	ldr	r3, [pc, #220]	; (8000a20 <fsm_Suy_Exercise+0x208>)
 8000944:	681b      	ldr	r3, [r3, #0]
 8000946:	3301      	adds	r3, #1
 8000948:	4a35      	ldr	r2, [pc, #212]	; (8000a20 <fsm_Suy_Exercise+0x208>)
 800094a:	6013      	str	r3, [r2, #0]
			OFF_ALL_LED1();
 800094c:	f7ff ff3a 	bl	80007c4 <OFF_ALL_LED1>
			OFF_ALL_LED2();
 8000950:	f7ff ff22 	bl	8000798 <OFF_ALL_LED2>
		}
		if(is_MODIFY_PRESSED() == 1){
 8000954:	f7ff fc78 	bl	8000248 <is_MODIFY_PRESSED>
 8000958:	4603      	mov	r3, r0
 800095a:	2b01      	cmp	r3, #1
 800095c:	d10c      	bne.n	8000978 <fsm_Suy_Exercise+0x160>
			if(seg_buffer1[2]<99){
 800095e:	4b32      	ldr	r3, [pc, #200]	; (8000a28 <fsm_Suy_Exercise+0x210>)
 8000960:	689b      	ldr	r3, [r3, #8]
 8000962:	2b62      	cmp	r3, #98	; 0x62
 8000964:	dc05      	bgt.n	8000972 <fsm_Suy_Exercise+0x15a>
				seg_buffer1[2]=seg_buffer1[2]+1;//1-99
 8000966:	4b30      	ldr	r3, [pc, #192]	; (8000a28 <fsm_Suy_Exercise+0x210>)
 8000968:	689b      	ldr	r3, [r3, #8]
 800096a:	3301      	adds	r3, #1
 800096c:	4a2e      	ldr	r2, [pc, #184]	; (8000a28 <fsm_Suy_Exercise+0x210>)
 800096e:	6093      	str	r3, [r2, #8]
 8000970:	e002      	b.n	8000978 <fsm_Suy_Exercise+0x160>
				} else {
					seg_buffer1[2]=1;
 8000972:	4b2d      	ldr	r3, [pc, #180]	; (8000a28 <fsm_Suy_Exercise+0x210>)
 8000974:	2201      	movs	r2, #1
 8000976:	609a      	str	r2, [r3, #8]
				}
		}
		if(is_SET_PRESSED() == 1){
 8000978:	f7ff fcd8 	bl	800032c <is_SET_PRESSED>
 800097c:	4603      	mov	r3, r0
 800097e:	2b01      	cmp	r3, #1
 8000980:	d147      	bne.n	8000a12 <fsm_Suy_Exercise+0x1fa>
			status_BUTTONS = 0;
 8000982:	4b26      	ldr	r3, [pc, #152]	; (8000a1c <fsm_Suy_Exercise+0x204>)
 8000984:	2200      	movs	r2, #0
 8000986:	601a      	str	r2, [r3, #0]
		}
		break;
 8000988:	e043      	b.n	8000a12 <fsm_Suy_Exercise+0x1fa>
	case 3:
		seg_index1 = seg_buffer1[1]/10;
 800098a:	4b27      	ldr	r3, [pc, #156]	; (8000a28 <fsm_Suy_Exercise+0x210>)
 800098c:	685b      	ldr	r3, [r3, #4]
 800098e:	4a27      	ldr	r2, [pc, #156]	; (8000a2c <fsm_Suy_Exercise+0x214>)
 8000990:	fb82 1203 	smull	r1, r2, r2, r3
 8000994:	1092      	asrs	r2, r2, #2
 8000996:	17db      	asrs	r3, r3, #31
 8000998:	1ad3      	subs	r3, r2, r3
 800099a:	4a25      	ldr	r2, [pc, #148]	; (8000a30 <fsm_Suy_Exercise+0x218>)
 800099c:	6013      	str	r3, [r2, #0]
		seg_index2 = seg_buffer1[1]%10;
 800099e:	4b22      	ldr	r3, [pc, #136]	; (8000a28 <fsm_Suy_Exercise+0x210>)
 80009a0:	6859      	ldr	r1, [r3, #4]
 80009a2:	4b22      	ldr	r3, [pc, #136]	; (8000a2c <fsm_Suy_Exercise+0x214>)
 80009a4:	fb83 2301 	smull	r2, r3, r3, r1
 80009a8:	109a      	asrs	r2, r3, #2
 80009aa:	17cb      	asrs	r3, r1, #31
 80009ac:	1ad2      	subs	r2, r2, r3
 80009ae:	4613      	mov	r3, r2
 80009b0:	009b      	lsls	r3, r3, #2
 80009b2:	4413      	add	r3, r2
 80009b4:	005b      	lsls	r3, r3, #1
 80009b6:	1aca      	subs	r2, r1, r3
 80009b8:	4b1e      	ldr	r3, [pc, #120]	; (8000a34 <fsm_Suy_Exercise+0x21c>)
 80009ba:	601a      	str	r2, [r3, #0]
		blink_GREEN();
 80009bc:	f7ff fd4c 	bl	8000458 <blink_GREEN>
		if(is_SELECT_PRESSED() == 1){
 80009c0:	f7ff fbc4 	bl	800014c <is_SELECT_PRESSED>
 80009c4:	4603      	mov	r3, r0
 80009c6:	2b01      	cmp	r3, #1
 80009c8:	d102      	bne.n	80009d0 <fsm_Suy_Exercise+0x1b8>
					status_BUTTONS = 1;
 80009ca:	4b14      	ldr	r3, [pc, #80]	; (8000a1c <fsm_Suy_Exercise+0x204>)
 80009cc:	2201      	movs	r2, #1
 80009ce:	601a      	str	r2, [r3, #0]
				}
		if(is_MODIFY_PRESSED() == 1){
 80009d0:	f7ff fc3a 	bl	8000248 <is_MODIFY_PRESSED>
 80009d4:	4603      	mov	r3, r0
 80009d6:	2b01      	cmp	r3, #1
 80009d8:	d10c      	bne.n	80009f4 <fsm_Suy_Exercise+0x1dc>
			if(seg_buffer1[1]<99){
 80009da:	4b13      	ldr	r3, [pc, #76]	; (8000a28 <fsm_Suy_Exercise+0x210>)
 80009dc:	685b      	ldr	r3, [r3, #4]
 80009de:	2b62      	cmp	r3, #98	; 0x62
 80009e0:	dc05      	bgt.n	80009ee <fsm_Suy_Exercise+0x1d6>
				seg_buffer1[1]=seg_buffer1[1]+1;//1-99
 80009e2:	4b11      	ldr	r3, [pc, #68]	; (8000a28 <fsm_Suy_Exercise+0x210>)
 80009e4:	685b      	ldr	r3, [r3, #4]
 80009e6:	3301      	adds	r3, #1
 80009e8:	4a0f      	ldr	r2, [pc, #60]	; (8000a28 <fsm_Suy_Exercise+0x210>)
 80009ea:	6053      	str	r3, [r2, #4]
 80009ec:	e002      	b.n	80009f4 <fsm_Suy_Exercise+0x1dc>
				} else {
					seg_buffer1[1]=1;
 80009ee:	4b0e      	ldr	r3, [pc, #56]	; (8000a28 <fsm_Suy_Exercise+0x210>)
 80009f0:	2201      	movs	r2, #1
 80009f2:	605a      	str	r2, [r3, #4]
				}
		}
		if(is_SET_PRESSED() == 1){
 80009f4:	f7ff fc9a 	bl	800032c <is_SET_PRESSED>
 80009f8:	4603      	mov	r3, r0
 80009fa:	2b01      	cmp	r3, #1
 80009fc:	d10b      	bne.n	8000a16 <fsm_Suy_Exercise+0x1fe>
					status_BUTTONS = 0;
 80009fe:	4b07      	ldr	r3, [pc, #28]	; (8000a1c <fsm_Suy_Exercise+0x204>)
 8000a00:	2200      	movs	r2, #0
 8000a02:	601a      	str	r2, [r3, #0]
				}
		break;
 8000a04:	e007      	b.n	8000a16 <fsm_Suy_Exercise+0x1fe>
	default:
		break;
 8000a06:	bf00      	nop
 8000a08:	e006      	b.n	8000a18 <fsm_Suy_Exercise+0x200>
		break;
 8000a0a:	bf00      	nop
 8000a0c:	e004      	b.n	8000a18 <fsm_Suy_Exercise+0x200>
		break;
 8000a0e:	bf00      	nop
 8000a10:	e002      	b.n	8000a18 <fsm_Suy_Exercise+0x200>
		break;
 8000a12:	bf00      	nop
 8000a14:	e000      	b.n	8000a18 <fsm_Suy_Exercise+0x200>
		break;
 8000a16:	bf00      	nop
	}
	return;
 8000a18:	bf00      	nop
}
 8000a1a:	bd80      	pop	{r7, pc}
 8000a1c:	2000008c 	.word	0x2000008c
 8000a20:	2000012c 	.word	0x2000012c
 8000a24:	20000128 	.word	0x20000128
 8000a28:	20000044 	.word	0x20000044
 8000a2c:	66666667 	.word	0x66666667
 8000a30:	20000120 	.word	0x20000120
 8000a34:	20000124 	.word	0x20000124

08000a38 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000a38:	b580      	push	{r7, lr}
 8000a3a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000a3c:	f000 fdc2 	bl	80015c4 <HAL_Init>
//  		 SCH_Add_Task(Toggle2, 300 , 100) ;
//  		 SCH_Add_Task(Toggle3, 200, 100);
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000a40:	f000 f81c 	bl	8000a7c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000a44:	f000 f8f0 	bl	8000c28 <MX_GPIO_Init>
  MX_TIM2_Init();
 8000a48:	f000 f854 	bl	8000af4 <MX_TIM2_Init>
  MX_TIM3_Init();
 8000a4c:	f000 f89e 	bl	8000b8c <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
HAL_TIM_Base_Start_IT(&htim2);
 8000a50:	4809      	ldr	r0, [pc, #36]	; (8000a78 <main+0x40>)
 8000a52:	f001 fd23 	bl	800249c <HAL_TIM_Base_Start_IT>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
start_SEG7();
 8000a56:	f7ff fecb 	bl	80007f0 <start_SEG7>
setTimer1(100);
 8000a5a:	2064      	movs	r0, #100	; 0x64
 8000a5c:	f000 fc04 	bl	8001268 <setTimer1>
setTimer2(100);
 8000a60:	2064      	movs	r0, #100	; 0x64
 8000a62:	f000 fc15 	bl	8001290 <setTimer2>
setTimer3(25);
 8000a66:	2019      	movs	r0, #25
 8000a68:	f000 fc26 	bl	80012b8 <setTimer3>
//	  (*ptr)();
//	  Toggle();
//	  HAL_Delay(1000);


	  to_do_7SEG();
 8000a6c:	f000 fbdc 	bl	8001228 <to_do_7SEG>
	  fsm_Suy_Exercise();
 8000a70:	f7ff fed2 	bl	8000818 <fsm_Suy_Exercise>
	  to_do_7SEG();
 8000a74:	e7fa      	b.n	8000a6c <main+0x34>
 8000a76:	bf00      	nop
 8000a78:	20000090 	.word	0x20000090

08000a7c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000a7c:	b580      	push	{r7, lr}
 8000a7e:	b090      	sub	sp, #64	; 0x40
 8000a80:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000a82:	f107 0318 	add.w	r3, r7, #24
 8000a86:	2228      	movs	r2, #40	; 0x28
 8000a88:	2100      	movs	r1, #0
 8000a8a:	4618      	mov	r0, r3
 8000a8c:	f002 f8be 	bl	8002c0c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000a90:	1d3b      	adds	r3, r7, #4
 8000a92:	2200      	movs	r2, #0
 8000a94:	601a      	str	r2, [r3, #0]
 8000a96:	605a      	str	r2, [r3, #4]
 8000a98:	609a      	str	r2, [r3, #8]
 8000a9a:	60da      	str	r2, [r3, #12]
 8000a9c:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000a9e:	2302      	movs	r3, #2
 8000aa0:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000aa2:	2301      	movs	r3, #1
 8000aa4:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000aa6:	2310      	movs	r3, #16
 8000aa8:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000aaa:	2300      	movs	r3, #0
 8000aac:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000aae:	f107 0318 	add.w	r3, r7, #24
 8000ab2:	4618      	mov	r0, r3
 8000ab4:	f001 f8ba 	bl	8001c2c <HAL_RCC_OscConfig>
 8000ab8:	4603      	mov	r3, r0
 8000aba:	2b00      	cmp	r3, #0
 8000abc:	d001      	beq.n	8000ac2 <SystemClock_Config+0x46>
  {
    Error_Handler();
 8000abe:	f000 f927 	bl	8000d10 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000ac2:	230f      	movs	r3, #15
 8000ac4:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000ac6:	2300      	movs	r3, #0
 8000ac8:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000aca:	2300      	movs	r3, #0
 8000acc:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000ace:	2300      	movs	r3, #0
 8000ad0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000ad2:	2300      	movs	r3, #0
 8000ad4:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000ad6:	1d3b      	adds	r3, r7, #4
 8000ad8:	2100      	movs	r1, #0
 8000ada:	4618      	mov	r0, r3
 8000adc:	f001 fb28 	bl	8002130 <HAL_RCC_ClockConfig>
 8000ae0:	4603      	mov	r3, r0
 8000ae2:	2b00      	cmp	r3, #0
 8000ae4:	d001      	beq.n	8000aea <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8000ae6:	f000 f913 	bl	8000d10 <Error_Handler>
  }
}
 8000aea:	bf00      	nop
 8000aec:	3740      	adds	r7, #64	; 0x40
 8000aee:	46bd      	mov	sp, r7
 8000af0:	bd80      	pop	{r7, pc}
	...

08000af4 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000af4:	b580      	push	{r7, lr}
 8000af6:	b086      	sub	sp, #24
 8000af8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000afa:	f107 0308 	add.w	r3, r7, #8
 8000afe:	2200      	movs	r2, #0
 8000b00:	601a      	str	r2, [r3, #0]
 8000b02:	605a      	str	r2, [r3, #4]
 8000b04:	609a      	str	r2, [r3, #8]
 8000b06:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000b08:	463b      	mov	r3, r7
 8000b0a:	2200      	movs	r2, #0
 8000b0c:	601a      	str	r2, [r3, #0]
 8000b0e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000b10:	4b1d      	ldr	r3, [pc, #116]	; (8000b88 <MX_TIM2_Init+0x94>)
 8000b12:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000b16:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 7999;
 8000b18:	4b1b      	ldr	r3, [pc, #108]	; (8000b88 <MX_TIM2_Init+0x94>)
 8000b1a:	f641 723f 	movw	r2, #7999	; 0x1f3f
 8000b1e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b20:	4b19      	ldr	r3, [pc, #100]	; (8000b88 <MX_TIM2_Init+0x94>)
 8000b22:	2200      	movs	r2, #0
 8000b24:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 9;
 8000b26:	4b18      	ldr	r3, [pc, #96]	; (8000b88 <MX_TIM2_Init+0x94>)
 8000b28:	2209      	movs	r2, #9
 8000b2a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000b2c:	4b16      	ldr	r3, [pc, #88]	; (8000b88 <MX_TIM2_Init+0x94>)
 8000b2e:	2200      	movs	r2, #0
 8000b30:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000b32:	4b15      	ldr	r3, [pc, #84]	; (8000b88 <MX_TIM2_Init+0x94>)
 8000b34:	2200      	movs	r2, #0
 8000b36:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000b38:	4813      	ldr	r0, [pc, #76]	; (8000b88 <MX_TIM2_Init+0x94>)
 8000b3a:	f001 fc5f 	bl	80023fc <HAL_TIM_Base_Init>
 8000b3e:	4603      	mov	r3, r0
 8000b40:	2b00      	cmp	r3, #0
 8000b42:	d001      	beq.n	8000b48 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8000b44:	f000 f8e4 	bl	8000d10 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000b48:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000b4c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000b4e:	f107 0308 	add.w	r3, r7, #8
 8000b52:	4619      	mov	r1, r3
 8000b54:	480c      	ldr	r0, [pc, #48]	; (8000b88 <MX_TIM2_Init+0x94>)
 8000b56:	f001 fdf5 	bl	8002744 <HAL_TIM_ConfigClockSource>
 8000b5a:	4603      	mov	r3, r0
 8000b5c:	2b00      	cmp	r3, #0
 8000b5e:	d001      	beq.n	8000b64 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8000b60:	f000 f8d6 	bl	8000d10 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000b64:	2300      	movs	r3, #0
 8000b66:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000b68:	2300      	movs	r3, #0
 8000b6a:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000b6c:	463b      	mov	r3, r7
 8000b6e:	4619      	mov	r1, r3
 8000b70:	4805      	ldr	r0, [pc, #20]	; (8000b88 <MX_TIM2_Init+0x94>)
 8000b72:	f001 ffbd 	bl	8002af0 <HAL_TIMEx_MasterConfigSynchronization>
 8000b76:	4603      	mov	r3, r0
 8000b78:	2b00      	cmp	r3, #0
 8000b7a:	d001      	beq.n	8000b80 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8000b7c:	f000 f8c8 	bl	8000d10 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000b80:	bf00      	nop
 8000b82:	3718      	adds	r7, #24
 8000b84:	46bd      	mov	sp, r7
 8000b86:	bd80      	pop	{r7, pc}
 8000b88:	20000090 	.word	0x20000090

08000b8c <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000b8c:	b580      	push	{r7, lr}
 8000b8e:	b086      	sub	sp, #24
 8000b90:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000b92:	f107 0308 	add.w	r3, r7, #8
 8000b96:	2200      	movs	r2, #0
 8000b98:	601a      	str	r2, [r3, #0]
 8000b9a:	605a      	str	r2, [r3, #4]
 8000b9c:	609a      	str	r2, [r3, #8]
 8000b9e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000ba0:	463b      	mov	r3, r7
 8000ba2:	2200      	movs	r2, #0
 8000ba4:	601a      	str	r2, [r3, #0]
 8000ba6:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000ba8:	4b1d      	ldr	r3, [pc, #116]	; (8000c20 <MX_TIM3_Init+0x94>)
 8000baa:	4a1e      	ldr	r2, [pc, #120]	; (8000c24 <MX_TIM3_Init+0x98>)
 8000bac:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 7999;
 8000bae:	4b1c      	ldr	r3, [pc, #112]	; (8000c20 <MX_TIM3_Init+0x94>)
 8000bb0:	f641 723f 	movw	r2, #7999	; 0x1f3f
 8000bb4:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000bb6:	4b1a      	ldr	r3, [pc, #104]	; (8000c20 <MX_TIM3_Init+0x94>)
 8000bb8:	2200      	movs	r2, #0
 8000bba:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 499;
 8000bbc:	4b18      	ldr	r3, [pc, #96]	; (8000c20 <MX_TIM3_Init+0x94>)
 8000bbe:	f240 12f3 	movw	r2, #499	; 0x1f3
 8000bc2:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000bc4:	4b16      	ldr	r3, [pc, #88]	; (8000c20 <MX_TIM3_Init+0x94>)
 8000bc6:	2200      	movs	r2, #0
 8000bc8:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000bca:	4b15      	ldr	r3, [pc, #84]	; (8000c20 <MX_TIM3_Init+0x94>)
 8000bcc:	2200      	movs	r2, #0
 8000bce:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000bd0:	4813      	ldr	r0, [pc, #76]	; (8000c20 <MX_TIM3_Init+0x94>)
 8000bd2:	f001 fc13 	bl	80023fc <HAL_TIM_Base_Init>
 8000bd6:	4603      	mov	r3, r0
 8000bd8:	2b00      	cmp	r3, #0
 8000bda:	d001      	beq.n	8000be0 <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 8000bdc:	f000 f898 	bl	8000d10 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000be0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000be4:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000be6:	f107 0308 	add.w	r3, r7, #8
 8000bea:	4619      	mov	r1, r3
 8000bec:	480c      	ldr	r0, [pc, #48]	; (8000c20 <MX_TIM3_Init+0x94>)
 8000bee:	f001 fda9 	bl	8002744 <HAL_TIM_ConfigClockSource>
 8000bf2:	4603      	mov	r3, r0
 8000bf4:	2b00      	cmp	r3, #0
 8000bf6:	d001      	beq.n	8000bfc <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 8000bf8:	f000 f88a 	bl	8000d10 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000bfc:	2300      	movs	r3, #0
 8000bfe:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000c00:	2300      	movs	r3, #0
 8000c02:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000c04:	463b      	mov	r3, r7
 8000c06:	4619      	mov	r1, r3
 8000c08:	4805      	ldr	r0, [pc, #20]	; (8000c20 <MX_TIM3_Init+0x94>)
 8000c0a:	f001 ff71 	bl	8002af0 <HAL_TIMEx_MasterConfigSynchronization>
 8000c0e:	4603      	mov	r3, r0
 8000c10:	2b00      	cmp	r3, #0
 8000c12:	d001      	beq.n	8000c18 <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 8000c14:	f000 f87c 	bl	8000d10 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8000c18:	bf00      	nop
 8000c1a:	3718      	adds	r7, #24
 8000c1c:	46bd      	mov	sp, r7
 8000c1e:	bd80      	pop	{r7, pc}
 8000c20:	200000d8 	.word	0x200000d8
 8000c24:	40000400 	.word	0x40000400

08000c28 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000c28:	b580      	push	{r7, lr}
 8000c2a:	b086      	sub	sp, #24
 8000c2c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c2e:	f107 0308 	add.w	r3, r7, #8
 8000c32:	2200      	movs	r2, #0
 8000c34:	601a      	str	r2, [r3, #0]
 8000c36:	605a      	str	r2, [r3, #4]
 8000c38:	609a      	str	r2, [r3, #8]
 8000c3a:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c3c:	4b29      	ldr	r3, [pc, #164]	; (8000ce4 <MX_GPIO_Init+0xbc>)
 8000c3e:	699b      	ldr	r3, [r3, #24]
 8000c40:	4a28      	ldr	r2, [pc, #160]	; (8000ce4 <MX_GPIO_Init+0xbc>)
 8000c42:	f043 0304 	orr.w	r3, r3, #4
 8000c46:	6193      	str	r3, [r2, #24]
 8000c48:	4b26      	ldr	r3, [pc, #152]	; (8000ce4 <MX_GPIO_Init+0xbc>)
 8000c4a:	699b      	ldr	r3, [r3, #24]
 8000c4c:	f003 0304 	and.w	r3, r3, #4
 8000c50:	607b      	str	r3, [r7, #4]
 8000c52:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c54:	4b23      	ldr	r3, [pc, #140]	; (8000ce4 <MX_GPIO_Init+0xbc>)
 8000c56:	699b      	ldr	r3, [r3, #24]
 8000c58:	4a22      	ldr	r2, [pc, #136]	; (8000ce4 <MX_GPIO_Init+0xbc>)
 8000c5a:	f043 0308 	orr.w	r3, r3, #8
 8000c5e:	6193      	str	r3, [r2, #24]
 8000c60:	4b20      	ldr	r3, [pc, #128]	; (8000ce4 <MX_GPIO_Init+0xbc>)
 8000c62:	699b      	ldr	r3, [r3, #24]
 8000c64:	f003 0308 	and.w	r3, r3, #8
 8000c68:	603b      	str	r3, [r7, #0]
 8000c6a:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, RED1_Pin|RED2_Pin|PURPLE1_Pin|PURPLE2_Pin
 8000c6c:	2200      	movs	r2, #0
 8000c6e:	f24f 6166 	movw	r1, #63078	; 0xf666
 8000c72:	481d      	ldr	r0, [pc, #116]	; (8000ce8 <MX_GPIO_Init+0xc0>)
 8000c74:	f000 ffa9 	bl	8001bca <HAL_GPIO_WritePin>
                          |GREEN1_Pin|GREEN2_Pin|EN0_Pin|EN1_Pin
                          |EN2_Pin|EN3_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, PB4_Pin|PB5_Pin|PB6_Pin|PB0_Pin
 8000c78:	2200      	movs	r2, #0
 8000c7a:	f44f 51fe 	mov.w	r1, #8128	; 0x1fc0
 8000c7e:	481b      	ldr	r0, [pc, #108]	; (8000cec <MX_GPIO_Init+0xc4>)
 8000c80:	f000 ffa3 	bl	8001bca <HAL_GPIO_WritePin>
                          |PB1_Pin|PB2_Pin|PB3_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : RED1_Pin RED2_Pin PURPLE1_Pin PURPLE2_Pin
                           GREEN1_Pin GREEN2_Pin EN0_Pin EN1_Pin
                           EN2_Pin EN3_Pin */
  GPIO_InitStruct.Pin = RED1_Pin|RED2_Pin|PURPLE1_Pin|PURPLE2_Pin
 8000c84:	f24f 6366 	movw	r3, #63078	; 0xf666
 8000c88:	60bb      	str	r3, [r7, #8]
                          |GREEN1_Pin|GREEN2_Pin|EN0_Pin|EN1_Pin
                          |EN2_Pin|EN3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c8a:	2301      	movs	r3, #1
 8000c8c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c8e:	2300      	movs	r3, #0
 8000c90:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c92:	2302      	movs	r3, #2
 8000c94:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c96:	f107 0308 	add.w	r3, r7, #8
 8000c9a:	4619      	mov	r1, r3
 8000c9c:	4812      	ldr	r0, [pc, #72]	; (8000ce8 <MX_GPIO_Init+0xc0>)
 8000c9e:	f000 fe01 	bl	80018a4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB4_Pin PB5_Pin PB6_Pin PB0_Pin
                           PB1_Pin PB2_Pin PB3_Pin */
  GPIO_InitStruct.Pin = PB4_Pin|PB5_Pin|PB6_Pin|PB0_Pin
 8000ca2:	f44f 53fe 	mov.w	r3, #8128	; 0x1fc0
 8000ca6:	60bb      	str	r3, [r7, #8]
                          |PB1_Pin|PB2_Pin|PB3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ca8:	2301      	movs	r3, #1
 8000caa:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cac:	2300      	movs	r3, #0
 8000cae:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cb0:	2302      	movs	r3, #2
 8000cb2:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000cb4:	f107 0308 	add.w	r3, r7, #8
 8000cb8:	4619      	mov	r1, r3
 8000cba:	480c      	ldr	r0, [pc, #48]	; (8000cec <MX_GPIO_Init+0xc4>)
 8000cbc:	f000 fdf2 	bl	80018a4 <HAL_GPIO_Init>

  /*Configure GPIO pins : SELECT_Pin MODIFY_Pin SET_Pin */
  GPIO_InitStruct.Pin = SELECT_Pin|MODIFY_Pin|SET_Pin;
 8000cc0:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8000cc4:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000cc6:	2300      	movs	r3, #0
 8000cc8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000cca:	2301      	movs	r3, #1
 8000ccc:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000cce:	f107 0308 	add.w	r3, r7, #8
 8000cd2:	4619      	mov	r1, r3
 8000cd4:	4805      	ldr	r0, [pc, #20]	; (8000cec <MX_GPIO_Init+0xc4>)
 8000cd6:	f000 fde5 	bl	80018a4 <HAL_GPIO_Init>

}
 8000cda:	bf00      	nop
 8000cdc:	3718      	adds	r7, #24
 8000cde:	46bd      	mov	sp, r7
 8000ce0:	bd80      	pop	{r7, pc}
 8000ce2:	bf00      	nop
 8000ce4:	40021000 	.word	0x40021000
 8000ce8:	40010800 	.word	0x40010800
 8000cec:	40010c00 	.word	0x40010c00

08000cf0 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim2){
 8000cf0:	b580      	push	{r7, lr}
 8000cf2:	b082      	sub	sp, #8
 8000cf4:	af00      	add	r7, sp, #0
 8000cf6:	6078      	str	r0, [r7, #4]
	timerRun();
 8000cf8:	f000 fb2e 	bl	8001358 <timerRun>
//	timerRun_7seg();
//	getKeyInput();
	get_key_Input();
 8000cfc:	f7ff fa44 	bl	8000188 <get_key_Input>
	get_key_Input2();
 8000d00:	f7ff fab4 	bl	800026c <get_key_Input2>
	get_key_Input3();
 8000d04:	f7ff fb24 	bl	8000350 <get_key_Input3>
//	SCH_Update();
}
 8000d08:	bf00      	nop
 8000d0a:	3708      	adds	r7, #8
 8000d0c:	46bd      	mov	sp, r7
 8000d0e:	bd80      	pop	{r7, pc}

08000d10 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000d10:	b480      	push	{r7}
 8000d12:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000d14:	b672      	cpsid	i
}
 8000d16:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000d18:	e7fe      	b.n	8000d18 <Error_Handler+0x8>
	...

08000d1c <zero>:
//int seg_buffer[10] = {0,1,2,3,4,5,6,7,8,9};

//7SEG display
//segment case
void zero()
{
 8000d1c:	b580      	push	{r7, lr}
 8000d1e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(PB0_GPIO_Port, PB0_Pin, RESET);
 8000d20:	2200      	movs	r2, #0
 8000d22:	2140      	movs	r1, #64	; 0x40
 8000d24:	4813      	ldr	r0, [pc, #76]	; (8000d74 <zero+0x58>)
 8000d26:	f000 ff50 	bl	8001bca <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(PB1_GPIO_Port, PB1_Pin, RESET);
 8000d2a:	2200      	movs	r2, #0
 8000d2c:	2180      	movs	r1, #128	; 0x80
 8000d2e:	4811      	ldr	r0, [pc, #68]	; (8000d74 <zero+0x58>)
 8000d30:	f000 ff4b 	bl	8001bca <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(PB2_GPIO_Port, PB2_Pin, RESET);
 8000d34:	2200      	movs	r2, #0
 8000d36:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000d3a:	480e      	ldr	r0, [pc, #56]	; (8000d74 <zero+0x58>)
 8000d3c:	f000 ff45 	bl	8001bca <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(PB3_GPIO_Port, PB3_Pin, RESET);
 8000d40:	2200      	movs	r2, #0
 8000d42:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000d46:	480b      	ldr	r0, [pc, #44]	; (8000d74 <zero+0x58>)
 8000d48:	f000 ff3f 	bl	8001bca <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(PB4_GPIO_Port, PB4_Pin, RESET);
 8000d4c:	2200      	movs	r2, #0
 8000d4e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000d52:	4808      	ldr	r0, [pc, #32]	; (8000d74 <zero+0x58>)
 8000d54:	f000 ff39 	bl	8001bca <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(PB5_GPIO_Port, PB5_Pin, RESET);
 8000d58:	2200      	movs	r2, #0
 8000d5a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000d5e:	4805      	ldr	r0, [pc, #20]	; (8000d74 <zero+0x58>)
 8000d60:	f000 ff33 	bl	8001bca <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(PB6_GPIO_Port, PB6_Pin, SET);
 8000d64:	2201      	movs	r2, #1
 8000d66:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000d6a:	4802      	ldr	r0, [pc, #8]	; (8000d74 <zero+0x58>)
 8000d6c:	f000 ff2d 	bl	8001bca <HAL_GPIO_WritePin>
	return;
 8000d70:	bf00      	nop
}
 8000d72:	bd80      	pop	{r7, pc}
 8000d74:	40010c00 	.word	0x40010c00

08000d78 <one>:


void one()
{
 8000d78:	b580      	push	{r7, lr}
 8000d7a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(PB0_GPIO_Port, PB0_Pin, SET);
 8000d7c:	2201      	movs	r2, #1
 8000d7e:	2140      	movs	r1, #64	; 0x40
 8000d80:	4813      	ldr	r0, [pc, #76]	; (8000dd0 <one+0x58>)
 8000d82:	f000 ff22 	bl	8001bca <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(PB1_GPIO_Port, PB1_Pin, RESET);
 8000d86:	2200      	movs	r2, #0
 8000d88:	2180      	movs	r1, #128	; 0x80
 8000d8a:	4811      	ldr	r0, [pc, #68]	; (8000dd0 <one+0x58>)
 8000d8c:	f000 ff1d 	bl	8001bca <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(PB2_GPIO_Port, PB2_Pin, RESET);
 8000d90:	2200      	movs	r2, #0
 8000d92:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000d96:	480e      	ldr	r0, [pc, #56]	; (8000dd0 <one+0x58>)
 8000d98:	f000 ff17 	bl	8001bca <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(PB3_GPIO_Port, PB3_Pin, SET);
 8000d9c:	2201      	movs	r2, #1
 8000d9e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000da2:	480b      	ldr	r0, [pc, #44]	; (8000dd0 <one+0x58>)
 8000da4:	f000 ff11 	bl	8001bca <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(PB4_GPIO_Port, PB4_Pin, SET);
 8000da8:	2201      	movs	r2, #1
 8000daa:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000dae:	4808      	ldr	r0, [pc, #32]	; (8000dd0 <one+0x58>)
 8000db0:	f000 ff0b 	bl	8001bca <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(PB5_GPIO_Port, PB5_Pin, SET);
 8000db4:	2201      	movs	r2, #1
 8000db6:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000dba:	4805      	ldr	r0, [pc, #20]	; (8000dd0 <one+0x58>)
 8000dbc:	f000 ff05 	bl	8001bca <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(PB6_GPIO_Port, PB6_Pin, SET);
 8000dc0:	2201      	movs	r2, #1
 8000dc2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000dc6:	4802      	ldr	r0, [pc, #8]	; (8000dd0 <one+0x58>)
 8000dc8:	f000 feff 	bl	8001bca <HAL_GPIO_WritePin>
	return;
 8000dcc:	bf00      	nop
}
 8000dce:	bd80      	pop	{r7, pc}
 8000dd0:	40010c00 	.word	0x40010c00

08000dd4 <two>:

void two()
{
 8000dd4:	b580      	push	{r7, lr}
 8000dd6:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(PB0_GPIO_Port, PB0_Pin, RESET);
 8000dd8:	2200      	movs	r2, #0
 8000dda:	2140      	movs	r1, #64	; 0x40
 8000ddc:	4813      	ldr	r0, [pc, #76]	; (8000e2c <two+0x58>)
 8000dde:	f000 fef4 	bl	8001bca <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(PB1_GPIO_Port, PB1_Pin, RESET);
 8000de2:	2200      	movs	r2, #0
 8000de4:	2180      	movs	r1, #128	; 0x80
 8000de6:	4811      	ldr	r0, [pc, #68]	; (8000e2c <two+0x58>)
 8000de8:	f000 feef 	bl	8001bca <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(PB2_GPIO_Port, PB2_Pin, SET);
 8000dec:	2201      	movs	r2, #1
 8000dee:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000df2:	480e      	ldr	r0, [pc, #56]	; (8000e2c <two+0x58>)
 8000df4:	f000 fee9 	bl	8001bca <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(PB3_GPIO_Port, PB3_Pin, RESET);
 8000df8:	2200      	movs	r2, #0
 8000dfa:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000dfe:	480b      	ldr	r0, [pc, #44]	; (8000e2c <two+0x58>)
 8000e00:	f000 fee3 	bl	8001bca <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(PB4_GPIO_Port, PB4_Pin, RESET);
 8000e04:	2200      	movs	r2, #0
 8000e06:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000e0a:	4808      	ldr	r0, [pc, #32]	; (8000e2c <two+0x58>)
 8000e0c:	f000 fedd 	bl	8001bca <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(PB5_GPIO_Port, PB5_Pin, SET);
 8000e10:	2201      	movs	r2, #1
 8000e12:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000e16:	4805      	ldr	r0, [pc, #20]	; (8000e2c <two+0x58>)
 8000e18:	f000 fed7 	bl	8001bca <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(PB6_GPIO_Port, PB6_Pin, RESET);
 8000e1c:	2200      	movs	r2, #0
 8000e1e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000e22:	4802      	ldr	r0, [pc, #8]	; (8000e2c <two+0x58>)
 8000e24:	f000 fed1 	bl	8001bca <HAL_GPIO_WritePin>
	return;
 8000e28:	bf00      	nop
}
 8000e2a:	bd80      	pop	{r7, pc}
 8000e2c:	40010c00 	.word	0x40010c00

08000e30 <three>:

void three()
{
 8000e30:	b580      	push	{r7, lr}
 8000e32:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(PB0_GPIO_Port, PB0_Pin, RESET);
 8000e34:	2200      	movs	r2, #0
 8000e36:	2140      	movs	r1, #64	; 0x40
 8000e38:	4813      	ldr	r0, [pc, #76]	; (8000e88 <three+0x58>)
 8000e3a:	f000 fec6 	bl	8001bca <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(PB1_GPIO_Port, PB1_Pin, RESET);
 8000e3e:	2200      	movs	r2, #0
 8000e40:	2180      	movs	r1, #128	; 0x80
 8000e42:	4811      	ldr	r0, [pc, #68]	; (8000e88 <three+0x58>)
 8000e44:	f000 fec1 	bl	8001bca <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(PB2_GPIO_Port, PB2_Pin, RESET);
 8000e48:	2200      	movs	r2, #0
 8000e4a:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000e4e:	480e      	ldr	r0, [pc, #56]	; (8000e88 <three+0x58>)
 8000e50:	f000 febb 	bl	8001bca <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(PB3_GPIO_Port, PB3_Pin, RESET);
 8000e54:	2200      	movs	r2, #0
 8000e56:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000e5a:	480b      	ldr	r0, [pc, #44]	; (8000e88 <three+0x58>)
 8000e5c:	f000 feb5 	bl	8001bca <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(PB4_GPIO_Port, PB4_Pin, SET);
 8000e60:	2201      	movs	r2, #1
 8000e62:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000e66:	4808      	ldr	r0, [pc, #32]	; (8000e88 <three+0x58>)
 8000e68:	f000 feaf 	bl	8001bca <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(PB5_GPIO_Port, PB5_Pin, SET);
 8000e6c:	2201      	movs	r2, #1
 8000e6e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000e72:	4805      	ldr	r0, [pc, #20]	; (8000e88 <three+0x58>)
 8000e74:	f000 fea9 	bl	8001bca <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(PB6_GPIO_Port, PB6_Pin, RESET);
 8000e78:	2200      	movs	r2, #0
 8000e7a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000e7e:	4802      	ldr	r0, [pc, #8]	; (8000e88 <three+0x58>)
 8000e80:	f000 fea3 	bl	8001bca <HAL_GPIO_WritePin>
	return;
 8000e84:	bf00      	nop
}
 8000e86:	bd80      	pop	{r7, pc}
 8000e88:	40010c00 	.word	0x40010c00

08000e8c <four>:

void four()
{
 8000e8c:	b580      	push	{r7, lr}
 8000e8e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(PB0_GPIO_Port, PB0_Pin, SET);
 8000e90:	2201      	movs	r2, #1
 8000e92:	2140      	movs	r1, #64	; 0x40
 8000e94:	4813      	ldr	r0, [pc, #76]	; (8000ee4 <four+0x58>)
 8000e96:	f000 fe98 	bl	8001bca <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(PB1_GPIO_Port, PB1_Pin, RESET);
 8000e9a:	2200      	movs	r2, #0
 8000e9c:	2180      	movs	r1, #128	; 0x80
 8000e9e:	4811      	ldr	r0, [pc, #68]	; (8000ee4 <four+0x58>)
 8000ea0:	f000 fe93 	bl	8001bca <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(PB2_GPIO_Port, PB2_Pin, RESET);
 8000ea4:	2200      	movs	r2, #0
 8000ea6:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000eaa:	480e      	ldr	r0, [pc, #56]	; (8000ee4 <four+0x58>)
 8000eac:	f000 fe8d 	bl	8001bca <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(PB3_GPIO_Port, PB3_Pin, SET);
 8000eb0:	2201      	movs	r2, #1
 8000eb2:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000eb6:	480b      	ldr	r0, [pc, #44]	; (8000ee4 <four+0x58>)
 8000eb8:	f000 fe87 	bl	8001bca <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(PB4_GPIO_Port, PB4_Pin, SET);
 8000ebc:	2201      	movs	r2, #1
 8000ebe:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000ec2:	4808      	ldr	r0, [pc, #32]	; (8000ee4 <four+0x58>)
 8000ec4:	f000 fe81 	bl	8001bca <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(PB5_GPIO_Port, PB5_Pin, RESET);
 8000ec8:	2200      	movs	r2, #0
 8000eca:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000ece:	4805      	ldr	r0, [pc, #20]	; (8000ee4 <four+0x58>)
 8000ed0:	f000 fe7b 	bl	8001bca <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(PB6_GPIO_Port, PB6_Pin, RESET);
 8000ed4:	2200      	movs	r2, #0
 8000ed6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000eda:	4802      	ldr	r0, [pc, #8]	; (8000ee4 <four+0x58>)
 8000edc:	f000 fe75 	bl	8001bca <HAL_GPIO_WritePin>
	return;
 8000ee0:	bf00      	nop
}
 8000ee2:	bd80      	pop	{r7, pc}
 8000ee4:	40010c00 	.word	0x40010c00

08000ee8 <five>:


void five()
{
 8000ee8:	b580      	push	{r7, lr}
 8000eea:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(PB0_GPIO_Port, PB0_Pin, RESET);
 8000eec:	2200      	movs	r2, #0
 8000eee:	2140      	movs	r1, #64	; 0x40
 8000ef0:	4813      	ldr	r0, [pc, #76]	; (8000f40 <five+0x58>)
 8000ef2:	f000 fe6a 	bl	8001bca <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(PB1_GPIO_Port, PB1_Pin, SET);
 8000ef6:	2201      	movs	r2, #1
 8000ef8:	2180      	movs	r1, #128	; 0x80
 8000efa:	4811      	ldr	r0, [pc, #68]	; (8000f40 <five+0x58>)
 8000efc:	f000 fe65 	bl	8001bca <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(PB2_GPIO_Port, PB2_Pin, RESET);
 8000f00:	2200      	movs	r2, #0
 8000f02:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000f06:	480e      	ldr	r0, [pc, #56]	; (8000f40 <five+0x58>)
 8000f08:	f000 fe5f 	bl	8001bca <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(PB3_GPIO_Port, PB3_Pin, RESET);
 8000f0c:	2200      	movs	r2, #0
 8000f0e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000f12:	480b      	ldr	r0, [pc, #44]	; (8000f40 <five+0x58>)
 8000f14:	f000 fe59 	bl	8001bca <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(PB4_GPIO_Port, PB4_Pin, SET);
 8000f18:	2201      	movs	r2, #1
 8000f1a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000f1e:	4808      	ldr	r0, [pc, #32]	; (8000f40 <five+0x58>)
 8000f20:	f000 fe53 	bl	8001bca <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(PB5_GPIO_Port, PB5_Pin, RESET);
 8000f24:	2200      	movs	r2, #0
 8000f26:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000f2a:	4805      	ldr	r0, [pc, #20]	; (8000f40 <five+0x58>)
 8000f2c:	f000 fe4d 	bl	8001bca <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(PB6_GPIO_Port, PB6_Pin, RESET);
 8000f30:	2200      	movs	r2, #0
 8000f32:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000f36:	4802      	ldr	r0, [pc, #8]	; (8000f40 <five+0x58>)
 8000f38:	f000 fe47 	bl	8001bca <HAL_GPIO_WritePin>
	return;
 8000f3c:	bf00      	nop
}
 8000f3e:	bd80      	pop	{r7, pc}
 8000f40:	40010c00 	.word	0x40010c00

08000f44 <six>:

void six()
{
 8000f44:	b580      	push	{r7, lr}
 8000f46:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(PB0_GPIO_Port, PB0_Pin, RESET);
 8000f48:	2200      	movs	r2, #0
 8000f4a:	2140      	movs	r1, #64	; 0x40
 8000f4c:	4813      	ldr	r0, [pc, #76]	; (8000f9c <six+0x58>)
 8000f4e:	f000 fe3c 	bl	8001bca <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(PB1_GPIO_Port, PB1_Pin, SET);
 8000f52:	2201      	movs	r2, #1
 8000f54:	2180      	movs	r1, #128	; 0x80
 8000f56:	4811      	ldr	r0, [pc, #68]	; (8000f9c <six+0x58>)
 8000f58:	f000 fe37 	bl	8001bca <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(PB2_GPIO_Port, PB2_Pin, RESET);
 8000f5c:	2200      	movs	r2, #0
 8000f5e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000f62:	480e      	ldr	r0, [pc, #56]	; (8000f9c <six+0x58>)
 8000f64:	f000 fe31 	bl	8001bca <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(PB3_GPIO_Port, PB3_Pin, RESET);
 8000f68:	2200      	movs	r2, #0
 8000f6a:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000f6e:	480b      	ldr	r0, [pc, #44]	; (8000f9c <six+0x58>)
 8000f70:	f000 fe2b 	bl	8001bca <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(PB4_GPIO_Port, PB4_Pin, RESET);
 8000f74:	2200      	movs	r2, #0
 8000f76:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000f7a:	4808      	ldr	r0, [pc, #32]	; (8000f9c <six+0x58>)
 8000f7c:	f000 fe25 	bl	8001bca <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(PB5_GPIO_Port, PB5_Pin, RESET);
 8000f80:	2200      	movs	r2, #0
 8000f82:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000f86:	4805      	ldr	r0, [pc, #20]	; (8000f9c <six+0x58>)
 8000f88:	f000 fe1f 	bl	8001bca <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(PB6_GPIO_Port, PB6_Pin, RESET);
 8000f8c:	2200      	movs	r2, #0
 8000f8e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000f92:	4802      	ldr	r0, [pc, #8]	; (8000f9c <six+0x58>)
 8000f94:	f000 fe19 	bl	8001bca <HAL_GPIO_WritePin>
	return;
 8000f98:	bf00      	nop
}
 8000f9a:	bd80      	pop	{r7, pc}
 8000f9c:	40010c00 	.word	0x40010c00

08000fa0 <seven>:

void seven()
{
 8000fa0:	b580      	push	{r7, lr}
 8000fa2:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(PB0_GPIO_Port, PB0_Pin, RESET);
 8000fa4:	2200      	movs	r2, #0
 8000fa6:	2140      	movs	r1, #64	; 0x40
 8000fa8:	4813      	ldr	r0, [pc, #76]	; (8000ff8 <seven+0x58>)
 8000faa:	f000 fe0e 	bl	8001bca <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(PB1_GPIO_Port, PB1_Pin, RESET);
 8000fae:	2200      	movs	r2, #0
 8000fb0:	2180      	movs	r1, #128	; 0x80
 8000fb2:	4811      	ldr	r0, [pc, #68]	; (8000ff8 <seven+0x58>)
 8000fb4:	f000 fe09 	bl	8001bca <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(PB2_GPIO_Port, PB2_Pin, RESET);
 8000fb8:	2200      	movs	r2, #0
 8000fba:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000fbe:	480e      	ldr	r0, [pc, #56]	; (8000ff8 <seven+0x58>)
 8000fc0:	f000 fe03 	bl	8001bca <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(PB3_GPIO_Port, PB3_Pin, SET);
 8000fc4:	2201      	movs	r2, #1
 8000fc6:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000fca:	480b      	ldr	r0, [pc, #44]	; (8000ff8 <seven+0x58>)
 8000fcc:	f000 fdfd 	bl	8001bca <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(PB4_GPIO_Port, PB4_Pin, SET);
 8000fd0:	2201      	movs	r2, #1
 8000fd2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000fd6:	4808      	ldr	r0, [pc, #32]	; (8000ff8 <seven+0x58>)
 8000fd8:	f000 fdf7 	bl	8001bca <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(PB5_GPIO_Port, PB5_Pin, SET);
 8000fdc:	2201      	movs	r2, #1
 8000fde:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000fe2:	4805      	ldr	r0, [pc, #20]	; (8000ff8 <seven+0x58>)
 8000fe4:	f000 fdf1 	bl	8001bca <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(PB6_GPIO_Port, PB6_Pin, SET);
 8000fe8:	2201      	movs	r2, #1
 8000fea:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000fee:	4802      	ldr	r0, [pc, #8]	; (8000ff8 <seven+0x58>)
 8000ff0:	f000 fdeb 	bl	8001bca <HAL_GPIO_WritePin>
	return;
 8000ff4:	bf00      	nop
}
 8000ff6:	bd80      	pop	{r7, pc}
 8000ff8:	40010c00 	.word	0x40010c00

08000ffc <eight>:


void eight()
{
 8000ffc:	b580      	push	{r7, lr}
 8000ffe:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(PB0_GPIO_Port, PB0_Pin, RESET);
 8001000:	2200      	movs	r2, #0
 8001002:	2140      	movs	r1, #64	; 0x40
 8001004:	4813      	ldr	r0, [pc, #76]	; (8001054 <eight+0x58>)
 8001006:	f000 fde0 	bl	8001bca <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(PB1_GPIO_Port, PB1_Pin, RESET);
 800100a:	2200      	movs	r2, #0
 800100c:	2180      	movs	r1, #128	; 0x80
 800100e:	4811      	ldr	r0, [pc, #68]	; (8001054 <eight+0x58>)
 8001010:	f000 fddb 	bl	8001bca <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(PB2_GPIO_Port, PB2_Pin, RESET);
 8001014:	2200      	movs	r2, #0
 8001016:	f44f 7180 	mov.w	r1, #256	; 0x100
 800101a:	480e      	ldr	r0, [pc, #56]	; (8001054 <eight+0x58>)
 800101c:	f000 fdd5 	bl	8001bca <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(PB3_GPIO_Port, PB3_Pin, RESET);
 8001020:	2200      	movs	r2, #0
 8001022:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001026:	480b      	ldr	r0, [pc, #44]	; (8001054 <eight+0x58>)
 8001028:	f000 fdcf 	bl	8001bca <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(PB4_GPIO_Port, PB4_Pin, RESET);
 800102c:	2200      	movs	r2, #0
 800102e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001032:	4808      	ldr	r0, [pc, #32]	; (8001054 <eight+0x58>)
 8001034:	f000 fdc9 	bl	8001bca <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(PB5_GPIO_Port, PB5_Pin, RESET);
 8001038:	2200      	movs	r2, #0
 800103a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800103e:	4805      	ldr	r0, [pc, #20]	; (8001054 <eight+0x58>)
 8001040:	f000 fdc3 	bl	8001bca <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(PB6_GPIO_Port, PB6_Pin, RESET);
 8001044:	2200      	movs	r2, #0
 8001046:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800104a:	4802      	ldr	r0, [pc, #8]	; (8001054 <eight+0x58>)
 800104c:	f000 fdbd 	bl	8001bca <HAL_GPIO_WritePin>
	return;
 8001050:	bf00      	nop
}
 8001052:	bd80      	pop	{r7, pc}
 8001054:	40010c00 	.word	0x40010c00

08001058 <nine>:

void nine()
{
 8001058:	b580      	push	{r7, lr}
 800105a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(PB0_GPIO_Port, PB0_Pin, RESET);
 800105c:	2200      	movs	r2, #0
 800105e:	2140      	movs	r1, #64	; 0x40
 8001060:	4813      	ldr	r0, [pc, #76]	; (80010b0 <nine+0x58>)
 8001062:	f000 fdb2 	bl	8001bca <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(PB1_GPIO_Port, PB1_Pin, RESET);
 8001066:	2200      	movs	r2, #0
 8001068:	2180      	movs	r1, #128	; 0x80
 800106a:	4811      	ldr	r0, [pc, #68]	; (80010b0 <nine+0x58>)
 800106c:	f000 fdad 	bl	8001bca <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(PB2_GPIO_Port, PB2_Pin, RESET);
 8001070:	2200      	movs	r2, #0
 8001072:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001076:	480e      	ldr	r0, [pc, #56]	; (80010b0 <nine+0x58>)
 8001078:	f000 fda7 	bl	8001bca <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(PB3_GPIO_Port, PB3_Pin, RESET);
 800107c:	2200      	movs	r2, #0
 800107e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001082:	480b      	ldr	r0, [pc, #44]	; (80010b0 <nine+0x58>)
 8001084:	f000 fda1 	bl	8001bca <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(PB4_GPIO_Port, PB4_Pin, SET);
 8001088:	2201      	movs	r2, #1
 800108a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800108e:	4808      	ldr	r0, [pc, #32]	; (80010b0 <nine+0x58>)
 8001090:	f000 fd9b 	bl	8001bca <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(PB5_GPIO_Port, PB5_Pin, RESET);
 8001094:	2200      	movs	r2, #0
 8001096:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800109a:	4805      	ldr	r0, [pc, #20]	; (80010b0 <nine+0x58>)
 800109c:	f000 fd95 	bl	8001bca <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(PB6_GPIO_Port, PB6_Pin, RESET);
 80010a0:	2200      	movs	r2, #0
 80010a2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80010a6:	4802      	ldr	r0, [pc, #8]	; (80010b0 <nine+0x58>)
 80010a8:	f000 fd8f 	bl	8001bca <HAL_GPIO_WritePin>
	return;
 80010ac:	bf00      	nop
}
 80010ae:	bd80      	pop	{r7, pc}
 80010b0:	40010c00 	.word	0x40010c00

080010b4 <display7SEG1>:


//display7SEG
void display7SEG1(int num){
 80010b4:	b580      	push	{r7, lr}
 80010b6:	b082      	sub	sp, #8
 80010b8:	af00      	add	r7, sp, #0
 80010ba:	6078      	str	r0, [r7, #4]
	switch (num)
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	2b09      	cmp	r3, #9
 80010c0:	d834      	bhi.n	800112c <display7SEG1+0x78>
 80010c2:	a201      	add	r2, pc, #4	; (adr r2, 80010c8 <display7SEG1+0x14>)
 80010c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80010c8:	080010f1 	.word	0x080010f1
 80010cc:	080010f7 	.word	0x080010f7
 80010d0:	080010fd 	.word	0x080010fd
 80010d4:	08001103 	.word	0x08001103
 80010d8:	08001109 	.word	0x08001109
 80010dc:	0800110f 	.word	0x0800110f
 80010e0:	08001115 	.word	0x08001115
 80010e4:	0800111b 	.word	0x0800111b
 80010e8:	08001121 	.word	0x08001121
 80010ec:	08001127 	.word	0x08001127
		{
		case 0:
			zero();
 80010f0:	f7ff fe14 	bl	8000d1c <zero>
				break;
 80010f4:	e01b      	b.n	800112e <display7SEG1+0x7a>
		case 1:
			one();
 80010f6:	f7ff fe3f 	bl	8000d78 <one>
				break;
 80010fa:	e018      	b.n	800112e <display7SEG1+0x7a>
		case 2:
			two();
 80010fc:	f7ff fe6a 	bl	8000dd4 <two>
				break;
 8001100:	e015      	b.n	800112e <display7SEG1+0x7a>
		case 3:
			three();
 8001102:	f7ff fe95 	bl	8000e30 <three>
				break;
 8001106:	e012      	b.n	800112e <display7SEG1+0x7a>
		case 4:
			four();
 8001108:	f7ff fec0 	bl	8000e8c <four>
				break;
 800110c:	e00f      	b.n	800112e <display7SEG1+0x7a>
		case 5:
			five();
 800110e:	f7ff feeb 	bl	8000ee8 <five>
				break;
 8001112:	e00c      	b.n	800112e <display7SEG1+0x7a>
		case 6:
			six();
 8001114:	f7ff ff16 	bl	8000f44 <six>
				break;
 8001118:	e009      	b.n	800112e <display7SEG1+0x7a>
		case 7:
			seven();
 800111a:	f7ff ff41 	bl	8000fa0 <seven>
				break;
 800111e:	e006      	b.n	800112e <display7SEG1+0x7a>
		case 8:
			eight();
 8001120:	f7ff ff6c 	bl	8000ffc <eight>
				break;
 8001124:	e003      	b.n	800112e <display7SEG1+0x7a>
		case 9:
			nine();
 8001126:	f7ff ff97 	bl	8001058 <nine>
				break;
 800112a:	e000      	b.n	800112e <display7SEG1+0x7a>
		default:
				break;
 800112c:	bf00      	nop
		}
		return;
 800112e:	bf00      	nop
	}
 8001130:	3708      	adds	r7, #8
 8001132:	46bd      	mov	sp, r7
 8001134:	bd80      	pop	{r7, pc}
 8001136:	bf00      	nop

08001138 <turnLEDOFF>:


//Turn ALL LED
void turnLEDOFF(void){
 8001138:	b580      	push	{r7, lr}
 800113a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin, 1);//tat den led 2
 800113c:	2201      	movs	r2, #1
 800113e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001142:	480b      	ldr	r0, [pc, #44]	; (8001170 <turnLEDOFF+0x38>)
 8001144:	f000 fd41 	bl	8001bca <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(EN2_GPIO_Port, EN2_Pin, 1);//tat den led 3
 8001148:	2201      	movs	r2, #1
 800114a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800114e:	4808      	ldr	r0, [pc, #32]	; (8001170 <turnLEDOFF+0x38>)
 8001150:	f000 fd3b 	bl	8001bca <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(EN3_GPIO_Port, EN3_Pin, 1);//tat den led 4
 8001154:	2201      	movs	r2, #1
 8001156:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800115a:	4805      	ldr	r0, [pc, #20]	; (8001170 <turnLEDOFF+0x38>)
 800115c:	f000 fd35 	bl	8001bca <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(EN0_GPIO_Port, EN0_Pin, 1);//tat den led 1
 8001160:	2201      	movs	r2, #1
 8001162:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001166:	4802      	ldr	r0, [pc, #8]	; (8001170 <turnLEDOFF+0x38>)
 8001168:	f000 fd2f 	bl	8001bca <HAL_GPIO_WritePin>

}
 800116c:	bf00      	nop
 800116e:	bd80      	pop	{r7, pc}
 8001170:	40010800 	.word	0x40010800

08001174 <SEG7_NORMAL_MODE>:



//change_7SEG_status in NORMAL_MODE

void SEG7_NORMAL_MODE(int seg){
 8001174:	b580      	push	{r7, lr}
 8001176:	b082      	sub	sp, #8
 8001178:	af00      	add	r7, sp, #0
 800117a:	6078      	str	r0, [r7, #4]
	switch(seg){
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	2b03      	cmp	r3, #3
 8001180:	d842      	bhi.n	8001208 <SEG7_NORMAL_MODE+0x94>
 8001182:	a201      	add	r2, pc, #4	; (adr r2, 8001188 <SEG7_NORMAL_MODE+0x14>)
 8001184:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001188:	08001199 	.word	0x08001199
 800118c:	080011b5 	.word	0x080011b5
 8001190:	080011d1 	.word	0x080011d1
 8001194:	080011ed 	.word	0x080011ed
	case 0:
		turnLEDOFF();
 8001198:	f7ff ffce 	bl	8001138 <turnLEDOFF>
		display7SEG1(seg_index1);
 800119c:	4b1d      	ldr	r3, [pc, #116]	; (8001214 <SEG7_NORMAL_MODE+0xa0>)
 800119e:	681b      	ldr	r3, [r3, #0]
 80011a0:	4618      	mov	r0, r3
 80011a2:	f7ff ff87 	bl	80010b4 <display7SEG1>
		HAL_GPIO_WritePin(EN0_GPIO_Port, EN0_Pin, 0);
 80011a6:	2200      	movs	r2, #0
 80011a8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80011ac:	481a      	ldr	r0, [pc, #104]	; (8001218 <SEG7_NORMAL_MODE+0xa4>)
 80011ae:	f000 fd0c 	bl	8001bca <HAL_GPIO_WritePin>
//		clockRun();
		break;
 80011b2:	e02a      	b.n	800120a <SEG7_NORMAL_MODE+0x96>
	case 1:
		turnLEDOFF();
 80011b4:	f7ff ffc0 	bl	8001138 <turnLEDOFF>
		display7SEG1(seg_index2);
 80011b8:	4b18      	ldr	r3, [pc, #96]	; (800121c <SEG7_NORMAL_MODE+0xa8>)
 80011ba:	681b      	ldr	r3, [r3, #0]
 80011bc:	4618      	mov	r0, r3
 80011be:	f7ff ff79 	bl	80010b4 <display7SEG1>
		HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin, 0);
 80011c2:	2200      	movs	r2, #0
 80011c4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80011c8:	4813      	ldr	r0, [pc, #76]	; (8001218 <SEG7_NORMAL_MODE+0xa4>)
 80011ca:	f000 fcfe 	bl	8001bca <HAL_GPIO_WritePin>
		break;
 80011ce:	e01c      	b.n	800120a <SEG7_NORMAL_MODE+0x96>
	case 2:
		turnLEDOFF();
 80011d0:	f7ff ffb2 	bl	8001138 <turnLEDOFF>
		display7SEG1(seg_index3);
 80011d4:	4b12      	ldr	r3, [pc, #72]	; (8001220 <SEG7_NORMAL_MODE+0xac>)
 80011d6:	681b      	ldr	r3, [r3, #0]
 80011d8:	4618      	mov	r0, r3
 80011da:	f7ff ff6b 	bl	80010b4 <display7SEG1>
		HAL_GPIO_WritePin(EN2_GPIO_Port, EN2_Pin, 0);
 80011de:	2200      	movs	r2, #0
 80011e0:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80011e4:	480c      	ldr	r0, [pc, #48]	; (8001218 <SEG7_NORMAL_MODE+0xa4>)
 80011e6:	f000 fcf0 	bl	8001bca <HAL_GPIO_WritePin>
		break;
 80011ea:	e00e      	b.n	800120a <SEG7_NORMAL_MODE+0x96>
	case 3:
		turnLEDOFF();
 80011ec:	f7ff ffa4 	bl	8001138 <turnLEDOFF>
		display7SEG1(seg_index4);
 80011f0:	4b0c      	ldr	r3, [pc, #48]	; (8001224 <SEG7_NORMAL_MODE+0xb0>)
 80011f2:	681b      	ldr	r3, [r3, #0]
 80011f4:	4618      	mov	r0, r3
 80011f6:	f7ff ff5d 	bl	80010b4 <display7SEG1>
		HAL_GPIO_WritePin(EN3_GPIO_Port, EN3_Pin, 0);
 80011fa:	2200      	movs	r2, #0
 80011fc:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001200:	4805      	ldr	r0, [pc, #20]	; (8001218 <SEG7_NORMAL_MODE+0xa4>)
 8001202:	f000 fce2 	bl	8001bca <HAL_GPIO_WritePin>
		break;
 8001206:	e000      	b.n	800120a <SEG7_NORMAL_MODE+0x96>
	default:
		break;
 8001208:	bf00      	nop
	}
	return;
 800120a:	bf00      	nop
}
 800120c:	3708      	adds	r7, #8
 800120e:	46bd      	mov	sp, r7
 8001210:	bd80      	pop	{r7, pc}
 8001212:	bf00      	nop
 8001214:	20000120 	.word	0x20000120
 8001218:	40010800 	.word	0x40010800
 800121c:	20000124 	.word	0x20000124
 8001220:	20000128 	.word	0x20000128
 8001224:	2000012c 	.word	0x2000012c

08001228 <to_do_7SEG>:
//		break;
//	}
//	return;
//}

void to_do_7SEG(){
 8001228:	b580      	push	{r7, lr}
 800122a:	af00      	add	r7, sp, #0
	if(timer_flag3 == 1){
 800122c:	4b0c      	ldr	r3, [pc, #48]	; (8001260 <to_do_7SEG+0x38>)
 800122e:	681b      	ldr	r3, [r3, #0]
 8001230:	2b01      	cmp	r3, #1
 8001232:	d113      	bne.n	800125c <to_do_7SEG+0x34>
	  setTimer3(25);
 8001234:	2019      	movs	r0, #25
 8001236:	f000 f83f 	bl	80012b8 <setTimer3>
	  SEG7_NORMAL_MODE(seg);
 800123a:	4b0a      	ldr	r3, [pc, #40]	; (8001264 <to_do_7SEG+0x3c>)
 800123c:	681b      	ldr	r3, [r3, #0]
 800123e:	4618      	mov	r0, r3
 8001240:	f7ff ff98 	bl	8001174 <SEG7_NORMAL_MODE>
	  seg = (seg+1)%4;
 8001244:	4b07      	ldr	r3, [pc, #28]	; (8001264 <to_do_7SEG+0x3c>)
 8001246:	681b      	ldr	r3, [r3, #0]
 8001248:	3301      	adds	r3, #1
 800124a:	425a      	negs	r2, r3
 800124c:	f003 0303 	and.w	r3, r3, #3
 8001250:	f002 0203 	and.w	r2, r2, #3
 8001254:	bf58      	it	pl
 8001256:	4253      	negpl	r3, r2
 8001258:	4a02      	ldr	r2, [pc, #8]	; (8001264 <to_do_7SEG+0x3c>)
 800125a:	6013      	str	r3, [r2, #0]
	}
}
 800125c:	bf00      	nop
 800125e:	bd80      	pop	{r7, pc}
 8001260:	20000148 	.word	0x20000148
 8001264:	20000130 	.word	0x20000130

08001268 <setTimer1>:
int timer_flag2;
int timer_flag3;


//setTimer for Traffic light ngang
void setTimer1(int duration1){
 8001268:	b480      	push	{r7}
 800126a:	b083      	sub	sp, #12
 800126c:	af00      	add	r7, sp, #0
 800126e:	6078      	str	r0, [r7, #4]
	counter1 = duration1;
 8001270:	4a05      	ldr	r2, [pc, #20]	; (8001288 <setTimer1+0x20>)
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	6013      	str	r3, [r2, #0]
	timer_flag1 = 0;
 8001276:	4b05      	ldr	r3, [pc, #20]	; (800128c <setTimer1+0x24>)
 8001278:	2200      	movs	r2, #0
 800127a:	601a      	str	r2, [r3, #0]
}
 800127c:	bf00      	nop
 800127e:	370c      	adds	r7, #12
 8001280:	46bd      	mov	sp, r7
 8001282:	bc80      	pop	{r7}
 8001284:	4770      	bx	lr
 8001286:	bf00      	nop
 8001288:	20000134 	.word	0x20000134
 800128c:	20000140 	.word	0x20000140

08001290 <setTimer2>:

//setTimer for Traffic light ngang
void setTimer2(int duration2){
 8001290:	b480      	push	{r7}
 8001292:	b083      	sub	sp, #12
 8001294:	af00      	add	r7, sp, #0
 8001296:	6078      	str	r0, [r7, #4]
	counter2 = duration2;
 8001298:	4a05      	ldr	r2, [pc, #20]	; (80012b0 <setTimer2+0x20>)
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	6013      	str	r3, [r2, #0]
	timer_flag2 = 0;
 800129e:	4b05      	ldr	r3, [pc, #20]	; (80012b4 <setTimer2+0x24>)
 80012a0:	2200      	movs	r2, #0
 80012a2:	601a      	str	r2, [r3, #0]
}
 80012a4:	bf00      	nop
 80012a6:	370c      	adds	r7, #12
 80012a8:	46bd      	mov	sp, r7
 80012aa:	bc80      	pop	{r7}
 80012ac:	4770      	bx	lr
 80012ae:	bf00      	nop
 80012b0:	20000138 	.word	0x20000138
 80012b4:	20000144 	.word	0x20000144

080012b8 <setTimer3>:

//setTimer for 7SEG
void setTimer3(int duration3){
 80012b8:	b480      	push	{r7}
 80012ba:	b083      	sub	sp, #12
 80012bc:	af00      	add	r7, sp, #0
 80012be:	6078      	str	r0, [r7, #4]
	counter3 = duration3;
 80012c0:	4a05      	ldr	r2, [pc, #20]	; (80012d8 <setTimer3+0x20>)
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	6013      	str	r3, [r2, #0]
	timer_flag3 = 0;
 80012c6:	4b05      	ldr	r3, [pc, #20]	; (80012dc <setTimer3+0x24>)
 80012c8:	2200      	movs	r2, #0
 80012ca:	601a      	str	r2, [r3, #0]
}
 80012cc:	bf00      	nop
 80012ce:	370c      	adds	r7, #12
 80012d0:	46bd      	mov	sp, r7
 80012d2:	bc80      	pop	{r7}
 80012d4:	4770      	bx	lr
 80012d6:	bf00      	nop
 80012d8:	2000013c 	.word	0x2000013c
 80012dc:	20000148 	.word	0x20000148

080012e0 <setTimer_for_RED_blink>:


//Led blink in change mode
int RED_BLINK_counter = 0;
int RED_BLINK_flag = 0;
void setTimer_for_RED_blink(int duration){
 80012e0:	b480      	push	{r7}
 80012e2:	b083      	sub	sp, #12
 80012e4:	af00      	add	r7, sp, #0
 80012e6:	6078      	str	r0, [r7, #4]
	RED_BLINK_counter = duration;
 80012e8:	4a05      	ldr	r2, [pc, #20]	; (8001300 <setTimer_for_RED_blink+0x20>)
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	6013      	str	r3, [r2, #0]
	RED_BLINK_flag = 0;
 80012ee:	4b05      	ldr	r3, [pc, #20]	; (8001304 <setTimer_for_RED_blink+0x24>)
 80012f0:	2200      	movs	r2, #0
 80012f2:	601a      	str	r2, [r3, #0]
}
 80012f4:	bf00      	nop
 80012f6:	370c      	adds	r7, #12
 80012f8:	46bd      	mov	sp, r7
 80012fa:	bc80      	pop	{r7}
 80012fc:	4770      	bx	lr
 80012fe:	bf00      	nop
 8001300:	2000014c 	.word	0x2000014c
 8001304:	20000150 	.word	0x20000150

08001308 <setTimer_for_GREEN_blink>:

int GREEN_BLINK_counter = 0;
int GREEN_BLINK_flag = 0;
void setTimer_for_GREEN_blink(int duration){
 8001308:	b480      	push	{r7}
 800130a:	b083      	sub	sp, #12
 800130c:	af00      	add	r7, sp, #0
 800130e:	6078      	str	r0, [r7, #4]
	GREEN_BLINK_counter = duration;
 8001310:	4a05      	ldr	r2, [pc, #20]	; (8001328 <setTimer_for_GREEN_blink+0x20>)
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	6013      	str	r3, [r2, #0]
	GREEN_BLINK_flag = 0;
 8001316:	4b05      	ldr	r3, [pc, #20]	; (800132c <setTimer_for_GREEN_blink+0x24>)
 8001318:	2200      	movs	r2, #0
 800131a:	601a      	str	r2, [r3, #0]
}
 800131c:	bf00      	nop
 800131e:	370c      	adds	r7, #12
 8001320:	46bd      	mov	sp, r7
 8001322:	bc80      	pop	{r7}
 8001324:	4770      	bx	lr
 8001326:	bf00      	nop
 8001328:	20000154 	.word	0x20000154
 800132c:	20000158 	.word	0x20000158

08001330 <setTimer_for_YELLOW_blink>:

int YELLOW_BLINK_counter = 0;
int YELLOW_BLINK_flag = 0;
void setTimer_for_YELLOW_blink(int duration){
 8001330:	b480      	push	{r7}
 8001332:	b083      	sub	sp, #12
 8001334:	af00      	add	r7, sp, #0
 8001336:	6078      	str	r0, [r7, #4]
	YELLOW_BLINK_counter = duration;
 8001338:	4a05      	ldr	r2, [pc, #20]	; (8001350 <setTimer_for_YELLOW_blink+0x20>)
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	6013      	str	r3, [r2, #0]
	YELLOW_BLINK_flag = 0;
 800133e:	4b05      	ldr	r3, [pc, #20]	; (8001354 <setTimer_for_YELLOW_blink+0x24>)
 8001340:	2200      	movs	r2, #0
 8001342:	601a      	str	r2, [r3, #0]
}
 8001344:	bf00      	nop
 8001346:	370c      	adds	r7, #12
 8001348:	46bd      	mov	sp, r7
 800134a:	bc80      	pop	{r7}
 800134c:	4770      	bx	lr
 800134e:	bf00      	nop
 8001350:	2000015c 	.word	0x2000015c
 8001354:	20000160 	.word	0x20000160

08001358 <timerRun>:

//TimerRun for system
void timerRun(){
 8001358:	b480      	push	{r7}
 800135a:	af00      	add	r7, sp, #0
	if(counter1 > 0){
 800135c:	4b31      	ldr	r3, [pc, #196]	; (8001424 <timerRun+0xcc>)
 800135e:	681b      	ldr	r3, [r3, #0]
 8001360:	2b00      	cmp	r3, #0
 8001362:	dd04      	ble.n	800136e <timerRun+0x16>
		counter1--;
 8001364:	4b2f      	ldr	r3, [pc, #188]	; (8001424 <timerRun+0xcc>)
 8001366:	681b      	ldr	r3, [r3, #0]
 8001368:	3b01      	subs	r3, #1
 800136a:	4a2e      	ldr	r2, [pc, #184]	; (8001424 <timerRun+0xcc>)
 800136c:	6013      	str	r3, [r2, #0]
	}
	if(counter1 <= 0){
 800136e:	4b2d      	ldr	r3, [pc, #180]	; (8001424 <timerRun+0xcc>)
 8001370:	681b      	ldr	r3, [r3, #0]
 8001372:	2b00      	cmp	r3, #0
 8001374:	dc02      	bgt.n	800137c <timerRun+0x24>
		timer_flag1 = 1;
 8001376:	4b2c      	ldr	r3, [pc, #176]	; (8001428 <timerRun+0xd0>)
 8001378:	2201      	movs	r2, #1
 800137a:	601a      	str	r2, [r3, #0]
	}
	if(counter2 > 0){
 800137c:	4b2b      	ldr	r3, [pc, #172]	; (800142c <timerRun+0xd4>)
 800137e:	681b      	ldr	r3, [r3, #0]
 8001380:	2b00      	cmp	r3, #0
 8001382:	dd04      	ble.n	800138e <timerRun+0x36>
		counter2--;
 8001384:	4b29      	ldr	r3, [pc, #164]	; (800142c <timerRun+0xd4>)
 8001386:	681b      	ldr	r3, [r3, #0]
 8001388:	3b01      	subs	r3, #1
 800138a:	4a28      	ldr	r2, [pc, #160]	; (800142c <timerRun+0xd4>)
 800138c:	6013      	str	r3, [r2, #0]
	}
	if(counter2 <= 0){
 800138e:	4b27      	ldr	r3, [pc, #156]	; (800142c <timerRun+0xd4>)
 8001390:	681b      	ldr	r3, [r3, #0]
 8001392:	2b00      	cmp	r3, #0
 8001394:	dc02      	bgt.n	800139c <timerRun+0x44>
		timer_flag2 = 1;
 8001396:	4b26      	ldr	r3, [pc, #152]	; (8001430 <timerRun+0xd8>)
 8001398:	2201      	movs	r2, #1
 800139a:	601a      	str	r2, [r3, #0]
	}
	if(counter3 > 0){
 800139c:	4b25      	ldr	r3, [pc, #148]	; (8001434 <timerRun+0xdc>)
 800139e:	681b      	ldr	r3, [r3, #0]
 80013a0:	2b00      	cmp	r3, #0
 80013a2:	dd04      	ble.n	80013ae <timerRun+0x56>
		counter3--;
 80013a4:	4b23      	ldr	r3, [pc, #140]	; (8001434 <timerRun+0xdc>)
 80013a6:	681b      	ldr	r3, [r3, #0]
 80013a8:	3b01      	subs	r3, #1
 80013aa:	4a22      	ldr	r2, [pc, #136]	; (8001434 <timerRun+0xdc>)
 80013ac:	6013      	str	r3, [r2, #0]
	}
	if(counter3 <= 0){
 80013ae:	4b21      	ldr	r3, [pc, #132]	; (8001434 <timerRun+0xdc>)
 80013b0:	681b      	ldr	r3, [r3, #0]
 80013b2:	2b00      	cmp	r3, #0
 80013b4:	dc02      	bgt.n	80013bc <timerRun+0x64>
		timer_flag3 = 1;
 80013b6:	4b20      	ldr	r3, [pc, #128]	; (8001438 <timerRun+0xe0>)
 80013b8:	2201      	movs	r2, #1
 80013ba:	601a      	str	r2, [r3, #0]
	}
	if(RED_BLINK_counter > 0){
 80013bc:	4b1f      	ldr	r3, [pc, #124]	; (800143c <timerRun+0xe4>)
 80013be:	681b      	ldr	r3, [r3, #0]
 80013c0:	2b00      	cmp	r3, #0
 80013c2:	dd04      	ble.n	80013ce <timerRun+0x76>
		RED_BLINK_counter--;
 80013c4:	4b1d      	ldr	r3, [pc, #116]	; (800143c <timerRun+0xe4>)
 80013c6:	681b      	ldr	r3, [r3, #0]
 80013c8:	3b01      	subs	r3, #1
 80013ca:	4a1c      	ldr	r2, [pc, #112]	; (800143c <timerRun+0xe4>)
 80013cc:	6013      	str	r3, [r2, #0]
	}
	if(RED_BLINK_counter <= 0){
 80013ce:	4b1b      	ldr	r3, [pc, #108]	; (800143c <timerRun+0xe4>)
 80013d0:	681b      	ldr	r3, [r3, #0]
 80013d2:	2b00      	cmp	r3, #0
 80013d4:	dc02      	bgt.n	80013dc <timerRun+0x84>
		RED_BLINK_flag = 1;
 80013d6:	4b1a      	ldr	r3, [pc, #104]	; (8001440 <timerRun+0xe8>)
 80013d8:	2201      	movs	r2, #1
 80013da:	601a      	str	r2, [r3, #0]
	}
	if(YELLOW_BLINK_counter > 0){
 80013dc:	4b19      	ldr	r3, [pc, #100]	; (8001444 <timerRun+0xec>)
 80013de:	681b      	ldr	r3, [r3, #0]
 80013e0:	2b00      	cmp	r3, #0
 80013e2:	dd04      	ble.n	80013ee <timerRun+0x96>
		YELLOW_BLINK_counter--;
 80013e4:	4b17      	ldr	r3, [pc, #92]	; (8001444 <timerRun+0xec>)
 80013e6:	681b      	ldr	r3, [r3, #0]
 80013e8:	3b01      	subs	r3, #1
 80013ea:	4a16      	ldr	r2, [pc, #88]	; (8001444 <timerRun+0xec>)
 80013ec:	6013      	str	r3, [r2, #0]
	}
	if(YELLOW_BLINK_counter <= 0){
 80013ee:	4b15      	ldr	r3, [pc, #84]	; (8001444 <timerRun+0xec>)
 80013f0:	681b      	ldr	r3, [r3, #0]
 80013f2:	2b00      	cmp	r3, #0
 80013f4:	dc02      	bgt.n	80013fc <timerRun+0xa4>
		YELLOW_BLINK_flag = 1;
 80013f6:	4b14      	ldr	r3, [pc, #80]	; (8001448 <timerRun+0xf0>)
 80013f8:	2201      	movs	r2, #1
 80013fa:	601a      	str	r2, [r3, #0]
	}
	if(GREEN_BLINK_counter > 0){
 80013fc:	4b13      	ldr	r3, [pc, #76]	; (800144c <timerRun+0xf4>)
 80013fe:	681b      	ldr	r3, [r3, #0]
 8001400:	2b00      	cmp	r3, #0
 8001402:	dd04      	ble.n	800140e <timerRun+0xb6>
		GREEN_BLINK_counter--;
 8001404:	4b11      	ldr	r3, [pc, #68]	; (800144c <timerRun+0xf4>)
 8001406:	681b      	ldr	r3, [r3, #0]
 8001408:	3b01      	subs	r3, #1
 800140a:	4a10      	ldr	r2, [pc, #64]	; (800144c <timerRun+0xf4>)
 800140c:	6013      	str	r3, [r2, #0]
	}
	if(GREEN_BLINK_counter <= 0){
 800140e:	4b0f      	ldr	r3, [pc, #60]	; (800144c <timerRun+0xf4>)
 8001410:	681b      	ldr	r3, [r3, #0]
 8001412:	2b00      	cmp	r3, #0
 8001414:	dc02      	bgt.n	800141c <timerRun+0xc4>
		GREEN_BLINK_flag = 1;
 8001416:	4b0e      	ldr	r3, [pc, #56]	; (8001450 <timerRun+0xf8>)
 8001418:	2201      	movs	r2, #1
 800141a:	601a      	str	r2, [r3, #0]
	}
}
 800141c:	bf00      	nop
 800141e:	46bd      	mov	sp, r7
 8001420:	bc80      	pop	{r7}
 8001422:	4770      	bx	lr
 8001424:	20000134 	.word	0x20000134
 8001428:	20000140 	.word	0x20000140
 800142c:	20000138 	.word	0x20000138
 8001430:	20000144 	.word	0x20000144
 8001434:	2000013c 	.word	0x2000013c
 8001438:	20000148 	.word	0x20000148
 800143c:	2000014c 	.word	0x2000014c
 8001440:	20000150 	.word	0x20000150
 8001444:	2000015c 	.word	0x2000015c
 8001448:	20000160 	.word	0x20000160
 800144c:	20000154 	.word	0x20000154
 8001450:	20000158 	.word	0x20000158

08001454 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001454:	b480      	push	{r7}
 8001456:	b083      	sub	sp, #12
 8001458:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800145a:	4b0e      	ldr	r3, [pc, #56]	; (8001494 <HAL_MspInit+0x40>)
 800145c:	699b      	ldr	r3, [r3, #24]
 800145e:	4a0d      	ldr	r2, [pc, #52]	; (8001494 <HAL_MspInit+0x40>)
 8001460:	f043 0301 	orr.w	r3, r3, #1
 8001464:	6193      	str	r3, [r2, #24]
 8001466:	4b0b      	ldr	r3, [pc, #44]	; (8001494 <HAL_MspInit+0x40>)
 8001468:	699b      	ldr	r3, [r3, #24]
 800146a:	f003 0301 	and.w	r3, r3, #1
 800146e:	607b      	str	r3, [r7, #4]
 8001470:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001472:	4b08      	ldr	r3, [pc, #32]	; (8001494 <HAL_MspInit+0x40>)
 8001474:	69db      	ldr	r3, [r3, #28]
 8001476:	4a07      	ldr	r2, [pc, #28]	; (8001494 <HAL_MspInit+0x40>)
 8001478:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800147c:	61d3      	str	r3, [r2, #28]
 800147e:	4b05      	ldr	r3, [pc, #20]	; (8001494 <HAL_MspInit+0x40>)
 8001480:	69db      	ldr	r3, [r3, #28]
 8001482:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001486:	603b      	str	r3, [r7, #0]
 8001488:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800148a:	bf00      	nop
 800148c:	370c      	adds	r7, #12
 800148e:	46bd      	mov	sp, r7
 8001490:	bc80      	pop	{r7}
 8001492:	4770      	bx	lr
 8001494:	40021000 	.word	0x40021000

08001498 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001498:	b580      	push	{r7, lr}
 800149a:	b084      	sub	sp, #16
 800149c:	af00      	add	r7, sp, #0
 800149e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80014a8:	d114      	bne.n	80014d4 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80014aa:	4b15      	ldr	r3, [pc, #84]	; (8001500 <HAL_TIM_Base_MspInit+0x68>)
 80014ac:	69db      	ldr	r3, [r3, #28]
 80014ae:	4a14      	ldr	r2, [pc, #80]	; (8001500 <HAL_TIM_Base_MspInit+0x68>)
 80014b0:	f043 0301 	orr.w	r3, r3, #1
 80014b4:	61d3      	str	r3, [r2, #28]
 80014b6:	4b12      	ldr	r3, [pc, #72]	; (8001500 <HAL_TIM_Base_MspInit+0x68>)
 80014b8:	69db      	ldr	r3, [r3, #28]
 80014ba:	f003 0301 	and.w	r3, r3, #1
 80014be:	60fb      	str	r3, [r7, #12]
 80014c0:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80014c2:	2200      	movs	r2, #0
 80014c4:	2100      	movs	r1, #0
 80014c6:	201c      	movs	r0, #28
 80014c8:	f000 f9b5 	bl	8001836 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80014cc:	201c      	movs	r0, #28
 80014ce:	f000 f9ce 	bl	800186e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 80014d2:	e010      	b.n	80014f6 <HAL_TIM_Base_MspInit+0x5e>
  else if(htim_base->Instance==TIM3)
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	681b      	ldr	r3, [r3, #0]
 80014d8:	4a0a      	ldr	r2, [pc, #40]	; (8001504 <HAL_TIM_Base_MspInit+0x6c>)
 80014da:	4293      	cmp	r3, r2
 80014dc:	d10b      	bne.n	80014f6 <HAL_TIM_Base_MspInit+0x5e>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80014de:	4b08      	ldr	r3, [pc, #32]	; (8001500 <HAL_TIM_Base_MspInit+0x68>)
 80014e0:	69db      	ldr	r3, [r3, #28]
 80014e2:	4a07      	ldr	r2, [pc, #28]	; (8001500 <HAL_TIM_Base_MspInit+0x68>)
 80014e4:	f043 0302 	orr.w	r3, r3, #2
 80014e8:	61d3      	str	r3, [r2, #28]
 80014ea:	4b05      	ldr	r3, [pc, #20]	; (8001500 <HAL_TIM_Base_MspInit+0x68>)
 80014ec:	69db      	ldr	r3, [r3, #28]
 80014ee:	f003 0302 	and.w	r3, r3, #2
 80014f2:	60bb      	str	r3, [r7, #8]
 80014f4:	68bb      	ldr	r3, [r7, #8]
}
 80014f6:	bf00      	nop
 80014f8:	3710      	adds	r7, #16
 80014fa:	46bd      	mov	sp, r7
 80014fc:	bd80      	pop	{r7, pc}
 80014fe:	bf00      	nop
 8001500:	40021000 	.word	0x40021000
 8001504:	40000400 	.word	0x40000400

08001508 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001508:	b480      	push	{r7}
 800150a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800150c:	e7fe      	b.n	800150c <NMI_Handler+0x4>

0800150e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800150e:	b480      	push	{r7}
 8001510:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001512:	e7fe      	b.n	8001512 <HardFault_Handler+0x4>

08001514 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001514:	b480      	push	{r7}
 8001516:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001518:	e7fe      	b.n	8001518 <MemManage_Handler+0x4>

0800151a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800151a:	b480      	push	{r7}
 800151c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800151e:	e7fe      	b.n	800151e <BusFault_Handler+0x4>

08001520 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001520:	b480      	push	{r7}
 8001522:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001524:	e7fe      	b.n	8001524 <UsageFault_Handler+0x4>

08001526 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001526:	b480      	push	{r7}
 8001528:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800152a:	bf00      	nop
 800152c:	46bd      	mov	sp, r7
 800152e:	bc80      	pop	{r7}
 8001530:	4770      	bx	lr

08001532 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001532:	b480      	push	{r7}
 8001534:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001536:	bf00      	nop
 8001538:	46bd      	mov	sp, r7
 800153a:	bc80      	pop	{r7}
 800153c:	4770      	bx	lr

0800153e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800153e:	b480      	push	{r7}
 8001540:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001542:	bf00      	nop
 8001544:	46bd      	mov	sp, r7
 8001546:	bc80      	pop	{r7}
 8001548:	4770      	bx	lr

0800154a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800154a:	b580      	push	{r7, lr}
 800154c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800154e:	f000 f87f 	bl	8001650 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001552:	bf00      	nop
 8001554:	bd80      	pop	{r7, pc}
	...

08001558 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001558:	b580      	push	{r7, lr}
 800155a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 800155c:	4802      	ldr	r0, [pc, #8]	; (8001568 <TIM2_IRQHandler+0x10>)
 800155e:	f000 ffe9 	bl	8002534 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001562:	bf00      	nop
 8001564:	bd80      	pop	{r7, pc}
 8001566:	bf00      	nop
 8001568:	20000090 	.word	0x20000090

0800156c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800156c:	b480      	push	{r7}
 800156e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001570:	bf00      	nop
 8001572:	46bd      	mov	sp, r7
 8001574:	bc80      	pop	{r7}
 8001576:	4770      	bx	lr

08001578 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001578:	480c      	ldr	r0, [pc, #48]	; (80015ac <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800157a:	490d      	ldr	r1, [pc, #52]	; (80015b0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800157c:	4a0d      	ldr	r2, [pc, #52]	; (80015b4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800157e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001580:	e002      	b.n	8001588 <LoopCopyDataInit>

08001582 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001582:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001584:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001586:	3304      	adds	r3, #4

08001588 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001588:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800158a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800158c:	d3f9      	bcc.n	8001582 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800158e:	4a0a      	ldr	r2, [pc, #40]	; (80015b8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001590:	4c0a      	ldr	r4, [pc, #40]	; (80015bc <LoopFillZerobss+0x22>)
  movs r3, #0
 8001592:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001594:	e001      	b.n	800159a <LoopFillZerobss>

08001596 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001596:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001598:	3204      	adds	r2, #4

0800159a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800159a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800159c:	d3fb      	bcc.n	8001596 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800159e:	f7ff ffe5 	bl	800156c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80015a2:	f001 fb0f 	bl	8002bc4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80015a6:	f7ff fa47 	bl	8000a38 <main>
  bx lr
 80015aa:	4770      	bx	lr
  ldr r0, =_sdata
 80015ac:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80015b0:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 80015b4:	08002c5c 	.word	0x08002c5c
  ldr r2, =_sbss
 80015b8:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 80015bc:	20000168 	.word	0x20000168

080015c0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80015c0:	e7fe      	b.n	80015c0 <ADC1_2_IRQHandler>
	...

080015c4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80015c4:	b580      	push	{r7, lr}
 80015c6:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80015c8:	4b08      	ldr	r3, [pc, #32]	; (80015ec <HAL_Init+0x28>)
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	4a07      	ldr	r2, [pc, #28]	; (80015ec <HAL_Init+0x28>)
 80015ce:	f043 0310 	orr.w	r3, r3, #16
 80015d2:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80015d4:	2003      	movs	r0, #3
 80015d6:	f000 f923 	bl	8001820 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80015da:	200f      	movs	r0, #15
 80015dc:	f000 f808 	bl	80015f0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80015e0:	f7ff ff38 	bl	8001454 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80015e4:	2300      	movs	r3, #0
}
 80015e6:	4618      	mov	r0, r3
 80015e8:	bd80      	pop	{r7, pc}
 80015ea:	bf00      	nop
 80015ec:	40022000 	.word	0x40022000

080015f0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80015f0:	b580      	push	{r7, lr}
 80015f2:	b082      	sub	sp, #8
 80015f4:	af00      	add	r7, sp, #0
 80015f6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80015f8:	4b12      	ldr	r3, [pc, #72]	; (8001644 <HAL_InitTick+0x54>)
 80015fa:	681a      	ldr	r2, [r3, #0]
 80015fc:	4b12      	ldr	r3, [pc, #72]	; (8001648 <HAL_InitTick+0x58>)
 80015fe:	781b      	ldrb	r3, [r3, #0]
 8001600:	4619      	mov	r1, r3
 8001602:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001606:	fbb3 f3f1 	udiv	r3, r3, r1
 800160a:	fbb2 f3f3 	udiv	r3, r2, r3
 800160e:	4618      	mov	r0, r3
 8001610:	f000 f93b 	bl	800188a <HAL_SYSTICK_Config>
 8001614:	4603      	mov	r3, r0
 8001616:	2b00      	cmp	r3, #0
 8001618:	d001      	beq.n	800161e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800161a:	2301      	movs	r3, #1
 800161c:	e00e      	b.n	800163c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	2b0f      	cmp	r3, #15
 8001622:	d80a      	bhi.n	800163a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001624:	2200      	movs	r2, #0
 8001626:	6879      	ldr	r1, [r7, #4]
 8001628:	f04f 30ff 	mov.w	r0, #4294967295
 800162c:	f000 f903 	bl	8001836 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001630:	4a06      	ldr	r2, [pc, #24]	; (800164c <HAL_InitTick+0x5c>)
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001636:	2300      	movs	r3, #0
 8001638:	e000      	b.n	800163c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800163a:	2301      	movs	r3, #1
}
 800163c:	4618      	mov	r0, r3
 800163e:	3708      	adds	r7, #8
 8001640:	46bd      	mov	sp, r7
 8001642:	bd80      	pop	{r7, pc}
 8001644:	20000050 	.word	0x20000050
 8001648:	20000058 	.word	0x20000058
 800164c:	20000054 	.word	0x20000054

08001650 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001650:	b480      	push	{r7}
 8001652:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001654:	4b05      	ldr	r3, [pc, #20]	; (800166c <HAL_IncTick+0x1c>)
 8001656:	781b      	ldrb	r3, [r3, #0]
 8001658:	461a      	mov	r2, r3
 800165a:	4b05      	ldr	r3, [pc, #20]	; (8001670 <HAL_IncTick+0x20>)
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	4413      	add	r3, r2
 8001660:	4a03      	ldr	r2, [pc, #12]	; (8001670 <HAL_IncTick+0x20>)
 8001662:	6013      	str	r3, [r2, #0]
}
 8001664:	bf00      	nop
 8001666:	46bd      	mov	sp, r7
 8001668:	bc80      	pop	{r7}
 800166a:	4770      	bx	lr
 800166c:	20000058 	.word	0x20000058
 8001670:	20000164 	.word	0x20000164

08001674 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001674:	b480      	push	{r7}
 8001676:	af00      	add	r7, sp, #0
  return uwTick;
 8001678:	4b02      	ldr	r3, [pc, #8]	; (8001684 <HAL_GetTick+0x10>)
 800167a:	681b      	ldr	r3, [r3, #0]
}
 800167c:	4618      	mov	r0, r3
 800167e:	46bd      	mov	sp, r7
 8001680:	bc80      	pop	{r7}
 8001682:	4770      	bx	lr
 8001684:	20000164 	.word	0x20000164

08001688 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001688:	b480      	push	{r7}
 800168a:	b085      	sub	sp, #20
 800168c:	af00      	add	r7, sp, #0
 800168e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	f003 0307 	and.w	r3, r3, #7
 8001696:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001698:	4b0c      	ldr	r3, [pc, #48]	; (80016cc <__NVIC_SetPriorityGrouping+0x44>)
 800169a:	68db      	ldr	r3, [r3, #12]
 800169c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800169e:	68ba      	ldr	r2, [r7, #8]
 80016a0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80016a4:	4013      	ands	r3, r2
 80016a6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80016a8:	68fb      	ldr	r3, [r7, #12]
 80016aa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80016ac:	68bb      	ldr	r3, [r7, #8]
 80016ae:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80016b0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80016b4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80016b8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80016ba:	4a04      	ldr	r2, [pc, #16]	; (80016cc <__NVIC_SetPriorityGrouping+0x44>)
 80016bc:	68bb      	ldr	r3, [r7, #8]
 80016be:	60d3      	str	r3, [r2, #12]
}
 80016c0:	bf00      	nop
 80016c2:	3714      	adds	r7, #20
 80016c4:	46bd      	mov	sp, r7
 80016c6:	bc80      	pop	{r7}
 80016c8:	4770      	bx	lr
 80016ca:	bf00      	nop
 80016cc:	e000ed00 	.word	0xe000ed00

080016d0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80016d0:	b480      	push	{r7}
 80016d2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80016d4:	4b04      	ldr	r3, [pc, #16]	; (80016e8 <__NVIC_GetPriorityGrouping+0x18>)
 80016d6:	68db      	ldr	r3, [r3, #12]
 80016d8:	0a1b      	lsrs	r3, r3, #8
 80016da:	f003 0307 	and.w	r3, r3, #7
}
 80016de:	4618      	mov	r0, r3
 80016e0:	46bd      	mov	sp, r7
 80016e2:	bc80      	pop	{r7}
 80016e4:	4770      	bx	lr
 80016e6:	bf00      	nop
 80016e8:	e000ed00 	.word	0xe000ed00

080016ec <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80016ec:	b480      	push	{r7}
 80016ee:	b083      	sub	sp, #12
 80016f0:	af00      	add	r7, sp, #0
 80016f2:	4603      	mov	r3, r0
 80016f4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80016f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016fa:	2b00      	cmp	r3, #0
 80016fc:	db0b      	blt.n	8001716 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80016fe:	79fb      	ldrb	r3, [r7, #7]
 8001700:	f003 021f 	and.w	r2, r3, #31
 8001704:	4906      	ldr	r1, [pc, #24]	; (8001720 <__NVIC_EnableIRQ+0x34>)
 8001706:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800170a:	095b      	lsrs	r3, r3, #5
 800170c:	2001      	movs	r0, #1
 800170e:	fa00 f202 	lsl.w	r2, r0, r2
 8001712:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001716:	bf00      	nop
 8001718:	370c      	adds	r7, #12
 800171a:	46bd      	mov	sp, r7
 800171c:	bc80      	pop	{r7}
 800171e:	4770      	bx	lr
 8001720:	e000e100 	.word	0xe000e100

08001724 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001724:	b480      	push	{r7}
 8001726:	b083      	sub	sp, #12
 8001728:	af00      	add	r7, sp, #0
 800172a:	4603      	mov	r3, r0
 800172c:	6039      	str	r1, [r7, #0]
 800172e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001730:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001734:	2b00      	cmp	r3, #0
 8001736:	db0a      	blt.n	800174e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001738:	683b      	ldr	r3, [r7, #0]
 800173a:	b2da      	uxtb	r2, r3
 800173c:	490c      	ldr	r1, [pc, #48]	; (8001770 <__NVIC_SetPriority+0x4c>)
 800173e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001742:	0112      	lsls	r2, r2, #4
 8001744:	b2d2      	uxtb	r2, r2
 8001746:	440b      	add	r3, r1
 8001748:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800174c:	e00a      	b.n	8001764 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800174e:	683b      	ldr	r3, [r7, #0]
 8001750:	b2da      	uxtb	r2, r3
 8001752:	4908      	ldr	r1, [pc, #32]	; (8001774 <__NVIC_SetPriority+0x50>)
 8001754:	79fb      	ldrb	r3, [r7, #7]
 8001756:	f003 030f 	and.w	r3, r3, #15
 800175a:	3b04      	subs	r3, #4
 800175c:	0112      	lsls	r2, r2, #4
 800175e:	b2d2      	uxtb	r2, r2
 8001760:	440b      	add	r3, r1
 8001762:	761a      	strb	r2, [r3, #24]
}
 8001764:	bf00      	nop
 8001766:	370c      	adds	r7, #12
 8001768:	46bd      	mov	sp, r7
 800176a:	bc80      	pop	{r7}
 800176c:	4770      	bx	lr
 800176e:	bf00      	nop
 8001770:	e000e100 	.word	0xe000e100
 8001774:	e000ed00 	.word	0xe000ed00

08001778 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001778:	b480      	push	{r7}
 800177a:	b089      	sub	sp, #36	; 0x24
 800177c:	af00      	add	r7, sp, #0
 800177e:	60f8      	str	r0, [r7, #12]
 8001780:	60b9      	str	r1, [r7, #8]
 8001782:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001784:	68fb      	ldr	r3, [r7, #12]
 8001786:	f003 0307 	and.w	r3, r3, #7
 800178a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800178c:	69fb      	ldr	r3, [r7, #28]
 800178e:	f1c3 0307 	rsb	r3, r3, #7
 8001792:	2b04      	cmp	r3, #4
 8001794:	bf28      	it	cs
 8001796:	2304      	movcs	r3, #4
 8001798:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800179a:	69fb      	ldr	r3, [r7, #28]
 800179c:	3304      	adds	r3, #4
 800179e:	2b06      	cmp	r3, #6
 80017a0:	d902      	bls.n	80017a8 <NVIC_EncodePriority+0x30>
 80017a2:	69fb      	ldr	r3, [r7, #28]
 80017a4:	3b03      	subs	r3, #3
 80017a6:	e000      	b.n	80017aa <NVIC_EncodePriority+0x32>
 80017a8:	2300      	movs	r3, #0
 80017aa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80017ac:	f04f 32ff 	mov.w	r2, #4294967295
 80017b0:	69bb      	ldr	r3, [r7, #24]
 80017b2:	fa02 f303 	lsl.w	r3, r2, r3
 80017b6:	43da      	mvns	r2, r3
 80017b8:	68bb      	ldr	r3, [r7, #8]
 80017ba:	401a      	ands	r2, r3
 80017bc:	697b      	ldr	r3, [r7, #20]
 80017be:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80017c0:	f04f 31ff 	mov.w	r1, #4294967295
 80017c4:	697b      	ldr	r3, [r7, #20]
 80017c6:	fa01 f303 	lsl.w	r3, r1, r3
 80017ca:	43d9      	mvns	r1, r3
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80017d0:	4313      	orrs	r3, r2
         );
}
 80017d2:	4618      	mov	r0, r3
 80017d4:	3724      	adds	r7, #36	; 0x24
 80017d6:	46bd      	mov	sp, r7
 80017d8:	bc80      	pop	{r7}
 80017da:	4770      	bx	lr

080017dc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80017dc:	b580      	push	{r7, lr}
 80017de:	b082      	sub	sp, #8
 80017e0:	af00      	add	r7, sp, #0
 80017e2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	3b01      	subs	r3, #1
 80017e8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80017ec:	d301      	bcc.n	80017f2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80017ee:	2301      	movs	r3, #1
 80017f0:	e00f      	b.n	8001812 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80017f2:	4a0a      	ldr	r2, [pc, #40]	; (800181c <SysTick_Config+0x40>)
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	3b01      	subs	r3, #1
 80017f8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80017fa:	210f      	movs	r1, #15
 80017fc:	f04f 30ff 	mov.w	r0, #4294967295
 8001800:	f7ff ff90 	bl	8001724 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001804:	4b05      	ldr	r3, [pc, #20]	; (800181c <SysTick_Config+0x40>)
 8001806:	2200      	movs	r2, #0
 8001808:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800180a:	4b04      	ldr	r3, [pc, #16]	; (800181c <SysTick_Config+0x40>)
 800180c:	2207      	movs	r2, #7
 800180e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001810:	2300      	movs	r3, #0
}
 8001812:	4618      	mov	r0, r3
 8001814:	3708      	adds	r7, #8
 8001816:	46bd      	mov	sp, r7
 8001818:	bd80      	pop	{r7, pc}
 800181a:	bf00      	nop
 800181c:	e000e010 	.word	0xe000e010

08001820 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001820:	b580      	push	{r7, lr}
 8001822:	b082      	sub	sp, #8
 8001824:	af00      	add	r7, sp, #0
 8001826:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001828:	6878      	ldr	r0, [r7, #4]
 800182a:	f7ff ff2d 	bl	8001688 <__NVIC_SetPriorityGrouping>
}
 800182e:	bf00      	nop
 8001830:	3708      	adds	r7, #8
 8001832:	46bd      	mov	sp, r7
 8001834:	bd80      	pop	{r7, pc}

08001836 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001836:	b580      	push	{r7, lr}
 8001838:	b086      	sub	sp, #24
 800183a:	af00      	add	r7, sp, #0
 800183c:	4603      	mov	r3, r0
 800183e:	60b9      	str	r1, [r7, #8]
 8001840:	607a      	str	r2, [r7, #4]
 8001842:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001844:	2300      	movs	r3, #0
 8001846:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001848:	f7ff ff42 	bl	80016d0 <__NVIC_GetPriorityGrouping>
 800184c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800184e:	687a      	ldr	r2, [r7, #4]
 8001850:	68b9      	ldr	r1, [r7, #8]
 8001852:	6978      	ldr	r0, [r7, #20]
 8001854:	f7ff ff90 	bl	8001778 <NVIC_EncodePriority>
 8001858:	4602      	mov	r2, r0
 800185a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800185e:	4611      	mov	r1, r2
 8001860:	4618      	mov	r0, r3
 8001862:	f7ff ff5f 	bl	8001724 <__NVIC_SetPriority>
}
 8001866:	bf00      	nop
 8001868:	3718      	adds	r7, #24
 800186a:	46bd      	mov	sp, r7
 800186c:	bd80      	pop	{r7, pc}

0800186e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800186e:	b580      	push	{r7, lr}
 8001870:	b082      	sub	sp, #8
 8001872:	af00      	add	r7, sp, #0
 8001874:	4603      	mov	r3, r0
 8001876:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001878:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800187c:	4618      	mov	r0, r3
 800187e:	f7ff ff35 	bl	80016ec <__NVIC_EnableIRQ>
}
 8001882:	bf00      	nop
 8001884:	3708      	adds	r7, #8
 8001886:	46bd      	mov	sp, r7
 8001888:	bd80      	pop	{r7, pc}

0800188a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800188a:	b580      	push	{r7, lr}
 800188c:	b082      	sub	sp, #8
 800188e:	af00      	add	r7, sp, #0
 8001890:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001892:	6878      	ldr	r0, [r7, #4]
 8001894:	f7ff ffa2 	bl	80017dc <SysTick_Config>
 8001898:	4603      	mov	r3, r0
}
 800189a:	4618      	mov	r0, r3
 800189c:	3708      	adds	r7, #8
 800189e:	46bd      	mov	sp, r7
 80018a0:	bd80      	pop	{r7, pc}
	...

080018a4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80018a4:	b480      	push	{r7}
 80018a6:	b08b      	sub	sp, #44	; 0x2c
 80018a8:	af00      	add	r7, sp, #0
 80018aa:	6078      	str	r0, [r7, #4]
 80018ac:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80018ae:	2300      	movs	r3, #0
 80018b0:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80018b2:	2300      	movs	r3, #0
 80018b4:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80018b6:	e161      	b.n	8001b7c <HAL_GPIO_Init+0x2d8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80018b8:	2201      	movs	r2, #1
 80018ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018bc:	fa02 f303 	lsl.w	r3, r2, r3
 80018c0:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80018c2:	683b      	ldr	r3, [r7, #0]
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	69fa      	ldr	r2, [r7, #28]
 80018c8:	4013      	ands	r3, r2
 80018ca:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80018cc:	69ba      	ldr	r2, [r7, #24]
 80018ce:	69fb      	ldr	r3, [r7, #28]
 80018d0:	429a      	cmp	r2, r3
 80018d2:	f040 8150 	bne.w	8001b76 <HAL_GPIO_Init+0x2d2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80018d6:	683b      	ldr	r3, [r7, #0]
 80018d8:	685b      	ldr	r3, [r3, #4]
 80018da:	4a97      	ldr	r2, [pc, #604]	; (8001b38 <HAL_GPIO_Init+0x294>)
 80018dc:	4293      	cmp	r3, r2
 80018de:	d05e      	beq.n	800199e <HAL_GPIO_Init+0xfa>
 80018e0:	4a95      	ldr	r2, [pc, #596]	; (8001b38 <HAL_GPIO_Init+0x294>)
 80018e2:	4293      	cmp	r3, r2
 80018e4:	d875      	bhi.n	80019d2 <HAL_GPIO_Init+0x12e>
 80018e6:	4a95      	ldr	r2, [pc, #596]	; (8001b3c <HAL_GPIO_Init+0x298>)
 80018e8:	4293      	cmp	r3, r2
 80018ea:	d058      	beq.n	800199e <HAL_GPIO_Init+0xfa>
 80018ec:	4a93      	ldr	r2, [pc, #588]	; (8001b3c <HAL_GPIO_Init+0x298>)
 80018ee:	4293      	cmp	r3, r2
 80018f0:	d86f      	bhi.n	80019d2 <HAL_GPIO_Init+0x12e>
 80018f2:	4a93      	ldr	r2, [pc, #588]	; (8001b40 <HAL_GPIO_Init+0x29c>)
 80018f4:	4293      	cmp	r3, r2
 80018f6:	d052      	beq.n	800199e <HAL_GPIO_Init+0xfa>
 80018f8:	4a91      	ldr	r2, [pc, #580]	; (8001b40 <HAL_GPIO_Init+0x29c>)
 80018fa:	4293      	cmp	r3, r2
 80018fc:	d869      	bhi.n	80019d2 <HAL_GPIO_Init+0x12e>
 80018fe:	4a91      	ldr	r2, [pc, #580]	; (8001b44 <HAL_GPIO_Init+0x2a0>)
 8001900:	4293      	cmp	r3, r2
 8001902:	d04c      	beq.n	800199e <HAL_GPIO_Init+0xfa>
 8001904:	4a8f      	ldr	r2, [pc, #572]	; (8001b44 <HAL_GPIO_Init+0x2a0>)
 8001906:	4293      	cmp	r3, r2
 8001908:	d863      	bhi.n	80019d2 <HAL_GPIO_Init+0x12e>
 800190a:	4a8f      	ldr	r2, [pc, #572]	; (8001b48 <HAL_GPIO_Init+0x2a4>)
 800190c:	4293      	cmp	r3, r2
 800190e:	d046      	beq.n	800199e <HAL_GPIO_Init+0xfa>
 8001910:	4a8d      	ldr	r2, [pc, #564]	; (8001b48 <HAL_GPIO_Init+0x2a4>)
 8001912:	4293      	cmp	r3, r2
 8001914:	d85d      	bhi.n	80019d2 <HAL_GPIO_Init+0x12e>
 8001916:	2b12      	cmp	r3, #18
 8001918:	d82a      	bhi.n	8001970 <HAL_GPIO_Init+0xcc>
 800191a:	2b12      	cmp	r3, #18
 800191c:	d859      	bhi.n	80019d2 <HAL_GPIO_Init+0x12e>
 800191e:	a201      	add	r2, pc, #4	; (adr r2, 8001924 <HAL_GPIO_Init+0x80>)
 8001920:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001924:	0800199f 	.word	0x0800199f
 8001928:	08001979 	.word	0x08001979
 800192c:	0800198b 	.word	0x0800198b
 8001930:	080019cd 	.word	0x080019cd
 8001934:	080019d3 	.word	0x080019d3
 8001938:	080019d3 	.word	0x080019d3
 800193c:	080019d3 	.word	0x080019d3
 8001940:	080019d3 	.word	0x080019d3
 8001944:	080019d3 	.word	0x080019d3
 8001948:	080019d3 	.word	0x080019d3
 800194c:	080019d3 	.word	0x080019d3
 8001950:	080019d3 	.word	0x080019d3
 8001954:	080019d3 	.word	0x080019d3
 8001958:	080019d3 	.word	0x080019d3
 800195c:	080019d3 	.word	0x080019d3
 8001960:	080019d3 	.word	0x080019d3
 8001964:	080019d3 	.word	0x080019d3
 8001968:	08001981 	.word	0x08001981
 800196c:	08001995 	.word	0x08001995
 8001970:	4a76      	ldr	r2, [pc, #472]	; (8001b4c <HAL_GPIO_Init+0x2a8>)
 8001972:	4293      	cmp	r3, r2
 8001974:	d013      	beq.n	800199e <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001976:	e02c      	b.n	80019d2 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001978:	683b      	ldr	r3, [r7, #0]
 800197a:	68db      	ldr	r3, [r3, #12]
 800197c:	623b      	str	r3, [r7, #32]
          break;
 800197e:	e029      	b.n	80019d4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001980:	683b      	ldr	r3, [r7, #0]
 8001982:	68db      	ldr	r3, [r3, #12]
 8001984:	3304      	adds	r3, #4
 8001986:	623b      	str	r3, [r7, #32]
          break;
 8001988:	e024      	b.n	80019d4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800198a:	683b      	ldr	r3, [r7, #0]
 800198c:	68db      	ldr	r3, [r3, #12]
 800198e:	3308      	adds	r3, #8
 8001990:	623b      	str	r3, [r7, #32]
          break;
 8001992:	e01f      	b.n	80019d4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001994:	683b      	ldr	r3, [r7, #0]
 8001996:	68db      	ldr	r3, [r3, #12]
 8001998:	330c      	adds	r3, #12
 800199a:	623b      	str	r3, [r7, #32]
          break;
 800199c:	e01a      	b.n	80019d4 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800199e:	683b      	ldr	r3, [r7, #0]
 80019a0:	689b      	ldr	r3, [r3, #8]
 80019a2:	2b00      	cmp	r3, #0
 80019a4:	d102      	bne.n	80019ac <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80019a6:	2304      	movs	r3, #4
 80019a8:	623b      	str	r3, [r7, #32]
          break;
 80019aa:	e013      	b.n	80019d4 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80019ac:	683b      	ldr	r3, [r7, #0]
 80019ae:	689b      	ldr	r3, [r3, #8]
 80019b0:	2b01      	cmp	r3, #1
 80019b2:	d105      	bne.n	80019c0 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80019b4:	2308      	movs	r3, #8
 80019b6:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	69fa      	ldr	r2, [r7, #28]
 80019bc:	611a      	str	r2, [r3, #16]
          break;
 80019be:	e009      	b.n	80019d4 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80019c0:	2308      	movs	r3, #8
 80019c2:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	69fa      	ldr	r2, [r7, #28]
 80019c8:	615a      	str	r2, [r3, #20]
          break;
 80019ca:	e003      	b.n	80019d4 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80019cc:	2300      	movs	r3, #0
 80019ce:	623b      	str	r3, [r7, #32]
          break;
 80019d0:	e000      	b.n	80019d4 <HAL_GPIO_Init+0x130>
          break;
 80019d2:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80019d4:	69bb      	ldr	r3, [r7, #24]
 80019d6:	2bff      	cmp	r3, #255	; 0xff
 80019d8:	d801      	bhi.n	80019de <HAL_GPIO_Init+0x13a>
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	e001      	b.n	80019e2 <HAL_GPIO_Init+0x13e>
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	3304      	adds	r3, #4
 80019e2:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80019e4:	69bb      	ldr	r3, [r7, #24]
 80019e6:	2bff      	cmp	r3, #255	; 0xff
 80019e8:	d802      	bhi.n	80019f0 <HAL_GPIO_Init+0x14c>
 80019ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019ec:	009b      	lsls	r3, r3, #2
 80019ee:	e002      	b.n	80019f6 <HAL_GPIO_Init+0x152>
 80019f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019f2:	3b08      	subs	r3, #8
 80019f4:	009b      	lsls	r3, r3, #2
 80019f6:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80019f8:	697b      	ldr	r3, [r7, #20]
 80019fa:	681a      	ldr	r2, [r3, #0]
 80019fc:	210f      	movs	r1, #15
 80019fe:	693b      	ldr	r3, [r7, #16]
 8001a00:	fa01 f303 	lsl.w	r3, r1, r3
 8001a04:	43db      	mvns	r3, r3
 8001a06:	401a      	ands	r2, r3
 8001a08:	6a39      	ldr	r1, [r7, #32]
 8001a0a:	693b      	ldr	r3, [r7, #16]
 8001a0c:	fa01 f303 	lsl.w	r3, r1, r3
 8001a10:	431a      	orrs	r2, r3
 8001a12:	697b      	ldr	r3, [r7, #20]
 8001a14:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001a16:	683b      	ldr	r3, [r7, #0]
 8001a18:	685b      	ldr	r3, [r3, #4]
 8001a1a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a1e:	2b00      	cmp	r3, #0
 8001a20:	f000 80a9 	beq.w	8001b76 <HAL_GPIO_Init+0x2d2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001a24:	4b4a      	ldr	r3, [pc, #296]	; (8001b50 <HAL_GPIO_Init+0x2ac>)
 8001a26:	699b      	ldr	r3, [r3, #24]
 8001a28:	4a49      	ldr	r2, [pc, #292]	; (8001b50 <HAL_GPIO_Init+0x2ac>)
 8001a2a:	f043 0301 	orr.w	r3, r3, #1
 8001a2e:	6193      	str	r3, [r2, #24]
 8001a30:	4b47      	ldr	r3, [pc, #284]	; (8001b50 <HAL_GPIO_Init+0x2ac>)
 8001a32:	699b      	ldr	r3, [r3, #24]
 8001a34:	f003 0301 	and.w	r3, r3, #1
 8001a38:	60bb      	str	r3, [r7, #8]
 8001a3a:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001a3c:	4a45      	ldr	r2, [pc, #276]	; (8001b54 <HAL_GPIO_Init+0x2b0>)
 8001a3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a40:	089b      	lsrs	r3, r3, #2
 8001a42:	3302      	adds	r3, #2
 8001a44:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001a48:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001a4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a4c:	f003 0303 	and.w	r3, r3, #3
 8001a50:	009b      	lsls	r3, r3, #2
 8001a52:	220f      	movs	r2, #15
 8001a54:	fa02 f303 	lsl.w	r3, r2, r3
 8001a58:	43db      	mvns	r3, r3
 8001a5a:	68fa      	ldr	r2, [r7, #12]
 8001a5c:	4013      	ands	r3, r2
 8001a5e:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	4a3d      	ldr	r2, [pc, #244]	; (8001b58 <HAL_GPIO_Init+0x2b4>)
 8001a64:	4293      	cmp	r3, r2
 8001a66:	d00d      	beq.n	8001a84 <HAL_GPIO_Init+0x1e0>
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	4a3c      	ldr	r2, [pc, #240]	; (8001b5c <HAL_GPIO_Init+0x2b8>)
 8001a6c:	4293      	cmp	r3, r2
 8001a6e:	d007      	beq.n	8001a80 <HAL_GPIO_Init+0x1dc>
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	4a3b      	ldr	r2, [pc, #236]	; (8001b60 <HAL_GPIO_Init+0x2bc>)
 8001a74:	4293      	cmp	r3, r2
 8001a76:	d101      	bne.n	8001a7c <HAL_GPIO_Init+0x1d8>
 8001a78:	2302      	movs	r3, #2
 8001a7a:	e004      	b.n	8001a86 <HAL_GPIO_Init+0x1e2>
 8001a7c:	2303      	movs	r3, #3
 8001a7e:	e002      	b.n	8001a86 <HAL_GPIO_Init+0x1e2>
 8001a80:	2301      	movs	r3, #1
 8001a82:	e000      	b.n	8001a86 <HAL_GPIO_Init+0x1e2>
 8001a84:	2300      	movs	r3, #0
 8001a86:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001a88:	f002 0203 	and.w	r2, r2, #3
 8001a8c:	0092      	lsls	r2, r2, #2
 8001a8e:	4093      	lsls	r3, r2
 8001a90:	68fa      	ldr	r2, [r7, #12]
 8001a92:	4313      	orrs	r3, r2
 8001a94:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001a96:	492f      	ldr	r1, [pc, #188]	; (8001b54 <HAL_GPIO_Init+0x2b0>)
 8001a98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a9a:	089b      	lsrs	r3, r3, #2
 8001a9c:	3302      	adds	r3, #2
 8001a9e:	68fa      	ldr	r2, [r7, #12]
 8001aa0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001aa4:	683b      	ldr	r3, [r7, #0]
 8001aa6:	685b      	ldr	r3, [r3, #4]
 8001aa8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001aac:	2b00      	cmp	r3, #0
 8001aae:	d006      	beq.n	8001abe <HAL_GPIO_Init+0x21a>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001ab0:	4b2c      	ldr	r3, [pc, #176]	; (8001b64 <HAL_GPIO_Init+0x2c0>)
 8001ab2:	681a      	ldr	r2, [r3, #0]
 8001ab4:	492b      	ldr	r1, [pc, #172]	; (8001b64 <HAL_GPIO_Init+0x2c0>)
 8001ab6:	69bb      	ldr	r3, [r7, #24]
 8001ab8:	4313      	orrs	r3, r2
 8001aba:	600b      	str	r3, [r1, #0]
 8001abc:	e006      	b.n	8001acc <HAL_GPIO_Init+0x228>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001abe:	4b29      	ldr	r3, [pc, #164]	; (8001b64 <HAL_GPIO_Init+0x2c0>)
 8001ac0:	681a      	ldr	r2, [r3, #0]
 8001ac2:	69bb      	ldr	r3, [r7, #24]
 8001ac4:	43db      	mvns	r3, r3
 8001ac6:	4927      	ldr	r1, [pc, #156]	; (8001b64 <HAL_GPIO_Init+0x2c0>)
 8001ac8:	4013      	ands	r3, r2
 8001aca:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001acc:	683b      	ldr	r3, [r7, #0]
 8001ace:	685b      	ldr	r3, [r3, #4]
 8001ad0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ad4:	2b00      	cmp	r3, #0
 8001ad6:	d006      	beq.n	8001ae6 <HAL_GPIO_Init+0x242>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001ad8:	4b22      	ldr	r3, [pc, #136]	; (8001b64 <HAL_GPIO_Init+0x2c0>)
 8001ada:	685a      	ldr	r2, [r3, #4]
 8001adc:	4921      	ldr	r1, [pc, #132]	; (8001b64 <HAL_GPIO_Init+0x2c0>)
 8001ade:	69bb      	ldr	r3, [r7, #24]
 8001ae0:	4313      	orrs	r3, r2
 8001ae2:	604b      	str	r3, [r1, #4]
 8001ae4:	e006      	b.n	8001af4 <HAL_GPIO_Init+0x250>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001ae6:	4b1f      	ldr	r3, [pc, #124]	; (8001b64 <HAL_GPIO_Init+0x2c0>)
 8001ae8:	685a      	ldr	r2, [r3, #4]
 8001aea:	69bb      	ldr	r3, [r7, #24]
 8001aec:	43db      	mvns	r3, r3
 8001aee:	491d      	ldr	r1, [pc, #116]	; (8001b64 <HAL_GPIO_Init+0x2c0>)
 8001af0:	4013      	ands	r3, r2
 8001af2:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001af4:	683b      	ldr	r3, [r7, #0]
 8001af6:	685b      	ldr	r3, [r3, #4]
 8001af8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001afc:	2b00      	cmp	r3, #0
 8001afe:	d006      	beq.n	8001b0e <HAL_GPIO_Init+0x26a>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001b00:	4b18      	ldr	r3, [pc, #96]	; (8001b64 <HAL_GPIO_Init+0x2c0>)
 8001b02:	689a      	ldr	r2, [r3, #8]
 8001b04:	4917      	ldr	r1, [pc, #92]	; (8001b64 <HAL_GPIO_Init+0x2c0>)
 8001b06:	69bb      	ldr	r3, [r7, #24]
 8001b08:	4313      	orrs	r3, r2
 8001b0a:	608b      	str	r3, [r1, #8]
 8001b0c:	e006      	b.n	8001b1c <HAL_GPIO_Init+0x278>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001b0e:	4b15      	ldr	r3, [pc, #84]	; (8001b64 <HAL_GPIO_Init+0x2c0>)
 8001b10:	689a      	ldr	r2, [r3, #8]
 8001b12:	69bb      	ldr	r3, [r7, #24]
 8001b14:	43db      	mvns	r3, r3
 8001b16:	4913      	ldr	r1, [pc, #76]	; (8001b64 <HAL_GPIO_Init+0x2c0>)
 8001b18:	4013      	ands	r3, r2
 8001b1a:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001b1c:	683b      	ldr	r3, [r7, #0]
 8001b1e:	685b      	ldr	r3, [r3, #4]
 8001b20:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001b24:	2b00      	cmp	r3, #0
 8001b26:	d01f      	beq.n	8001b68 <HAL_GPIO_Init+0x2c4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001b28:	4b0e      	ldr	r3, [pc, #56]	; (8001b64 <HAL_GPIO_Init+0x2c0>)
 8001b2a:	68da      	ldr	r2, [r3, #12]
 8001b2c:	490d      	ldr	r1, [pc, #52]	; (8001b64 <HAL_GPIO_Init+0x2c0>)
 8001b2e:	69bb      	ldr	r3, [r7, #24]
 8001b30:	4313      	orrs	r3, r2
 8001b32:	60cb      	str	r3, [r1, #12]
 8001b34:	e01f      	b.n	8001b76 <HAL_GPIO_Init+0x2d2>
 8001b36:	bf00      	nop
 8001b38:	10320000 	.word	0x10320000
 8001b3c:	10310000 	.word	0x10310000
 8001b40:	10220000 	.word	0x10220000
 8001b44:	10210000 	.word	0x10210000
 8001b48:	10120000 	.word	0x10120000
 8001b4c:	10110000 	.word	0x10110000
 8001b50:	40021000 	.word	0x40021000
 8001b54:	40010000 	.word	0x40010000
 8001b58:	40010800 	.word	0x40010800
 8001b5c:	40010c00 	.word	0x40010c00
 8001b60:	40011000 	.word	0x40011000
 8001b64:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001b68:	4b0b      	ldr	r3, [pc, #44]	; (8001b98 <HAL_GPIO_Init+0x2f4>)
 8001b6a:	68da      	ldr	r2, [r3, #12]
 8001b6c:	69bb      	ldr	r3, [r7, #24]
 8001b6e:	43db      	mvns	r3, r3
 8001b70:	4909      	ldr	r1, [pc, #36]	; (8001b98 <HAL_GPIO_Init+0x2f4>)
 8001b72:	4013      	ands	r3, r2
 8001b74:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8001b76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b78:	3301      	adds	r3, #1
 8001b7a:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001b7c:	683b      	ldr	r3, [r7, #0]
 8001b7e:	681a      	ldr	r2, [r3, #0]
 8001b80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b82:	fa22 f303 	lsr.w	r3, r2, r3
 8001b86:	2b00      	cmp	r3, #0
 8001b88:	f47f ae96 	bne.w	80018b8 <HAL_GPIO_Init+0x14>
  }
}
 8001b8c:	bf00      	nop
 8001b8e:	bf00      	nop
 8001b90:	372c      	adds	r7, #44	; 0x2c
 8001b92:	46bd      	mov	sp, r7
 8001b94:	bc80      	pop	{r7}
 8001b96:	4770      	bx	lr
 8001b98:	40010400 	.word	0x40010400

08001b9c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001b9c:	b480      	push	{r7}
 8001b9e:	b085      	sub	sp, #20
 8001ba0:	af00      	add	r7, sp, #0
 8001ba2:	6078      	str	r0, [r7, #4]
 8001ba4:	460b      	mov	r3, r1
 8001ba6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	689a      	ldr	r2, [r3, #8]
 8001bac:	887b      	ldrh	r3, [r7, #2]
 8001bae:	4013      	ands	r3, r2
 8001bb0:	2b00      	cmp	r3, #0
 8001bb2:	d002      	beq.n	8001bba <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001bb4:	2301      	movs	r3, #1
 8001bb6:	73fb      	strb	r3, [r7, #15]
 8001bb8:	e001      	b.n	8001bbe <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001bba:	2300      	movs	r3, #0
 8001bbc:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001bbe:	7bfb      	ldrb	r3, [r7, #15]
}
 8001bc0:	4618      	mov	r0, r3
 8001bc2:	3714      	adds	r7, #20
 8001bc4:	46bd      	mov	sp, r7
 8001bc6:	bc80      	pop	{r7}
 8001bc8:	4770      	bx	lr

08001bca <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001bca:	b480      	push	{r7}
 8001bcc:	b083      	sub	sp, #12
 8001bce:	af00      	add	r7, sp, #0
 8001bd0:	6078      	str	r0, [r7, #4]
 8001bd2:	460b      	mov	r3, r1
 8001bd4:	807b      	strh	r3, [r7, #2]
 8001bd6:	4613      	mov	r3, r2
 8001bd8:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001bda:	787b      	ldrb	r3, [r7, #1]
 8001bdc:	2b00      	cmp	r3, #0
 8001bde:	d003      	beq.n	8001be8 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001be0:	887a      	ldrh	r2, [r7, #2]
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001be6:	e003      	b.n	8001bf0 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001be8:	887b      	ldrh	r3, [r7, #2]
 8001bea:	041a      	lsls	r2, r3, #16
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	611a      	str	r2, [r3, #16]
}
 8001bf0:	bf00      	nop
 8001bf2:	370c      	adds	r7, #12
 8001bf4:	46bd      	mov	sp, r7
 8001bf6:	bc80      	pop	{r7}
 8001bf8:	4770      	bx	lr

08001bfa <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001bfa:	b480      	push	{r7}
 8001bfc:	b085      	sub	sp, #20
 8001bfe:	af00      	add	r7, sp, #0
 8001c00:	6078      	str	r0, [r7, #4]
 8001c02:	460b      	mov	r3, r1
 8001c04:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	68db      	ldr	r3, [r3, #12]
 8001c0a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001c0c:	887a      	ldrh	r2, [r7, #2]
 8001c0e:	68fb      	ldr	r3, [r7, #12]
 8001c10:	4013      	ands	r3, r2
 8001c12:	041a      	lsls	r2, r3, #16
 8001c14:	68fb      	ldr	r3, [r7, #12]
 8001c16:	43d9      	mvns	r1, r3
 8001c18:	887b      	ldrh	r3, [r7, #2]
 8001c1a:	400b      	ands	r3, r1
 8001c1c:	431a      	orrs	r2, r3
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	611a      	str	r2, [r3, #16]
}
 8001c22:	bf00      	nop
 8001c24:	3714      	adds	r7, #20
 8001c26:	46bd      	mov	sp, r7
 8001c28:	bc80      	pop	{r7}
 8001c2a:	4770      	bx	lr

08001c2c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001c2c:	b580      	push	{r7, lr}
 8001c2e:	b086      	sub	sp, #24
 8001c30:	af00      	add	r7, sp, #0
 8001c32:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	2b00      	cmp	r3, #0
 8001c38:	d101      	bne.n	8001c3e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001c3a:	2301      	movs	r3, #1
 8001c3c:	e272      	b.n	8002124 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	f003 0301 	and.w	r3, r3, #1
 8001c46:	2b00      	cmp	r3, #0
 8001c48:	f000 8087 	beq.w	8001d5a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001c4c:	4b92      	ldr	r3, [pc, #584]	; (8001e98 <HAL_RCC_OscConfig+0x26c>)
 8001c4e:	685b      	ldr	r3, [r3, #4]
 8001c50:	f003 030c 	and.w	r3, r3, #12
 8001c54:	2b04      	cmp	r3, #4
 8001c56:	d00c      	beq.n	8001c72 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001c58:	4b8f      	ldr	r3, [pc, #572]	; (8001e98 <HAL_RCC_OscConfig+0x26c>)
 8001c5a:	685b      	ldr	r3, [r3, #4]
 8001c5c:	f003 030c 	and.w	r3, r3, #12
 8001c60:	2b08      	cmp	r3, #8
 8001c62:	d112      	bne.n	8001c8a <HAL_RCC_OscConfig+0x5e>
 8001c64:	4b8c      	ldr	r3, [pc, #560]	; (8001e98 <HAL_RCC_OscConfig+0x26c>)
 8001c66:	685b      	ldr	r3, [r3, #4]
 8001c68:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001c6c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001c70:	d10b      	bne.n	8001c8a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001c72:	4b89      	ldr	r3, [pc, #548]	; (8001e98 <HAL_RCC_OscConfig+0x26c>)
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c7a:	2b00      	cmp	r3, #0
 8001c7c:	d06c      	beq.n	8001d58 <HAL_RCC_OscConfig+0x12c>
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	685b      	ldr	r3, [r3, #4]
 8001c82:	2b00      	cmp	r3, #0
 8001c84:	d168      	bne.n	8001d58 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001c86:	2301      	movs	r3, #1
 8001c88:	e24c      	b.n	8002124 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	685b      	ldr	r3, [r3, #4]
 8001c8e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001c92:	d106      	bne.n	8001ca2 <HAL_RCC_OscConfig+0x76>
 8001c94:	4b80      	ldr	r3, [pc, #512]	; (8001e98 <HAL_RCC_OscConfig+0x26c>)
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	4a7f      	ldr	r2, [pc, #508]	; (8001e98 <HAL_RCC_OscConfig+0x26c>)
 8001c9a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001c9e:	6013      	str	r3, [r2, #0]
 8001ca0:	e02e      	b.n	8001d00 <HAL_RCC_OscConfig+0xd4>
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	685b      	ldr	r3, [r3, #4]
 8001ca6:	2b00      	cmp	r3, #0
 8001ca8:	d10c      	bne.n	8001cc4 <HAL_RCC_OscConfig+0x98>
 8001caa:	4b7b      	ldr	r3, [pc, #492]	; (8001e98 <HAL_RCC_OscConfig+0x26c>)
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	4a7a      	ldr	r2, [pc, #488]	; (8001e98 <HAL_RCC_OscConfig+0x26c>)
 8001cb0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001cb4:	6013      	str	r3, [r2, #0]
 8001cb6:	4b78      	ldr	r3, [pc, #480]	; (8001e98 <HAL_RCC_OscConfig+0x26c>)
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	4a77      	ldr	r2, [pc, #476]	; (8001e98 <HAL_RCC_OscConfig+0x26c>)
 8001cbc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001cc0:	6013      	str	r3, [r2, #0]
 8001cc2:	e01d      	b.n	8001d00 <HAL_RCC_OscConfig+0xd4>
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	685b      	ldr	r3, [r3, #4]
 8001cc8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001ccc:	d10c      	bne.n	8001ce8 <HAL_RCC_OscConfig+0xbc>
 8001cce:	4b72      	ldr	r3, [pc, #456]	; (8001e98 <HAL_RCC_OscConfig+0x26c>)
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	4a71      	ldr	r2, [pc, #452]	; (8001e98 <HAL_RCC_OscConfig+0x26c>)
 8001cd4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001cd8:	6013      	str	r3, [r2, #0]
 8001cda:	4b6f      	ldr	r3, [pc, #444]	; (8001e98 <HAL_RCC_OscConfig+0x26c>)
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	4a6e      	ldr	r2, [pc, #440]	; (8001e98 <HAL_RCC_OscConfig+0x26c>)
 8001ce0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001ce4:	6013      	str	r3, [r2, #0]
 8001ce6:	e00b      	b.n	8001d00 <HAL_RCC_OscConfig+0xd4>
 8001ce8:	4b6b      	ldr	r3, [pc, #428]	; (8001e98 <HAL_RCC_OscConfig+0x26c>)
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	4a6a      	ldr	r2, [pc, #424]	; (8001e98 <HAL_RCC_OscConfig+0x26c>)
 8001cee:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001cf2:	6013      	str	r3, [r2, #0]
 8001cf4:	4b68      	ldr	r3, [pc, #416]	; (8001e98 <HAL_RCC_OscConfig+0x26c>)
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	4a67      	ldr	r2, [pc, #412]	; (8001e98 <HAL_RCC_OscConfig+0x26c>)
 8001cfa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001cfe:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	685b      	ldr	r3, [r3, #4]
 8001d04:	2b00      	cmp	r3, #0
 8001d06:	d013      	beq.n	8001d30 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d08:	f7ff fcb4 	bl	8001674 <HAL_GetTick>
 8001d0c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001d0e:	e008      	b.n	8001d22 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001d10:	f7ff fcb0 	bl	8001674 <HAL_GetTick>
 8001d14:	4602      	mov	r2, r0
 8001d16:	693b      	ldr	r3, [r7, #16]
 8001d18:	1ad3      	subs	r3, r2, r3
 8001d1a:	2b64      	cmp	r3, #100	; 0x64
 8001d1c:	d901      	bls.n	8001d22 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001d1e:	2303      	movs	r3, #3
 8001d20:	e200      	b.n	8002124 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001d22:	4b5d      	ldr	r3, [pc, #372]	; (8001e98 <HAL_RCC_OscConfig+0x26c>)
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d2a:	2b00      	cmp	r3, #0
 8001d2c:	d0f0      	beq.n	8001d10 <HAL_RCC_OscConfig+0xe4>
 8001d2e:	e014      	b.n	8001d5a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d30:	f7ff fca0 	bl	8001674 <HAL_GetTick>
 8001d34:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001d36:	e008      	b.n	8001d4a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001d38:	f7ff fc9c 	bl	8001674 <HAL_GetTick>
 8001d3c:	4602      	mov	r2, r0
 8001d3e:	693b      	ldr	r3, [r7, #16]
 8001d40:	1ad3      	subs	r3, r2, r3
 8001d42:	2b64      	cmp	r3, #100	; 0x64
 8001d44:	d901      	bls.n	8001d4a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001d46:	2303      	movs	r3, #3
 8001d48:	e1ec      	b.n	8002124 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001d4a:	4b53      	ldr	r3, [pc, #332]	; (8001e98 <HAL_RCC_OscConfig+0x26c>)
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d52:	2b00      	cmp	r3, #0
 8001d54:	d1f0      	bne.n	8001d38 <HAL_RCC_OscConfig+0x10c>
 8001d56:	e000      	b.n	8001d5a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001d58:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	f003 0302 	and.w	r3, r3, #2
 8001d62:	2b00      	cmp	r3, #0
 8001d64:	d063      	beq.n	8001e2e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001d66:	4b4c      	ldr	r3, [pc, #304]	; (8001e98 <HAL_RCC_OscConfig+0x26c>)
 8001d68:	685b      	ldr	r3, [r3, #4]
 8001d6a:	f003 030c 	and.w	r3, r3, #12
 8001d6e:	2b00      	cmp	r3, #0
 8001d70:	d00b      	beq.n	8001d8a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001d72:	4b49      	ldr	r3, [pc, #292]	; (8001e98 <HAL_RCC_OscConfig+0x26c>)
 8001d74:	685b      	ldr	r3, [r3, #4]
 8001d76:	f003 030c 	and.w	r3, r3, #12
 8001d7a:	2b08      	cmp	r3, #8
 8001d7c:	d11c      	bne.n	8001db8 <HAL_RCC_OscConfig+0x18c>
 8001d7e:	4b46      	ldr	r3, [pc, #280]	; (8001e98 <HAL_RCC_OscConfig+0x26c>)
 8001d80:	685b      	ldr	r3, [r3, #4]
 8001d82:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001d86:	2b00      	cmp	r3, #0
 8001d88:	d116      	bne.n	8001db8 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001d8a:	4b43      	ldr	r3, [pc, #268]	; (8001e98 <HAL_RCC_OscConfig+0x26c>)
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	f003 0302 	and.w	r3, r3, #2
 8001d92:	2b00      	cmp	r3, #0
 8001d94:	d005      	beq.n	8001da2 <HAL_RCC_OscConfig+0x176>
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	691b      	ldr	r3, [r3, #16]
 8001d9a:	2b01      	cmp	r3, #1
 8001d9c:	d001      	beq.n	8001da2 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001d9e:	2301      	movs	r3, #1
 8001da0:	e1c0      	b.n	8002124 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001da2:	4b3d      	ldr	r3, [pc, #244]	; (8001e98 <HAL_RCC_OscConfig+0x26c>)
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	695b      	ldr	r3, [r3, #20]
 8001dae:	00db      	lsls	r3, r3, #3
 8001db0:	4939      	ldr	r1, [pc, #228]	; (8001e98 <HAL_RCC_OscConfig+0x26c>)
 8001db2:	4313      	orrs	r3, r2
 8001db4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001db6:	e03a      	b.n	8001e2e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	691b      	ldr	r3, [r3, #16]
 8001dbc:	2b00      	cmp	r3, #0
 8001dbe:	d020      	beq.n	8001e02 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001dc0:	4b36      	ldr	r3, [pc, #216]	; (8001e9c <HAL_RCC_OscConfig+0x270>)
 8001dc2:	2201      	movs	r2, #1
 8001dc4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001dc6:	f7ff fc55 	bl	8001674 <HAL_GetTick>
 8001dca:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001dcc:	e008      	b.n	8001de0 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001dce:	f7ff fc51 	bl	8001674 <HAL_GetTick>
 8001dd2:	4602      	mov	r2, r0
 8001dd4:	693b      	ldr	r3, [r7, #16]
 8001dd6:	1ad3      	subs	r3, r2, r3
 8001dd8:	2b02      	cmp	r3, #2
 8001dda:	d901      	bls.n	8001de0 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001ddc:	2303      	movs	r3, #3
 8001dde:	e1a1      	b.n	8002124 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001de0:	4b2d      	ldr	r3, [pc, #180]	; (8001e98 <HAL_RCC_OscConfig+0x26c>)
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	f003 0302 	and.w	r3, r3, #2
 8001de8:	2b00      	cmp	r3, #0
 8001dea:	d0f0      	beq.n	8001dce <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001dec:	4b2a      	ldr	r3, [pc, #168]	; (8001e98 <HAL_RCC_OscConfig+0x26c>)
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	695b      	ldr	r3, [r3, #20]
 8001df8:	00db      	lsls	r3, r3, #3
 8001dfa:	4927      	ldr	r1, [pc, #156]	; (8001e98 <HAL_RCC_OscConfig+0x26c>)
 8001dfc:	4313      	orrs	r3, r2
 8001dfe:	600b      	str	r3, [r1, #0]
 8001e00:	e015      	b.n	8001e2e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001e02:	4b26      	ldr	r3, [pc, #152]	; (8001e9c <HAL_RCC_OscConfig+0x270>)
 8001e04:	2200      	movs	r2, #0
 8001e06:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e08:	f7ff fc34 	bl	8001674 <HAL_GetTick>
 8001e0c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001e0e:	e008      	b.n	8001e22 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001e10:	f7ff fc30 	bl	8001674 <HAL_GetTick>
 8001e14:	4602      	mov	r2, r0
 8001e16:	693b      	ldr	r3, [r7, #16]
 8001e18:	1ad3      	subs	r3, r2, r3
 8001e1a:	2b02      	cmp	r3, #2
 8001e1c:	d901      	bls.n	8001e22 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001e1e:	2303      	movs	r3, #3
 8001e20:	e180      	b.n	8002124 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001e22:	4b1d      	ldr	r3, [pc, #116]	; (8001e98 <HAL_RCC_OscConfig+0x26c>)
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	f003 0302 	and.w	r3, r3, #2
 8001e2a:	2b00      	cmp	r3, #0
 8001e2c:	d1f0      	bne.n	8001e10 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	f003 0308 	and.w	r3, r3, #8
 8001e36:	2b00      	cmp	r3, #0
 8001e38:	d03a      	beq.n	8001eb0 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	699b      	ldr	r3, [r3, #24]
 8001e3e:	2b00      	cmp	r3, #0
 8001e40:	d019      	beq.n	8001e76 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001e42:	4b17      	ldr	r3, [pc, #92]	; (8001ea0 <HAL_RCC_OscConfig+0x274>)
 8001e44:	2201      	movs	r2, #1
 8001e46:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001e48:	f7ff fc14 	bl	8001674 <HAL_GetTick>
 8001e4c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001e4e:	e008      	b.n	8001e62 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001e50:	f7ff fc10 	bl	8001674 <HAL_GetTick>
 8001e54:	4602      	mov	r2, r0
 8001e56:	693b      	ldr	r3, [r7, #16]
 8001e58:	1ad3      	subs	r3, r2, r3
 8001e5a:	2b02      	cmp	r3, #2
 8001e5c:	d901      	bls.n	8001e62 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001e5e:	2303      	movs	r3, #3
 8001e60:	e160      	b.n	8002124 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001e62:	4b0d      	ldr	r3, [pc, #52]	; (8001e98 <HAL_RCC_OscConfig+0x26c>)
 8001e64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e66:	f003 0302 	and.w	r3, r3, #2
 8001e6a:	2b00      	cmp	r3, #0
 8001e6c:	d0f0      	beq.n	8001e50 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001e6e:	2001      	movs	r0, #1
 8001e70:	f000 faa6 	bl	80023c0 <RCC_Delay>
 8001e74:	e01c      	b.n	8001eb0 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001e76:	4b0a      	ldr	r3, [pc, #40]	; (8001ea0 <HAL_RCC_OscConfig+0x274>)
 8001e78:	2200      	movs	r2, #0
 8001e7a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001e7c:	f7ff fbfa 	bl	8001674 <HAL_GetTick>
 8001e80:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001e82:	e00f      	b.n	8001ea4 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001e84:	f7ff fbf6 	bl	8001674 <HAL_GetTick>
 8001e88:	4602      	mov	r2, r0
 8001e8a:	693b      	ldr	r3, [r7, #16]
 8001e8c:	1ad3      	subs	r3, r2, r3
 8001e8e:	2b02      	cmp	r3, #2
 8001e90:	d908      	bls.n	8001ea4 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001e92:	2303      	movs	r3, #3
 8001e94:	e146      	b.n	8002124 <HAL_RCC_OscConfig+0x4f8>
 8001e96:	bf00      	nop
 8001e98:	40021000 	.word	0x40021000
 8001e9c:	42420000 	.word	0x42420000
 8001ea0:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001ea4:	4b92      	ldr	r3, [pc, #584]	; (80020f0 <HAL_RCC_OscConfig+0x4c4>)
 8001ea6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ea8:	f003 0302 	and.w	r3, r3, #2
 8001eac:	2b00      	cmp	r3, #0
 8001eae:	d1e9      	bne.n	8001e84 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	f003 0304 	and.w	r3, r3, #4
 8001eb8:	2b00      	cmp	r3, #0
 8001eba:	f000 80a6 	beq.w	800200a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001ebe:	2300      	movs	r3, #0
 8001ec0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001ec2:	4b8b      	ldr	r3, [pc, #556]	; (80020f0 <HAL_RCC_OscConfig+0x4c4>)
 8001ec4:	69db      	ldr	r3, [r3, #28]
 8001ec6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001eca:	2b00      	cmp	r3, #0
 8001ecc:	d10d      	bne.n	8001eea <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001ece:	4b88      	ldr	r3, [pc, #544]	; (80020f0 <HAL_RCC_OscConfig+0x4c4>)
 8001ed0:	69db      	ldr	r3, [r3, #28]
 8001ed2:	4a87      	ldr	r2, [pc, #540]	; (80020f0 <HAL_RCC_OscConfig+0x4c4>)
 8001ed4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001ed8:	61d3      	str	r3, [r2, #28]
 8001eda:	4b85      	ldr	r3, [pc, #532]	; (80020f0 <HAL_RCC_OscConfig+0x4c4>)
 8001edc:	69db      	ldr	r3, [r3, #28]
 8001ede:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ee2:	60bb      	str	r3, [r7, #8]
 8001ee4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001ee6:	2301      	movs	r3, #1
 8001ee8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001eea:	4b82      	ldr	r3, [pc, #520]	; (80020f4 <HAL_RCC_OscConfig+0x4c8>)
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ef2:	2b00      	cmp	r3, #0
 8001ef4:	d118      	bne.n	8001f28 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001ef6:	4b7f      	ldr	r3, [pc, #508]	; (80020f4 <HAL_RCC_OscConfig+0x4c8>)
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	4a7e      	ldr	r2, [pc, #504]	; (80020f4 <HAL_RCC_OscConfig+0x4c8>)
 8001efc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001f00:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001f02:	f7ff fbb7 	bl	8001674 <HAL_GetTick>
 8001f06:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f08:	e008      	b.n	8001f1c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001f0a:	f7ff fbb3 	bl	8001674 <HAL_GetTick>
 8001f0e:	4602      	mov	r2, r0
 8001f10:	693b      	ldr	r3, [r7, #16]
 8001f12:	1ad3      	subs	r3, r2, r3
 8001f14:	2b64      	cmp	r3, #100	; 0x64
 8001f16:	d901      	bls.n	8001f1c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001f18:	2303      	movs	r3, #3
 8001f1a:	e103      	b.n	8002124 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f1c:	4b75      	ldr	r3, [pc, #468]	; (80020f4 <HAL_RCC_OscConfig+0x4c8>)
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f24:	2b00      	cmp	r3, #0
 8001f26:	d0f0      	beq.n	8001f0a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	68db      	ldr	r3, [r3, #12]
 8001f2c:	2b01      	cmp	r3, #1
 8001f2e:	d106      	bne.n	8001f3e <HAL_RCC_OscConfig+0x312>
 8001f30:	4b6f      	ldr	r3, [pc, #444]	; (80020f0 <HAL_RCC_OscConfig+0x4c4>)
 8001f32:	6a1b      	ldr	r3, [r3, #32]
 8001f34:	4a6e      	ldr	r2, [pc, #440]	; (80020f0 <HAL_RCC_OscConfig+0x4c4>)
 8001f36:	f043 0301 	orr.w	r3, r3, #1
 8001f3a:	6213      	str	r3, [r2, #32]
 8001f3c:	e02d      	b.n	8001f9a <HAL_RCC_OscConfig+0x36e>
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	68db      	ldr	r3, [r3, #12]
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	d10c      	bne.n	8001f60 <HAL_RCC_OscConfig+0x334>
 8001f46:	4b6a      	ldr	r3, [pc, #424]	; (80020f0 <HAL_RCC_OscConfig+0x4c4>)
 8001f48:	6a1b      	ldr	r3, [r3, #32]
 8001f4a:	4a69      	ldr	r2, [pc, #420]	; (80020f0 <HAL_RCC_OscConfig+0x4c4>)
 8001f4c:	f023 0301 	bic.w	r3, r3, #1
 8001f50:	6213      	str	r3, [r2, #32]
 8001f52:	4b67      	ldr	r3, [pc, #412]	; (80020f0 <HAL_RCC_OscConfig+0x4c4>)
 8001f54:	6a1b      	ldr	r3, [r3, #32]
 8001f56:	4a66      	ldr	r2, [pc, #408]	; (80020f0 <HAL_RCC_OscConfig+0x4c4>)
 8001f58:	f023 0304 	bic.w	r3, r3, #4
 8001f5c:	6213      	str	r3, [r2, #32]
 8001f5e:	e01c      	b.n	8001f9a <HAL_RCC_OscConfig+0x36e>
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	68db      	ldr	r3, [r3, #12]
 8001f64:	2b05      	cmp	r3, #5
 8001f66:	d10c      	bne.n	8001f82 <HAL_RCC_OscConfig+0x356>
 8001f68:	4b61      	ldr	r3, [pc, #388]	; (80020f0 <HAL_RCC_OscConfig+0x4c4>)
 8001f6a:	6a1b      	ldr	r3, [r3, #32]
 8001f6c:	4a60      	ldr	r2, [pc, #384]	; (80020f0 <HAL_RCC_OscConfig+0x4c4>)
 8001f6e:	f043 0304 	orr.w	r3, r3, #4
 8001f72:	6213      	str	r3, [r2, #32]
 8001f74:	4b5e      	ldr	r3, [pc, #376]	; (80020f0 <HAL_RCC_OscConfig+0x4c4>)
 8001f76:	6a1b      	ldr	r3, [r3, #32]
 8001f78:	4a5d      	ldr	r2, [pc, #372]	; (80020f0 <HAL_RCC_OscConfig+0x4c4>)
 8001f7a:	f043 0301 	orr.w	r3, r3, #1
 8001f7e:	6213      	str	r3, [r2, #32]
 8001f80:	e00b      	b.n	8001f9a <HAL_RCC_OscConfig+0x36e>
 8001f82:	4b5b      	ldr	r3, [pc, #364]	; (80020f0 <HAL_RCC_OscConfig+0x4c4>)
 8001f84:	6a1b      	ldr	r3, [r3, #32]
 8001f86:	4a5a      	ldr	r2, [pc, #360]	; (80020f0 <HAL_RCC_OscConfig+0x4c4>)
 8001f88:	f023 0301 	bic.w	r3, r3, #1
 8001f8c:	6213      	str	r3, [r2, #32]
 8001f8e:	4b58      	ldr	r3, [pc, #352]	; (80020f0 <HAL_RCC_OscConfig+0x4c4>)
 8001f90:	6a1b      	ldr	r3, [r3, #32]
 8001f92:	4a57      	ldr	r2, [pc, #348]	; (80020f0 <HAL_RCC_OscConfig+0x4c4>)
 8001f94:	f023 0304 	bic.w	r3, r3, #4
 8001f98:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	68db      	ldr	r3, [r3, #12]
 8001f9e:	2b00      	cmp	r3, #0
 8001fa0:	d015      	beq.n	8001fce <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001fa2:	f7ff fb67 	bl	8001674 <HAL_GetTick>
 8001fa6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001fa8:	e00a      	b.n	8001fc0 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001faa:	f7ff fb63 	bl	8001674 <HAL_GetTick>
 8001fae:	4602      	mov	r2, r0
 8001fb0:	693b      	ldr	r3, [r7, #16]
 8001fb2:	1ad3      	subs	r3, r2, r3
 8001fb4:	f241 3288 	movw	r2, #5000	; 0x1388
 8001fb8:	4293      	cmp	r3, r2
 8001fba:	d901      	bls.n	8001fc0 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001fbc:	2303      	movs	r3, #3
 8001fbe:	e0b1      	b.n	8002124 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001fc0:	4b4b      	ldr	r3, [pc, #300]	; (80020f0 <HAL_RCC_OscConfig+0x4c4>)
 8001fc2:	6a1b      	ldr	r3, [r3, #32]
 8001fc4:	f003 0302 	and.w	r3, r3, #2
 8001fc8:	2b00      	cmp	r3, #0
 8001fca:	d0ee      	beq.n	8001faa <HAL_RCC_OscConfig+0x37e>
 8001fcc:	e014      	b.n	8001ff8 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001fce:	f7ff fb51 	bl	8001674 <HAL_GetTick>
 8001fd2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001fd4:	e00a      	b.n	8001fec <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001fd6:	f7ff fb4d 	bl	8001674 <HAL_GetTick>
 8001fda:	4602      	mov	r2, r0
 8001fdc:	693b      	ldr	r3, [r7, #16]
 8001fde:	1ad3      	subs	r3, r2, r3
 8001fe0:	f241 3288 	movw	r2, #5000	; 0x1388
 8001fe4:	4293      	cmp	r3, r2
 8001fe6:	d901      	bls.n	8001fec <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001fe8:	2303      	movs	r3, #3
 8001fea:	e09b      	b.n	8002124 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001fec:	4b40      	ldr	r3, [pc, #256]	; (80020f0 <HAL_RCC_OscConfig+0x4c4>)
 8001fee:	6a1b      	ldr	r3, [r3, #32]
 8001ff0:	f003 0302 	and.w	r3, r3, #2
 8001ff4:	2b00      	cmp	r3, #0
 8001ff6:	d1ee      	bne.n	8001fd6 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001ff8:	7dfb      	ldrb	r3, [r7, #23]
 8001ffa:	2b01      	cmp	r3, #1
 8001ffc:	d105      	bne.n	800200a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001ffe:	4b3c      	ldr	r3, [pc, #240]	; (80020f0 <HAL_RCC_OscConfig+0x4c4>)
 8002000:	69db      	ldr	r3, [r3, #28]
 8002002:	4a3b      	ldr	r2, [pc, #236]	; (80020f0 <HAL_RCC_OscConfig+0x4c4>)
 8002004:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002008:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	69db      	ldr	r3, [r3, #28]
 800200e:	2b00      	cmp	r3, #0
 8002010:	f000 8087 	beq.w	8002122 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002014:	4b36      	ldr	r3, [pc, #216]	; (80020f0 <HAL_RCC_OscConfig+0x4c4>)
 8002016:	685b      	ldr	r3, [r3, #4]
 8002018:	f003 030c 	and.w	r3, r3, #12
 800201c:	2b08      	cmp	r3, #8
 800201e:	d061      	beq.n	80020e4 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	69db      	ldr	r3, [r3, #28]
 8002024:	2b02      	cmp	r3, #2
 8002026:	d146      	bne.n	80020b6 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002028:	4b33      	ldr	r3, [pc, #204]	; (80020f8 <HAL_RCC_OscConfig+0x4cc>)
 800202a:	2200      	movs	r2, #0
 800202c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800202e:	f7ff fb21 	bl	8001674 <HAL_GetTick>
 8002032:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002034:	e008      	b.n	8002048 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002036:	f7ff fb1d 	bl	8001674 <HAL_GetTick>
 800203a:	4602      	mov	r2, r0
 800203c:	693b      	ldr	r3, [r7, #16]
 800203e:	1ad3      	subs	r3, r2, r3
 8002040:	2b02      	cmp	r3, #2
 8002042:	d901      	bls.n	8002048 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002044:	2303      	movs	r3, #3
 8002046:	e06d      	b.n	8002124 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002048:	4b29      	ldr	r3, [pc, #164]	; (80020f0 <HAL_RCC_OscConfig+0x4c4>)
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002050:	2b00      	cmp	r3, #0
 8002052:	d1f0      	bne.n	8002036 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	6a1b      	ldr	r3, [r3, #32]
 8002058:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800205c:	d108      	bne.n	8002070 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800205e:	4b24      	ldr	r3, [pc, #144]	; (80020f0 <HAL_RCC_OscConfig+0x4c4>)
 8002060:	685b      	ldr	r3, [r3, #4]
 8002062:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	689b      	ldr	r3, [r3, #8]
 800206a:	4921      	ldr	r1, [pc, #132]	; (80020f0 <HAL_RCC_OscConfig+0x4c4>)
 800206c:	4313      	orrs	r3, r2
 800206e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002070:	4b1f      	ldr	r3, [pc, #124]	; (80020f0 <HAL_RCC_OscConfig+0x4c4>)
 8002072:	685b      	ldr	r3, [r3, #4]
 8002074:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	6a19      	ldr	r1, [r3, #32]
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002080:	430b      	orrs	r3, r1
 8002082:	491b      	ldr	r1, [pc, #108]	; (80020f0 <HAL_RCC_OscConfig+0x4c4>)
 8002084:	4313      	orrs	r3, r2
 8002086:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002088:	4b1b      	ldr	r3, [pc, #108]	; (80020f8 <HAL_RCC_OscConfig+0x4cc>)
 800208a:	2201      	movs	r2, #1
 800208c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800208e:	f7ff faf1 	bl	8001674 <HAL_GetTick>
 8002092:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002094:	e008      	b.n	80020a8 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002096:	f7ff faed 	bl	8001674 <HAL_GetTick>
 800209a:	4602      	mov	r2, r0
 800209c:	693b      	ldr	r3, [r7, #16]
 800209e:	1ad3      	subs	r3, r2, r3
 80020a0:	2b02      	cmp	r3, #2
 80020a2:	d901      	bls.n	80020a8 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80020a4:	2303      	movs	r3, #3
 80020a6:	e03d      	b.n	8002124 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80020a8:	4b11      	ldr	r3, [pc, #68]	; (80020f0 <HAL_RCC_OscConfig+0x4c4>)
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80020b0:	2b00      	cmp	r3, #0
 80020b2:	d0f0      	beq.n	8002096 <HAL_RCC_OscConfig+0x46a>
 80020b4:	e035      	b.n	8002122 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80020b6:	4b10      	ldr	r3, [pc, #64]	; (80020f8 <HAL_RCC_OscConfig+0x4cc>)
 80020b8:	2200      	movs	r2, #0
 80020ba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80020bc:	f7ff fada 	bl	8001674 <HAL_GetTick>
 80020c0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80020c2:	e008      	b.n	80020d6 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80020c4:	f7ff fad6 	bl	8001674 <HAL_GetTick>
 80020c8:	4602      	mov	r2, r0
 80020ca:	693b      	ldr	r3, [r7, #16]
 80020cc:	1ad3      	subs	r3, r2, r3
 80020ce:	2b02      	cmp	r3, #2
 80020d0:	d901      	bls.n	80020d6 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80020d2:	2303      	movs	r3, #3
 80020d4:	e026      	b.n	8002124 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80020d6:	4b06      	ldr	r3, [pc, #24]	; (80020f0 <HAL_RCC_OscConfig+0x4c4>)
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80020de:	2b00      	cmp	r3, #0
 80020e0:	d1f0      	bne.n	80020c4 <HAL_RCC_OscConfig+0x498>
 80020e2:	e01e      	b.n	8002122 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	69db      	ldr	r3, [r3, #28]
 80020e8:	2b01      	cmp	r3, #1
 80020ea:	d107      	bne.n	80020fc <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80020ec:	2301      	movs	r3, #1
 80020ee:	e019      	b.n	8002124 <HAL_RCC_OscConfig+0x4f8>
 80020f0:	40021000 	.word	0x40021000
 80020f4:	40007000 	.word	0x40007000
 80020f8:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80020fc:	4b0b      	ldr	r3, [pc, #44]	; (800212c <HAL_RCC_OscConfig+0x500>)
 80020fe:	685b      	ldr	r3, [r3, #4]
 8002100:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002102:	68fb      	ldr	r3, [r7, #12]
 8002104:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	6a1b      	ldr	r3, [r3, #32]
 800210c:	429a      	cmp	r2, r3
 800210e:	d106      	bne.n	800211e <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002110:	68fb      	ldr	r3, [r7, #12]
 8002112:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800211a:	429a      	cmp	r2, r3
 800211c:	d001      	beq.n	8002122 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800211e:	2301      	movs	r3, #1
 8002120:	e000      	b.n	8002124 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8002122:	2300      	movs	r3, #0
}
 8002124:	4618      	mov	r0, r3
 8002126:	3718      	adds	r7, #24
 8002128:	46bd      	mov	sp, r7
 800212a:	bd80      	pop	{r7, pc}
 800212c:	40021000 	.word	0x40021000

08002130 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002130:	b580      	push	{r7, lr}
 8002132:	b084      	sub	sp, #16
 8002134:	af00      	add	r7, sp, #0
 8002136:	6078      	str	r0, [r7, #4]
 8002138:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	2b00      	cmp	r3, #0
 800213e:	d101      	bne.n	8002144 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002140:	2301      	movs	r3, #1
 8002142:	e0d0      	b.n	80022e6 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002144:	4b6a      	ldr	r3, [pc, #424]	; (80022f0 <HAL_RCC_ClockConfig+0x1c0>)
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	f003 0307 	and.w	r3, r3, #7
 800214c:	683a      	ldr	r2, [r7, #0]
 800214e:	429a      	cmp	r2, r3
 8002150:	d910      	bls.n	8002174 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002152:	4b67      	ldr	r3, [pc, #412]	; (80022f0 <HAL_RCC_ClockConfig+0x1c0>)
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	f023 0207 	bic.w	r2, r3, #7
 800215a:	4965      	ldr	r1, [pc, #404]	; (80022f0 <HAL_RCC_ClockConfig+0x1c0>)
 800215c:	683b      	ldr	r3, [r7, #0]
 800215e:	4313      	orrs	r3, r2
 8002160:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002162:	4b63      	ldr	r3, [pc, #396]	; (80022f0 <HAL_RCC_ClockConfig+0x1c0>)
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	f003 0307 	and.w	r3, r3, #7
 800216a:	683a      	ldr	r2, [r7, #0]
 800216c:	429a      	cmp	r2, r3
 800216e:	d001      	beq.n	8002174 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002170:	2301      	movs	r3, #1
 8002172:	e0b8      	b.n	80022e6 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	f003 0302 	and.w	r3, r3, #2
 800217c:	2b00      	cmp	r3, #0
 800217e:	d020      	beq.n	80021c2 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	f003 0304 	and.w	r3, r3, #4
 8002188:	2b00      	cmp	r3, #0
 800218a:	d005      	beq.n	8002198 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800218c:	4b59      	ldr	r3, [pc, #356]	; (80022f4 <HAL_RCC_ClockConfig+0x1c4>)
 800218e:	685b      	ldr	r3, [r3, #4]
 8002190:	4a58      	ldr	r2, [pc, #352]	; (80022f4 <HAL_RCC_ClockConfig+0x1c4>)
 8002192:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002196:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	f003 0308 	and.w	r3, r3, #8
 80021a0:	2b00      	cmp	r3, #0
 80021a2:	d005      	beq.n	80021b0 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80021a4:	4b53      	ldr	r3, [pc, #332]	; (80022f4 <HAL_RCC_ClockConfig+0x1c4>)
 80021a6:	685b      	ldr	r3, [r3, #4]
 80021a8:	4a52      	ldr	r2, [pc, #328]	; (80022f4 <HAL_RCC_ClockConfig+0x1c4>)
 80021aa:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80021ae:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80021b0:	4b50      	ldr	r3, [pc, #320]	; (80022f4 <HAL_RCC_ClockConfig+0x1c4>)
 80021b2:	685b      	ldr	r3, [r3, #4]
 80021b4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	689b      	ldr	r3, [r3, #8]
 80021bc:	494d      	ldr	r1, [pc, #308]	; (80022f4 <HAL_RCC_ClockConfig+0x1c4>)
 80021be:	4313      	orrs	r3, r2
 80021c0:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	f003 0301 	and.w	r3, r3, #1
 80021ca:	2b00      	cmp	r3, #0
 80021cc:	d040      	beq.n	8002250 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	685b      	ldr	r3, [r3, #4]
 80021d2:	2b01      	cmp	r3, #1
 80021d4:	d107      	bne.n	80021e6 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80021d6:	4b47      	ldr	r3, [pc, #284]	; (80022f4 <HAL_RCC_ClockConfig+0x1c4>)
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80021de:	2b00      	cmp	r3, #0
 80021e0:	d115      	bne.n	800220e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80021e2:	2301      	movs	r3, #1
 80021e4:	e07f      	b.n	80022e6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	685b      	ldr	r3, [r3, #4]
 80021ea:	2b02      	cmp	r3, #2
 80021ec:	d107      	bne.n	80021fe <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80021ee:	4b41      	ldr	r3, [pc, #260]	; (80022f4 <HAL_RCC_ClockConfig+0x1c4>)
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	d109      	bne.n	800220e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80021fa:	2301      	movs	r3, #1
 80021fc:	e073      	b.n	80022e6 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80021fe:	4b3d      	ldr	r3, [pc, #244]	; (80022f4 <HAL_RCC_ClockConfig+0x1c4>)
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	f003 0302 	and.w	r3, r3, #2
 8002206:	2b00      	cmp	r3, #0
 8002208:	d101      	bne.n	800220e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800220a:	2301      	movs	r3, #1
 800220c:	e06b      	b.n	80022e6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800220e:	4b39      	ldr	r3, [pc, #228]	; (80022f4 <HAL_RCC_ClockConfig+0x1c4>)
 8002210:	685b      	ldr	r3, [r3, #4]
 8002212:	f023 0203 	bic.w	r2, r3, #3
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	685b      	ldr	r3, [r3, #4]
 800221a:	4936      	ldr	r1, [pc, #216]	; (80022f4 <HAL_RCC_ClockConfig+0x1c4>)
 800221c:	4313      	orrs	r3, r2
 800221e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002220:	f7ff fa28 	bl	8001674 <HAL_GetTick>
 8002224:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002226:	e00a      	b.n	800223e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002228:	f7ff fa24 	bl	8001674 <HAL_GetTick>
 800222c:	4602      	mov	r2, r0
 800222e:	68fb      	ldr	r3, [r7, #12]
 8002230:	1ad3      	subs	r3, r2, r3
 8002232:	f241 3288 	movw	r2, #5000	; 0x1388
 8002236:	4293      	cmp	r3, r2
 8002238:	d901      	bls.n	800223e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800223a:	2303      	movs	r3, #3
 800223c:	e053      	b.n	80022e6 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800223e:	4b2d      	ldr	r3, [pc, #180]	; (80022f4 <HAL_RCC_ClockConfig+0x1c4>)
 8002240:	685b      	ldr	r3, [r3, #4]
 8002242:	f003 020c 	and.w	r2, r3, #12
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	685b      	ldr	r3, [r3, #4]
 800224a:	009b      	lsls	r3, r3, #2
 800224c:	429a      	cmp	r2, r3
 800224e:	d1eb      	bne.n	8002228 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002250:	4b27      	ldr	r3, [pc, #156]	; (80022f0 <HAL_RCC_ClockConfig+0x1c0>)
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	f003 0307 	and.w	r3, r3, #7
 8002258:	683a      	ldr	r2, [r7, #0]
 800225a:	429a      	cmp	r2, r3
 800225c:	d210      	bcs.n	8002280 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800225e:	4b24      	ldr	r3, [pc, #144]	; (80022f0 <HAL_RCC_ClockConfig+0x1c0>)
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	f023 0207 	bic.w	r2, r3, #7
 8002266:	4922      	ldr	r1, [pc, #136]	; (80022f0 <HAL_RCC_ClockConfig+0x1c0>)
 8002268:	683b      	ldr	r3, [r7, #0]
 800226a:	4313      	orrs	r3, r2
 800226c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800226e:	4b20      	ldr	r3, [pc, #128]	; (80022f0 <HAL_RCC_ClockConfig+0x1c0>)
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	f003 0307 	and.w	r3, r3, #7
 8002276:	683a      	ldr	r2, [r7, #0]
 8002278:	429a      	cmp	r2, r3
 800227a:	d001      	beq.n	8002280 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 800227c:	2301      	movs	r3, #1
 800227e:	e032      	b.n	80022e6 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	f003 0304 	and.w	r3, r3, #4
 8002288:	2b00      	cmp	r3, #0
 800228a:	d008      	beq.n	800229e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800228c:	4b19      	ldr	r3, [pc, #100]	; (80022f4 <HAL_RCC_ClockConfig+0x1c4>)
 800228e:	685b      	ldr	r3, [r3, #4]
 8002290:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	68db      	ldr	r3, [r3, #12]
 8002298:	4916      	ldr	r1, [pc, #88]	; (80022f4 <HAL_RCC_ClockConfig+0x1c4>)
 800229a:	4313      	orrs	r3, r2
 800229c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	f003 0308 	and.w	r3, r3, #8
 80022a6:	2b00      	cmp	r3, #0
 80022a8:	d009      	beq.n	80022be <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80022aa:	4b12      	ldr	r3, [pc, #72]	; (80022f4 <HAL_RCC_ClockConfig+0x1c4>)
 80022ac:	685b      	ldr	r3, [r3, #4]
 80022ae:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	691b      	ldr	r3, [r3, #16]
 80022b6:	00db      	lsls	r3, r3, #3
 80022b8:	490e      	ldr	r1, [pc, #56]	; (80022f4 <HAL_RCC_ClockConfig+0x1c4>)
 80022ba:	4313      	orrs	r3, r2
 80022bc:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80022be:	f000 f821 	bl	8002304 <HAL_RCC_GetSysClockFreq>
 80022c2:	4602      	mov	r2, r0
 80022c4:	4b0b      	ldr	r3, [pc, #44]	; (80022f4 <HAL_RCC_ClockConfig+0x1c4>)
 80022c6:	685b      	ldr	r3, [r3, #4]
 80022c8:	091b      	lsrs	r3, r3, #4
 80022ca:	f003 030f 	and.w	r3, r3, #15
 80022ce:	490a      	ldr	r1, [pc, #40]	; (80022f8 <HAL_RCC_ClockConfig+0x1c8>)
 80022d0:	5ccb      	ldrb	r3, [r1, r3]
 80022d2:	fa22 f303 	lsr.w	r3, r2, r3
 80022d6:	4a09      	ldr	r2, [pc, #36]	; (80022fc <HAL_RCC_ClockConfig+0x1cc>)
 80022d8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80022da:	4b09      	ldr	r3, [pc, #36]	; (8002300 <HAL_RCC_ClockConfig+0x1d0>)
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	4618      	mov	r0, r3
 80022e0:	f7ff f986 	bl	80015f0 <HAL_InitTick>

  return HAL_OK;
 80022e4:	2300      	movs	r3, #0
}
 80022e6:	4618      	mov	r0, r3
 80022e8:	3710      	adds	r7, #16
 80022ea:	46bd      	mov	sp, r7
 80022ec:	bd80      	pop	{r7, pc}
 80022ee:	bf00      	nop
 80022f0:	40022000 	.word	0x40022000
 80022f4:	40021000 	.word	0x40021000
 80022f8:	08002c44 	.word	0x08002c44
 80022fc:	20000050 	.word	0x20000050
 8002300:	20000054 	.word	0x20000054

08002304 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002304:	b490      	push	{r4, r7}
 8002306:	b08a      	sub	sp, #40	; 0x28
 8002308:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 800230a:	4b29      	ldr	r3, [pc, #164]	; (80023b0 <HAL_RCC_GetSysClockFreq+0xac>)
 800230c:	1d3c      	adds	r4, r7, #4
 800230e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002310:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8002314:	f240 2301 	movw	r3, #513	; 0x201
 8002318:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800231a:	2300      	movs	r3, #0
 800231c:	61fb      	str	r3, [r7, #28]
 800231e:	2300      	movs	r3, #0
 8002320:	61bb      	str	r3, [r7, #24]
 8002322:	2300      	movs	r3, #0
 8002324:	627b      	str	r3, [r7, #36]	; 0x24
 8002326:	2300      	movs	r3, #0
 8002328:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800232a:	2300      	movs	r3, #0
 800232c:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800232e:	4b21      	ldr	r3, [pc, #132]	; (80023b4 <HAL_RCC_GetSysClockFreq+0xb0>)
 8002330:	685b      	ldr	r3, [r3, #4]
 8002332:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002334:	69fb      	ldr	r3, [r7, #28]
 8002336:	f003 030c 	and.w	r3, r3, #12
 800233a:	2b04      	cmp	r3, #4
 800233c:	d002      	beq.n	8002344 <HAL_RCC_GetSysClockFreq+0x40>
 800233e:	2b08      	cmp	r3, #8
 8002340:	d003      	beq.n	800234a <HAL_RCC_GetSysClockFreq+0x46>
 8002342:	e02b      	b.n	800239c <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002344:	4b1c      	ldr	r3, [pc, #112]	; (80023b8 <HAL_RCC_GetSysClockFreq+0xb4>)
 8002346:	623b      	str	r3, [r7, #32]
      break;
 8002348:	e02b      	b.n	80023a2 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800234a:	69fb      	ldr	r3, [r7, #28]
 800234c:	0c9b      	lsrs	r3, r3, #18
 800234e:	f003 030f 	and.w	r3, r3, #15
 8002352:	3328      	adds	r3, #40	; 0x28
 8002354:	443b      	add	r3, r7
 8002356:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 800235a:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800235c:	69fb      	ldr	r3, [r7, #28]
 800235e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002362:	2b00      	cmp	r3, #0
 8002364:	d012      	beq.n	800238c <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002366:	4b13      	ldr	r3, [pc, #76]	; (80023b4 <HAL_RCC_GetSysClockFreq+0xb0>)
 8002368:	685b      	ldr	r3, [r3, #4]
 800236a:	0c5b      	lsrs	r3, r3, #17
 800236c:	f003 0301 	and.w	r3, r3, #1
 8002370:	3328      	adds	r3, #40	; 0x28
 8002372:	443b      	add	r3, r7
 8002374:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8002378:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800237a:	697b      	ldr	r3, [r7, #20]
 800237c:	4a0e      	ldr	r2, [pc, #56]	; (80023b8 <HAL_RCC_GetSysClockFreq+0xb4>)
 800237e:	fb03 f202 	mul.w	r2, r3, r2
 8002382:	69bb      	ldr	r3, [r7, #24]
 8002384:	fbb2 f3f3 	udiv	r3, r2, r3
 8002388:	627b      	str	r3, [r7, #36]	; 0x24
 800238a:	e004      	b.n	8002396 <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800238c:	697b      	ldr	r3, [r7, #20]
 800238e:	4a0b      	ldr	r2, [pc, #44]	; (80023bc <HAL_RCC_GetSysClockFreq+0xb8>)
 8002390:	fb02 f303 	mul.w	r3, r2, r3
 8002394:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8002396:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002398:	623b      	str	r3, [r7, #32]
      break;
 800239a:	e002      	b.n	80023a2 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800239c:	4b06      	ldr	r3, [pc, #24]	; (80023b8 <HAL_RCC_GetSysClockFreq+0xb4>)
 800239e:	623b      	str	r3, [r7, #32]
      break;
 80023a0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80023a2:	6a3b      	ldr	r3, [r7, #32]
}
 80023a4:	4618      	mov	r0, r3
 80023a6:	3728      	adds	r7, #40	; 0x28
 80023a8:	46bd      	mov	sp, r7
 80023aa:	bc90      	pop	{r4, r7}
 80023ac:	4770      	bx	lr
 80023ae:	bf00      	nop
 80023b0:	08002c34 	.word	0x08002c34
 80023b4:	40021000 	.word	0x40021000
 80023b8:	007a1200 	.word	0x007a1200
 80023bc:	003d0900 	.word	0x003d0900

080023c0 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80023c0:	b480      	push	{r7}
 80023c2:	b085      	sub	sp, #20
 80023c4:	af00      	add	r7, sp, #0
 80023c6:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80023c8:	4b0a      	ldr	r3, [pc, #40]	; (80023f4 <RCC_Delay+0x34>)
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	4a0a      	ldr	r2, [pc, #40]	; (80023f8 <RCC_Delay+0x38>)
 80023ce:	fba2 2303 	umull	r2, r3, r2, r3
 80023d2:	0a5b      	lsrs	r3, r3, #9
 80023d4:	687a      	ldr	r2, [r7, #4]
 80023d6:	fb02 f303 	mul.w	r3, r2, r3
 80023da:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80023dc:	bf00      	nop
  }
  while (Delay --);
 80023de:	68fb      	ldr	r3, [r7, #12]
 80023e0:	1e5a      	subs	r2, r3, #1
 80023e2:	60fa      	str	r2, [r7, #12]
 80023e4:	2b00      	cmp	r3, #0
 80023e6:	d1f9      	bne.n	80023dc <RCC_Delay+0x1c>
}
 80023e8:	bf00      	nop
 80023ea:	bf00      	nop
 80023ec:	3714      	adds	r7, #20
 80023ee:	46bd      	mov	sp, r7
 80023f0:	bc80      	pop	{r7}
 80023f2:	4770      	bx	lr
 80023f4:	20000050 	.word	0x20000050
 80023f8:	10624dd3 	.word	0x10624dd3

080023fc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80023fc:	b580      	push	{r7, lr}
 80023fe:	b082      	sub	sp, #8
 8002400:	af00      	add	r7, sp, #0
 8002402:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	2b00      	cmp	r3, #0
 8002408:	d101      	bne.n	800240e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800240a:	2301      	movs	r3, #1
 800240c:	e041      	b.n	8002492 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002414:	b2db      	uxtb	r3, r3
 8002416:	2b00      	cmp	r3, #0
 8002418:	d106      	bne.n	8002428 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	2200      	movs	r2, #0
 800241e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002422:	6878      	ldr	r0, [r7, #4]
 8002424:	f7ff f838 	bl	8001498 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	2202      	movs	r2, #2
 800242c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	681a      	ldr	r2, [r3, #0]
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	3304      	adds	r3, #4
 8002438:	4619      	mov	r1, r3
 800243a:	4610      	mov	r0, r2
 800243c:	f000 fa6a 	bl	8002914 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	2201      	movs	r2, #1
 8002444:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	2201      	movs	r2, #1
 800244c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	2201      	movs	r2, #1
 8002454:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	2201      	movs	r2, #1
 800245c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	2201      	movs	r2, #1
 8002464:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	2201      	movs	r2, #1
 800246c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	2201      	movs	r2, #1
 8002474:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	2201      	movs	r2, #1
 800247c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	2201      	movs	r2, #1
 8002484:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	2201      	movs	r2, #1
 800248c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002490:	2300      	movs	r3, #0
}
 8002492:	4618      	mov	r0, r3
 8002494:	3708      	adds	r7, #8
 8002496:	46bd      	mov	sp, r7
 8002498:	bd80      	pop	{r7, pc}
	...

0800249c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800249c:	b480      	push	{r7}
 800249e:	b085      	sub	sp, #20
 80024a0:	af00      	add	r7, sp, #0
 80024a2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80024aa:	b2db      	uxtb	r3, r3
 80024ac:	2b01      	cmp	r3, #1
 80024ae:	d001      	beq.n	80024b4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80024b0:	2301      	movs	r3, #1
 80024b2:	e035      	b.n	8002520 <HAL_TIM_Base_Start_IT+0x84>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	2202      	movs	r2, #2
 80024b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	68da      	ldr	r2, [r3, #12]
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	f042 0201 	orr.w	r2, r2, #1
 80024ca:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	4a16      	ldr	r2, [pc, #88]	; (800252c <HAL_TIM_Base_Start_IT+0x90>)
 80024d2:	4293      	cmp	r3, r2
 80024d4:	d009      	beq.n	80024ea <HAL_TIM_Base_Start_IT+0x4e>
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80024de:	d004      	beq.n	80024ea <HAL_TIM_Base_Start_IT+0x4e>
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	4a12      	ldr	r2, [pc, #72]	; (8002530 <HAL_TIM_Base_Start_IT+0x94>)
 80024e6:	4293      	cmp	r3, r2
 80024e8:	d111      	bne.n	800250e <HAL_TIM_Base_Start_IT+0x72>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	689b      	ldr	r3, [r3, #8]
 80024f0:	f003 0307 	and.w	r3, r3, #7
 80024f4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80024f6:	68fb      	ldr	r3, [r7, #12]
 80024f8:	2b06      	cmp	r3, #6
 80024fa:	d010      	beq.n	800251e <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	681a      	ldr	r2, [r3, #0]
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	f042 0201 	orr.w	r2, r2, #1
 800250a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800250c:	e007      	b.n	800251e <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	681a      	ldr	r2, [r3, #0]
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	f042 0201 	orr.w	r2, r2, #1
 800251c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800251e:	2300      	movs	r3, #0
}
 8002520:	4618      	mov	r0, r3
 8002522:	3714      	adds	r7, #20
 8002524:	46bd      	mov	sp, r7
 8002526:	bc80      	pop	{r7}
 8002528:	4770      	bx	lr
 800252a:	bf00      	nop
 800252c:	40012c00 	.word	0x40012c00
 8002530:	40000400 	.word	0x40000400

08002534 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002534:	b580      	push	{r7, lr}
 8002536:	b082      	sub	sp, #8
 8002538:	af00      	add	r7, sp, #0
 800253a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	691b      	ldr	r3, [r3, #16]
 8002542:	f003 0302 	and.w	r3, r3, #2
 8002546:	2b02      	cmp	r3, #2
 8002548:	d122      	bne.n	8002590 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	68db      	ldr	r3, [r3, #12]
 8002550:	f003 0302 	and.w	r3, r3, #2
 8002554:	2b02      	cmp	r3, #2
 8002556:	d11b      	bne.n	8002590 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	f06f 0202 	mvn.w	r2, #2
 8002560:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	2201      	movs	r2, #1
 8002566:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	699b      	ldr	r3, [r3, #24]
 800256e:	f003 0303 	and.w	r3, r3, #3
 8002572:	2b00      	cmp	r3, #0
 8002574:	d003      	beq.n	800257e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002576:	6878      	ldr	r0, [r7, #4]
 8002578:	f000 f9b1 	bl	80028de <HAL_TIM_IC_CaptureCallback>
 800257c:	e005      	b.n	800258a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800257e:	6878      	ldr	r0, [r7, #4]
 8002580:	f000 f9a4 	bl	80028cc <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002584:	6878      	ldr	r0, [r7, #4]
 8002586:	f000 f9b3 	bl	80028f0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	2200      	movs	r2, #0
 800258e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	691b      	ldr	r3, [r3, #16]
 8002596:	f003 0304 	and.w	r3, r3, #4
 800259a:	2b04      	cmp	r3, #4
 800259c:	d122      	bne.n	80025e4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	68db      	ldr	r3, [r3, #12]
 80025a4:	f003 0304 	and.w	r3, r3, #4
 80025a8:	2b04      	cmp	r3, #4
 80025aa:	d11b      	bne.n	80025e4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	f06f 0204 	mvn.w	r2, #4
 80025b4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	2202      	movs	r2, #2
 80025ba:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	699b      	ldr	r3, [r3, #24]
 80025c2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80025c6:	2b00      	cmp	r3, #0
 80025c8:	d003      	beq.n	80025d2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80025ca:	6878      	ldr	r0, [r7, #4]
 80025cc:	f000 f987 	bl	80028de <HAL_TIM_IC_CaptureCallback>
 80025d0:	e005      	b.n	80025de <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80025d2:	6878      	ldr	r0, [r7, #4]
 80025d4:	f000 f97a 	bl	80028cc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80025d8:	6878      	ldr	r0, [r7, #4]
 80025da:	f000 f989 	bl	80028f0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	2200      	movs	r2, #0
 80025e2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	691b      	ldr	r3, [r3, #16]
 80025ea:	f003 0308 	and.w	r3, r3, #8
 80025ee:	2b08      	cmp	r3, #8
 80025f0:	d122      	bne.n	8002638 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	68db      	ldr	r3, [r3, #12]
 80025f8:	f003 0308 	and.w	r3, r3, #8
 80025fc:	2b08      	cmp	r3, #8
 80025fe:	d11b      	bne.n	8002638 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	f06f 0208 	mvn.w	r2, #8
 8002608:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	2204      	movs	r2, #4
 800260e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	69db      	ldr	r3, [r3, #28]
 8002616:	f003 0303 	and.w	r3, r3, #3
 800261a:	2b00      	cmp	r3, #0
 800261c:	d003      	beq.n	8002626 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800261e:	6878      	ldr	r0, [r7, #4]
 8002620:	f000 f95d 	bl	80028de <HAL_TIM_IC_CaptureCallback>
 8002624:	e005      	b.n	8002632 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002626:	6878      	ldr	r0, [r7, #4]
 8002628:	f000 f950 	bl	80028cc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800262c:	6878      	ldr	r0, [r7, #4]
 800262e:	f000 f95f 	bl	80028f0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	2200      	movs	r2, #0
 8002636:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	691b      	ldr	r3, [r3, #16]
 800263e:	f003 0310 	and.w	r3, r3, #16
 8002642:	2b10      	cmp	r3, #16
 8002644:	d122      	bne.n	800268c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	68db      	ldr	r3, [r3, #12]
 800264c:	f003 0310 	and.w	r3, r3, #16
 8002650:	2b10      	cmp	r3, #16
 8002652:	d11b      	bne.n	800268c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	f06f 0210 	mvn.w	r2, #16
 800265c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	2208      	movs	r2, #8
 8002662:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	69db      	ldr	r3, [r3, #28]
 800266a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800266e:	2b00      	cmp	r3, #0
 8002670:	d003      	beq.n	800267a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002672:	6878      	ldr	r0, [r7, #4]
 8002674:	f000 f933 	bl	80028de <HAL_TIM_IC_CaptureCallback>
 8002678:	e005      	b.n	8002686 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800267a:	6878      	ldr	r0, [r7, #4]
 800267c:	f000 f926 	bl	80028cc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002680:	6878      	ldr	r0, [r7, #4]
 8002682:	f000 f935 	bl	80028f0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	2200      	movs	r2, #0
 800268a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	691b      	ldr	r3, [r3, #16]
 8002692:	f003 0301 	and.w	r3, r3, #1
 8002696:	2b01      	cmp	r3, #1
 8002698:	d10e      	bne.n	80026b8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	68db      	ldr	r3, [r3, #12]
 80026a0:	f003 0301 	and.w	r3, r3, #1
 80026a4:	2b01      	cmp	r3, #1
 80026a6:	d107      	bne.n	80026b8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	f06f 0201 	mvn.w	r2, #1
 80026b0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80026b2:	6878      	ldr	r0, [r7, #4]
 80026b4:	f7fe fb1c 	bl	8000cf0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	691b      	ldr	r3, [r3, #16]
 80026be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80026c2:	2b80      	cmp	r3, #128	; 0x80
 80026c4:	d10e      	bne.n	80026e4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	68db      	ldr	r3, [r3, #12]
 80026cc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80026d0:	2b80      	cmp	r3, #128	; 0x80
 80026d2:	d107      	bne.n	80026e4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80026dc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80026de:	6878      	ldr	r0, [r7, #4]
 80026e0:	f000 fa67 	bl	8002bb2 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	691b      	ldr	r3, [r3, #16]
 80026ea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80026ee:	2b40      	cmp	r3, #64	; 0x40
 80026f0:	d10e      	bne.n	8002710 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	68db      	ldr	r3, [r3, #12]
 80026f8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80026fc:	2b40      	cmp	r3, #64	; 0x40
 80026fe:	d107      	bne.n	8002710 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002708:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800270a:	6878      	ldr	r0, [r7, #4]
 800270c:	f000 f8f9 	bl	8002902 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	691b      	ldr	r3, [r3, #16]
 8002716:	f003 0320 	and.w	r3, r3, #32
 800271a:	2b20      	cmp	r3, #32
 800271c:	d10e      	bne.n	800273c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	68db      	ldr	r3, [r3, #12]
 8002724:	f003 0320 	and.w	r3, r3, #32
 8002728:	2b20      	cmp	r3, #32
 800272a:	d107      	bne.n	800273c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	f06f 0220 	mvn.w	r2, #32
 8002734:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002736:	6878      	ldr	r0, [r7, #4]
 8002738:	f000 fa32 	bl	8002ba0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800273c:	bf00      	nop
 800273e:	3708      	adds	r7, #8
 8002740:	46bd      	mov	sp, r7
 8002742:	bd80      	pop	{r7, pc}

08002744 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002744:	b580      	push	{r7, lr}
 8002746:	b084      	sub	sp, #16
 8002748:	af00      	add	r7, sp, #0
 800274a:	6078      	str	r0, [r7, #4]
 800274c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002754:	2b01      	cmp	r3, #1
 8002756:	d101      	bne.n	800275c <HAL_TIM_ConfigClockSource+0x18>
 8002758:	2302      	movs	r3, #2
 800275a:	e0b3      	b.n	80028c4 <HAL_TIM_ConfigClockSource+0x180>
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	2201      	movs	r2, #1
 8002760:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	2202      	movs	r2, #2
 8002768:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	689b      	ldr	r3, [r3, #8]
 8002772:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002774:	68fb      	ldr	r3, [r7, #12]
 8002776:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800277a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800277c:	68fb      	ldr	r3, [r7, #12]
 800277e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002782:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	68fa      	ldr	r2, [r7, #12]
 800278a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800278c:	683b      	ldr	r3, [r7, #0]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002794:	d03e      	beq.n	8002814 <HAL_TIM_ConfigClockSource+0xd0>
 8002796:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800279a:	f200 8087 	bhi.w	80028ac <HAL_TIM_ConfigClockSource+0x168>
 800279e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80027a2:	f000 8085 	beq.w	80028b0 <HAL_TIM_ConfigClockSource+0x16c>
 80027a6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80027aa:	d87f      	bhi.n	80028ac <HAL_TIM_ConfigClockSource+0x168>
 80027ac:	2b70      	cmp	r3, #112	; 0x70
 80027ae:	d01a      	beq.n	80027e6 <HAL_TIM_ConfigClockSource+0xa2>
 80027b0:	2b70      	cmp	r3, #112	; 0x70
 80027b2:	d87b      	bhi.n	80028ac <HAL_TIM_ConfigClockSource+0x168>
 80027b4:	2b60      	cmp	r3, #96	; 0x60
 80027b6:	d050      	beq.n	800285a <HAL_TIM_ConfigClockSource+0x116>
 80027b8:	2b60      	cmp	r3, #96	; 0x60
 80027ba:	d877      	bhi.n	80028ac <HAL_TIM_ConfigClockSource+0x168>
 80027bc:	2b50      	cmp	r3, #80	; 0x50
 80027be:	d03c      	beq.n	800283a <HAL_TIM_ConfigClockSource+0xf6>
 80027c0:	2b50      	cmp	r3, #80	; 0x50
 80027c2:	d873      	bhi.n	80028ac <HAL_TIM_ConfigClockSource+0x168>
 80027c4:	2b40      	cmp	r3, #64	; 0x40
 80027c6:	d058      	beq.n	800287a <HAL_TIM_ConfigClockSource+0x136>
 80027c8:	2b40      	cmp	r3, #64	; 0x40
 80027ca:	d86f      	bhi.n	80028ac <HAL_TIM_ConfigClockSource+0x168>
 80027cc:	2b30      	cmp	r3, #48	; 0x30
 80027ce:	d064      	beq.n	800289a <HAL_TIM_ConfigClockSource+0x156>
 80027d0:	2b30      	cmp	r3, #48	; 0x30
 80027d2:	d86b      	bhi.n	80028ac <HAL_TIM_ConfigClockSource+0x168>
 80027d4:	2b20      	cmp	r3, #32
 80027d6:	d060      	beq.n	800289a <HAL_TIM_ConfigClockSource+0x156>
 80027d8:	2b20      	cmp	r3, #32
 80027da:	d867      	bhi.n	80028ac <HAL_TIM_ConfigClockSource+0x168>
 80027dc:	2b00      	cmp	r3, #0
 80027de:	d05c      	beq.n	800289a <HAL_TIM_ConfigClockSource+0x156>
 80027e0:	2b10      	cmp	r3, #16
 80027e2:	d05a      	beq.n	800289a <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 80027e4:	e062      	b.n	80028ac <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	6818      	ldr	r0, [r3, #0]
 80027ea:	683b      	ldr	r3, [r7, #0]
 80027ec:	6899      	ldr	r1, [r3, #8]
 80027ee:	683b      	ldr	r3, [r7, #0]
 80027f0:	685a      	ldr	r2, [r3, #4]
 80027f2:	683b      	ldr	r3, [r7, #0]
 80027f4:	68db      	ldr	r3, [r3, #12]
 80027f6:	f000 f95c 	bl	8002ab2 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	689b      	ldr	r3, [r3, #8]
 8002800:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002802:	68fb      	ldr	r3, [r7, #12]
 8002804:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002808:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	68fa      	ldr	r2, [r7, #12]
 8002810:	609a      	str	r2, [r3, #8]
      break;
 8002812:	e04e      	b.n	80028b2 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	6818      	ldr	r0, [r3, #0]
 8002818:	683b      	ldr	r3, [r7, #0]
 800281a:	6899      	ldr	r1, [r3, #8]
 800281c:	683b      	ldr	r3, [r7, #0]
 800281e:	685a      	ldr	r2, [r3, #4]
 8002820:	683b      	ldr	r3, [r7, #0]
 8002822:	68db      	ldr	r3, [r3, #12]
 8002824:	f000 f945 	bl	8002ab2 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	689a      	ldr	r2, [r3, #8]
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002836:	609a      	str	r2, [r3, #8]
      break;
 8002838:	e03b      	b.n	80028b2 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	6818      	ldr	r0, [r3, #0]
 800283e:	683b      	ldr	r3, [r7, #0]
 8002840:	6859      	ldr	r1, [r3, #4]
 8002842:	683b      	ldr	r3, [r7, #0]
 8002844:	68db      	ldr	r3, [r3, #12]
 8002846:	461a      	mov	r2, r3
 8002848:	f000 f8bc 	bl	80029c4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	2150      	movs	r1, #80	; 0x50
 8002852:	4618      	mov	r0, r3
 8002854:	f000 f913 	bl	8002a7e <TIM_ITRx_SetConfig>
      break;
 8002858:	e02b      	b.n	80028b2 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	6818      	ldr	r0, [r3, #0]
 800285e:	683b      	ldr	r3, [r7, #0]
 8002860:	6859      	ldr	r1, [r3, #4]
 8002862:	683b      	ldr	r3, [r7, #0]
 8002864:	68db      	ldr	r3, [r3, #12]
 8002866:	461a      	mov	r2, r3
 8002868:	f000 f8da 	bl	8002a20 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	2160      	movs	r1, #96	; 0x60
 8002872:	4618      	mov	r0, r3
 8002874:	f000 f903 	bl	8002a7e <TIM_ITRx_SetConfig>
      break;
 8002878:	e01b      	b.n	80028b2 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	6818      	ldr	r0, [r3, #0]
 800287e:	683b      	ldr	r3, [r7, #0]
 8002880:	6859      	ldr	r1, [r3, #4]
 8002882:	683b      	ldr	r3, [r7, #0]
 8002884:	68db      	ldr	r3, [r3, #12]
 8002886:	461a      	mov	r2, r3
 8002888:	f000 f89c 	bl	80029c4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	2140      	movs	r1, #64	; 0x40
 8002892:	4618      	mov	r0, r3
 8002894:	f000 f8f3 	bl	8002a7e <TIM_ITRx_SetConfig>
      break;
 8002898:	e00b      	b.n	80028b2 <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	681a      	ldr	r2, [r3, #0]
 800289e:	683b      	ldr	r3, [r7, #0]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	4619      	mov	r1, r3
 80028a4:	4610      	mov	r0, r2
 80028a6:	f000 f8ea 	bl	8002a7e <TIM_ITRx_SetConfig>
        break;
 80028aa:	e002      	b.n	80028b2 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 80028ac:	bf00      	nop
 80028ae:	e000      	b.n	80028b2 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 80028b0:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	2201      	movs	r2, #1
 80028b6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	2200      	movs	r2, #0
 80028be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80028c2:	2300      	movs	r3, #0
}
 80028c4:	4618      	mov	r0, r3
 80028c6:	3710      	adds	r7, #16
 80028c8:	46bd      	mov	sp, r7
 80028ca:	bd80      	pop	{r7, pc}

080028cc <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80028cc:	b480      	push	{r7}
 80028ce:	b083      	sub	sp, #12
 80028d0:	af00      	add	r7, sp, #0
 80028d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80028d4:	bf00      	nop
 80028d6:	370c      	adds	r7, #12
 80028d8:	46bd      	mov	sp, r7
 80028da:	bc80      	pop	{r7}
 80028dc:	4770      	bx	lr

080028de <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80028de:	b480      	push	{r7}
 80028e0:	b083      	sub	sp, #12
 80028e2:	af00      	add	r7, sp, #0
 80028e4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80028e6:	bf00      	nop
 80028e8:	370c      	adds	r7, #12
 80028ea:	46bd      	mov	sp, r7
 80028ec:	bc80      	pop	{r7}
 80028ee:	4770      	bx	lr

080028f0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80028f0:	b480      	push	{r7}
 80028f2:	b083      	sub	sp, #12
 80028f4:	af00      	add	r7, sp, #0
 80028f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80028f8:	bf00      	nop
 80028fa:	370c      	adds	r7, #12
 80028fc:	46bd      	mov	sp, r7
 80028fe:	bc80      	pop	{r7}
 8002900:	4770      	bx	lr

08002902 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002902:	b480      	push	{r7}
 8002904:	b083      	sub	sp, #12
 8002906:	af00      	add	r7, sp, #0
 8002908:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800290a:	bf00      	nop
 800290c:	370c      	adds	r7, #12
 800290e:	46bd      	mov	sp, r7
 8002910:	bc80      	pop	{r7}
 8002912:	4770      	bx	lr

08002914 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002914:	b480      	push	{r7}
 8002916:	b085      	sub	sp, #20
 8002918:	af00      	add	r7, sp, #0
 800291a:	6078      	str	r0, [r7, #4]
 800291c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	4a25      	ldr	r2, [pc, #148]	; (80029bc <TIM_Base_SetConfig+0xa8>)
 8002928:	4293      	cmp	r3, r2
 800292a:	d007      	beq.n	800293c <TIM_Base_SetConfig+0x28>
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002932:	d003      	beq.n	800293c <TIM_Base_SetConfig+0x28>
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	4a22      	ldr	r2, [pc, #136]	; (80029c0 <TIM_Base_SetConfig+0xac>)
 8002938:	4293      	cmp	r3, r2
 800293a:	d108      	bne.n	800294e <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800293c:	68fb      	ldr	r3, [r7, #12]
 800293e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002942:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002944:	683b      	ldr	r3, [r7, #0]
 8002946:	685b      	ldr	r3, [r3, #4]
 8002948:	68fa      	ldr	r2, [r7, #12]
 800294a:	4313      	orrs	r3, r2
 800294c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	4a1a      	ldr	r2, [pc, #104]	; (80029bc <TIM_Base_SetConfig+0xa8>)
 8002952:	4293      	cmp	r3, r2
 8002954:	d007      	beq.n	8002966 <TIM_Base_SetConfig+0x52>
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800295c:	d003      	beq.n	8002966 <TIM_Base_SetConfig+0x52>
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	4a17      	ldr	r2, [pc, #92]	; (80029c0 <TIM_Base_SetConfig+0xac>)
 8002962:	4293      	cmp	r3, r2
 8002964:	d108      	bne.n	8002978 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002966:	68fb      	ldr	r3, [r7, #12]
 8002968:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800296c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800296e:	683b      	ldr	r3, [r7, #0]
 8002970:	68db      	ldr	r3, [r3, #12]
 8002972:	68fa      	ldr	r2, [r7, #12]
 8002974:	4313      	orrs	r3, r2
 8002976:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002978:	68fb      	ldr	r3, [r7, #12]
 800297a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800297e:	683b      	ldr	r3, [r7, #0]
 8002980:	695b      	ldr	r3, [r3, #20]
 8002982:	4313      	orrs	r3, r2
 8002984:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	68fa      	ldr	r2, [r7, #12]
 800298a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800298c:	683b      	ldr	r3, [r7, #0]
 800298e:	689a      	ldr	r2, [r3, #8]
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002994:	683b      	ldr	r3, [r7, #0]
 8002996:	681a      	ldr	r2, [r3, #0]
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	4a07      	ldr	r2, [pc, #28]	; (80029bc <TIM_Base_SetConfig+0xa8>)
 80029a0:	4293      	cmp	r3, r2
 80029a2:	d103      	bne.n	80029ac <TIM_Base_SetConfig+0x98>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80029a4:	683b      	ldr	r3, [r7, #0]
 80029a6:	691a      	ldr	r2, [r3, #16]
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	2201      	movs	r2, #1
 80029b0:	615a      	str	r2, [r3, #20]
}
 80029b2:	bf00      	nop
 80029b4:	3714      	adds	r7, #20
 80029b6:	46bd      	mov	sp, r7
 80029b8:	bc80      	pop	{r7}
 80029ba:	4770      	bx	lr
 80029bc:	40012c00 	.word	0x40012c00
 80029c0:	40000400 	.word	0x40000400

080029c4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80029c4:	b480      	push	{r7}
 80029c6:	b087      	sub	sp, #28
 80029c8:	af00      	add	r7, sp, #0
 80029ca:	60f8      	str	r0, [r7, #12]
 80029cc:	60b9      	str	r1, [r7, #8]
 80029ce:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80029d0:	68fb      	ldr	r3, [r7, #12]
 80029d2:	6a1b      	ldr	r3, [r3, #32]
 80029d4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80029d6:	68fb      	ldr	r3, [r7, #12]
 80029d8:	6a1b      	ldr	r3, [r3, #32]
 80029da:	f023 0201 	bic.w	r2, r3, #1
 80029de:	68fb      	ldr	r3, [r7, #12]
 80029e0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80029e2:	68fb      	ldr	r3, [r7, #12]
 80029e4:	699b      	ldr	r3, [r3, #24]
 80029e6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80029e8:	693b      	ldr	r3, [r7, #16]
 80029ea:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80029ee:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	011b      	lsls	r3, r3, #4
 80029f4:	693a      	ldr	r2, [r7, #16]
 80029f6:	4313      	orrs	r3, r2
 80029f8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80029fa:	697b      	ldr	r3, [r7, #20]
 80029fc:	f023 030a 	bic.w	r3, r3, #10
 8002a00:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002a02:	697a      	ldr	r2, [r7, #20]
 8002a04:	68bb      	ldr	r3, [r7, #8]
 8002a06:	4313      	orrs	r3, r2
 8002a08:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002a0a:	68fb      	ldr	r3, [r7, #12]
 8002a0c:	693a      	ldr	r2, [r7, #16]
 8002a0e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002a10:	68fb      	ldr	r3, [r7, #12]
 8002a12:	697a      	ldr	r2, [r7, #20]
 8002a14:	621a      	str	r2, [r3, #32]
}
 8002a16:	bf00      	nop
 8002a18:	371c      	adds	r7, #28
 8002a1a:	46bd      	mov	sp, r7
 8002a1c:	bc80      	pop	{r7}
 8002a1e:	4770      	bx	lr

08002a20 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002a20:	b480      	push	{r7}
 8002a22:	b087      	sub	sp, #28
 8002a24:	af00      	add	r7, sp, #0
 8002a26:	60f8      	str	r0, [r7, #12]
 8002a28:	60b9      	str	r1, [r7, #8]
 8002a2a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002a2c:	68fb      	ldr	r3, [r7, #12]
 8002a2e:	6a1b      	ldr	r3, [r3, #32]
 8002a30:	f023 0210 	bic.w	r2, r3, #16
 8002a34:	68fb      	ldr	r3, [r7, #12]
 8002a36:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002a38:	68fb      	ldr	r3, [r7, #12]
 8002a3a:	699b      	ldr	r3, [r3, #24]
 8002a3c:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8002a3e:	68fb      	ldr	r3, [r7, #12]
 8002a40:	6a1b      	ldr	r3, [r3, #32]
 8002a42:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002a44:	697b      	ldr	r3, [r7, #20]
 8002a46:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002a4a:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	031b      	lsls	r3, r3, #12
 8002a50:	697a      	ldr	r2, [r7, #20]
 8002a52:	4313      	orrs	r3, r2
 8002a54:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002a56:	693b      	ldr	r3, [r7, #16]
 8002a58:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002a5c:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002a5e:	68bb      	ldr	r3, [r7, #8]
 8002a60:	011b      	lsls	r3, r3, #4
 8002a62:	693a      	ldr	r2, [r7, #16]
 8002a64:	4313      	orrs	r3, r2
 8002a66:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002a68:	68fb      	ldr	r3, [r7, #12]
 8002a6a:	697a      	ldr	r2, [r7, #20]
 8002a6c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002a6e:	68fb      	ldr	r3, [r7, #12]
 8002a70:	693a      	ldr	r2, [r7, #16]
 8002a72:	621a      	str	r2, [r3, #32]
}
 8002a74:	bf00      	nop
 8002a76:	371c      	adds	r7, #28
 8002a78:	46bd      	mov	sp, r7
 8002a7a:	bc80      	pop	{r7}
 8002a7c:	4770      	bx	lr

08002a7e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002a7e:	b480      	push	{r7}
 8002a80:	b085      	sub	sp, #20
 8002a82:	af00      	add	r7, sp, #0
 8002a84:	6078      	str	r0, [r7, #4]
 8002a86:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	689b      	ldr	r3, [r3, #8]
 8002a8c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002a8e:	68fb      	ldr	r3, [r7, #12]
 8002a90:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002a94:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002a96:	683a      	ldr	r2, [r7, #0]
 8002a98:	68fb      	ldr	r3, [r7, #12]
 8002a9a:	4313      	orrs	r3, r2
 8002a9c:	f043 0307 	orr.w	r3, r3, #7
 8002aa0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	68fa      	ldr	r2, [r7, #12]
 8002aa6:	609a      	str	r2, [r3, #8]
}
 8002aa8:	bf00      	nop
 8002aaa:	3714      	adds	r7, #20
 8002aac:	46bd      	mov	sp, r7
 8002aae:	bc80      	pop	{r7}
 8002ab0:	4770      	bx	lr

08002ab2 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002ab2:	b480      	push	{r7}
 8002ab4:	b087      	sub	sp, #28
 8002ab6:	af00      	add	r7, sp, #0
 8002ab8:	60f8      	str	r0, [r7, #12]
 8002aba:	60b9      	str	r1, [r7, #8]
 8002abc:	607a      	str	r2, [r7, #4]
 8002abe:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002ac0:	68fb      	ldr	r3, [r7, #12]
 8002ac2:	689b      	ldr	r3, [r3, #8]
 8002ac4:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002ac6:	697b      	ldr	r3, [r7, #20]
 8002ac8:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002acc:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002ace:	683b      	ldr	r3, [r7, #0]
 8002ad0:	021a      	lsls	r2, r3, #8
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	431a      	orrs	r2, r3
 8002ad6:	68bb      	ldr	r3, [r7, #8]
 8002ad8:	4313      	orrs	r3, r2
 8002ada:	697a      	ldr	r2, [r7, #20]
 8002adc:	4313      	orrs	r3, r2
 8002ade:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002ae0:	68fb      	ldr	r3, [r7, #12]
 8002ae2:	697a      	ldr	r2, [r7, #20]
 8002ae4:	609a      	str	r2, [r3, #8]
}
 8002ae6:	bf00      	nop
 8002ae8:	371c      	adds	r7, #28
 8002aea:	46bd      	mov	sp, r7
 8002aec:	bc80      	pop	{r7}
 8002aee:	4770      	bx	lr

08002af0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002af0:	b480      	push	{r7}
 8002af2:	b085      	sub	sp, #20
 8002af4:	af00      	add	r7, sp, #0
 8002af6:	6078      	str	r0, [r7, #4]
 8002af8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002b00:	2b01      	cmp	r3, #1
 8002b02:	d101      	bne.n	8002b08 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002b04:	2302      	movs	r3, #2
 8002b06:	e041      	b.n	8002b8c <HAL_TIMEx_MasterConfigSynchronization+0x9c>
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	2201      	movs	r2, #1
 8002b0c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	2202      	movs	r2, #2
 8002b14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	685b      	ldr	r3, [r3, #4]
 8002b1e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	689b      	ldr	r3, [r3, #8]
 8002b26:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002b28:	68fb      	ldr	r3, [r7, #12]
 8002b2a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002b2e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002b30:	683b      	ldr	r3, [r7, #0]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	68fa      	ldr	r2, [r7, #12]
 8002b36:	4313      	orrs	r3, r2
 8002b38:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	68fa      	ldr	r2, [r7, #12]
 8002b40:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	4a14      	ldr	r2, [pc, #80]	; (8002b98 <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 8002b48:	4293      	cmp	r3, r2
 8002b4a:	d009      	beq.n	8002b60 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002b54:	d004      	beq.n	8002b60 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	4a10      	ldr	r2, [pc, #64]	; (8002b9c <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 8002b5c:	4293      	cmp	r3, r2
 8002b5e:	d10c      	bne.n	8002b7a <HAL_TIMEx_MasterConfigSynchronization+0x8a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002b60:	68bb      	ldr	r3, [r7, #8]
 8002b62:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002b66:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002b68:	683b      	ldr	r3, [r7, #0]
 8002b6a:	685b      	ldr	r3, [r3, #4]
 8002b6c:	68ba      	ldr	r2, [r7, #8]
 8002b6e:	4313      	orrs	r3, r2
 8002b70:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	68ba      	ldr	r2, [r7, #8]
 8002b78:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	2201      	movs	r2, #1
 8002b7e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	2200      	movs	r2, #0
 8002b86:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002b8a:	2300      	movs	r3, #0
}
 8002b8c:	4618      	mov	r0, r3
 8002b8e:	3714      	adds	r7, #20
 8002b90:	46bd      	mov	sp, r7
 8002b92:	bc80      	pop	{r7}
 8002b94:	4770      	bx	lr
 8002b96:	bf00      	nop
 8002b98:	40012c00 	.word	0x40012c00
 8002b9c:	40000400 	.word	0x40000400

08002ba0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002ba0:	b480      	push	{r7}
 8002ba2:	b083      	sub	sp, #12
 8002ba4:	af00      	add	r7, sp, #0
 8002ba6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002ba8:	bf00      	nop
 8002baa:	370c      	adds	r7, #12
 8002bac:	46bd      	mov	sp, r7
 8002bae:	bc80      	pop	{r7}
 8002bb0:	4770      	bx	lr

08002bb2 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002bb2:	b480      	push	{r7}
 8002bb4:	b083      	sub	sp, #12
 8002bb6:	af00      	add	r7, sp, #0
 8002bb8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002bba:	bf00      	nop
 8002bbc:	370c      	adds	r7, #12
 8002bbe:	46bd      	mov	sp, r7
 8002bc0:	bc80      	pop	{r7}
 8002bc2:	4770      	bx	lr

08002bc4 <__libc_init_array>:
 8002bc4:	b570      	push	{r4, r5, r6, lr}
 8002bc6:	2600      	movs	r6, #0
 8002bc8:	4d0c      	ldr	r5, [pc, #48]	; (8002bfc <__libc_init_array+0x38>)
 8002bca:	4c0d      	ldr	r4, [pc, #52]	; (8002c00 <__libc_init_array+0x3c>)
 8002bcc:	1b64      	subs	r4, r4, r5
 8002bce:	10a4      	asrs	r4, r4, #2
 8002bd0:	42a6      	cmp	r6, r4
 8002bd2:	d109      	bne.n	8002be8 <__libc_init_array+0x24>
 8002bd4:	f000 f822 	bl	8002c1c <_init>
 8002bd8:	2600      	movs	r6, #0
 8002bda:	4d0a      	ldr	r5, [pc, #40]	; (8002c04 <__libc_init_array+0x40>)
 8002bdc:	4c0a      	ldr	r4, [pc, #40]	; (8002c08 <__libc_init_array+0x44>)
 8002bde:	1b64      	subs	r4, r4, r5
 8002be0:	10a4      	asrs	r4, r4, #2
 8002be2:	42a6      	cmp	r6, r4
 8002be4:	d105      	bne.n	8002bf2 <__libc_init_array+0x2e>
 8002be6:	bd70      	pop	{r4, r5, r6, pc}
 8002be8:	f855 3b04 	ldr.w	r3, [r5], #4
 8002bec:	4798      	blx	r3
 8002bee:	3601      	adds	r6, #1
 8002bf0:	e7ee      	b.n	8002bd0 <__libc_init_array+0xc>
 8002bf2:	f855 3b04 	ldr.w	r3, [r5], #4
 8002bf6:	4798      	blx	r3
 8002bf8:	3601      	adds	r6, #1
 8002bfa:	e7f2      	b.n	8002be2 <__libc_init_array+0x1e>
 8002bfc:	08002c54 	.word	0x08002c54
 8002c00:	08002c54 	.word	0x08002c54
 8002c04:	08002c54 	.word	0x08002c54
 8002c08:	08002c58 	.word	0x08002c58

08002c0c <memset>:
 8002c0c:	4603      	mov	r3, r0
 8002c0e:	4402      	add	r2, r0
 8002c10:	4293      	cmp	r3, r2
 8002c12:	d100      	bne.n	8002c16 <memset+0xa>
 8002c14:	4770      	bx	lr
 8002c16:	f803 1b01 	strb.w	r1, [r3], #1
 8002c1a:	e7f9      	b.n	8002c10 <memset+0x4>

08002c1c <_init>:
 8002c1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002c1e:	bf00      	nop
 8002c20:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002c22:	bc08      	pop	{r3}
 8002c24:	469e      	mov	lr, r3
 8002c26:	4770      	bx	lr

08002c28 <_fini>:
 8002c28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002c2a:	bf00      	nop
 8002c2c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002c2e:	bc08      	pop	{r3}
 8002c30:	469e      	mov	lr, r3
 8002c32:	4770      	bx	lr
